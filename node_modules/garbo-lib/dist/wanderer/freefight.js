"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.freefightFactory = void 0;
const kolmafia_1 = require("kolmafia");
const libram_1 = require("libram");
const lib_1 = require("./lib");
function averageYrValue(location, forceItemDrops, options) {
    const badAttributes = ["LUCKY", "ULTRARARE", "BOSS"];
    const rates = (0, kolmafia_1.appearanceRates)(location);
    const monsters = (0, kolmafia_1.getMonsters)(location).filter((m) => !badAttributes.some((s) => m.attributes.includes(s)) && rates[m.name] > 0);
    const canDuplicate = libram_1.SourceTerminal.have() && libram_1.SourceTerminal.duplicateUsesRemaining() > 0;
    if (monsters.length === 0) {
        return 0;
    }
    else {
        return ((0, libram_1.sum)(monsters, (m) => {
            const items = (0, kolmafia_1.itemDropsArray)(m).filter((drop) => ["", "n"].includes(drop.type));
            const duplicateFactor = canDuplicate && !m.attributes.includes("NOCOPY") ? 2 : 1;
            // TODO: this should consider unbuffed meat drop and unbuffed item drop, probably
            const meatDrop = (0, libram_1.clamp)((m.minMeat + m.maxMeat) / 2, 0, 1000);
            const itemDrop = duplicateFactor *
                (0, libram_1.sum)(items, (drop) => {
                    const yrRate = (drop.type === "" && forceItemDrops ? 100 : drop.rate) / 100;
                    return yrRate * options.itemValue(drop.drop);
                });
            return itemDrop + meatDrop + (0, lib_1.bofaValue)(options, m);
        }) / monsters.length);
    }
}
function monsterValues(forceItemDrops, options) {
    const values = new Map();
    for (const location of kolmafia_1.Location.all().filter((l) => (0, lib_1.canAdventureOrUnlock)(l) && !(0, lib_1.underwater)(l))) {
        values.set(location, averageYrValue(location, forceItemDrops, options) +
            options.freeFightExtraValue(location));
    }
    return values;
}
// Doing a free fight + yellow ray combination against a random enemy
function freefightFactory(type, locationSkiplist, options) {
    if (type === "yellow ray" || type === "freefight") {
        const validLocations = kolmafia_1.Location.all().filter((location) => (0, lib_1.canWander)(location, "yellow ray") && (0, lib_1.canAdventureOrUnlock)(location));
        const locationValues = monsterValues(type === "yellow ray", options);
        const bestZones = new Set([
            (0, libram_1.maxBy)(validLocations, (l) => locationValues.get(l) ?? 0),
        ]);
        for (const unlockableZone of lib_1.UnlockableZones) {
            const extraLocations = kolmafia_1.Location.all().filter((l) => l.zone === unlockableZone.zone && !locationSkiplist.includes(l));
            bestZones.add((0, libram_1.maxBy)(extraLocations, (l) => locationValues.get(l) ?? 0));
        }
        if (bestZones.size > 0) {
            return [...bestZones].map((l) => new lib_1.WandererTarget(`Yellow Ray ${l}`, l, locationValues.get(l) ?? 0));
        }
    }
    return [];
}
exports.freefightFactory = freefightFactory;
