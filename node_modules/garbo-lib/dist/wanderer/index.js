"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WandererManager = void 0;
const kolmafia_1 = require("kolmafia");
const libram_1 = require("libram");
const guzzlr_1 = require("./guzzlr");
const lib_1 = require("./lib");
const lovebugs_1 = require("./lovebugs");
const freefight_1 = require("./freefight");
const eightbit_1 = require("./eightbit");
function sober() {
    return ((0, kolmafia_1.myInebriety)() <=
        (0, kolmafia_1.inebrietyLimit)() + ((0, kolmafia_1.myFamiliar)() === (0, libram_1.$familiar) `Stooper` ? -1 : 0));
}
const wanderFactories = [
    lib_1.defaultFactory,
    freefight_1.freefightFactory,
    lovebugs_1.lovebugsFactory,
    guzzlr_1.guzzlrFactory,
    eightbit_1.eightbitFactory,
];
function bestWander(type, locationSkiplist, nameSkiplist, options) {
    const possibleLocations = new Map();
    for (const wanderFactory of wanderFactories) {
        const wanderTargets = wanderFactory(type, locationSkiplist, options);
        for (const wanderTarget of wanderTargets) {
            if (!nameSkiplist.includes(wanderTarget.name) &&
                !locationSkiplist.includes(wanderTarget.location) &&
                (0, lib_1.canWander)(wanderTarget.location, type)) {
                const wandererLocation = possibleLocations.get(wanderTarget.location) ?? {
                    location: wanderTarget.location,
                    targets: [],
                    value: 0,
                };
                wandererLocation.targets = [...wandererLocation.targets, wanderTarget];
                wandererLocation.value += wanderTarget.value;
                possibleLocations.set(wandererLocation.location, wandererLocation);
            }
        }
    }
    if (possibleLocations.size === 0) {
        throw "Could not determine a wander target!";
    }
    return (0, libram_1.maxBy)([...possibleLocations.values()], "value");
}
/**
 * Recursively Check for zones to wander to
 * @param type type of fight we are looking for
 * @param nameSkiplist Any wanderer tasks that should be skipped because they could not be prepared
 * @param locationSkiplist Any locations that should be skipped because they could not be unlocked
 * @returns A location at which to wander
 */
function wanderWhere(options, type, nameSkiplist = [], locationSkiplist = []) {
    const candidate = bestWander(type, locationSkiplist, nameSkiplist, options);
    const failed = candidate.targets.filter((target) => !target.prepareTurn());
    const badLocation = !(0, lib_1.canAdventureOrUnlock)(candidate.location) ||
        !(0, lib_1.unlock)(candidate.location, candidate.value) ||
        !(0, lib_1.canWander)(candidate.location, type)
        ? [candidate.location]
        : [];
    if (failed.length > 0 || badLocation.length > 0) {
        return wanderWhere(options, type, [...nameSkiplist, ...failed.map((target) => target.name)], [...locationSkiplist, ...badLocation]);
    }
    else {
        const targets = candidate.targets.map((t) => t.name).join("; ");
        const value = candidate.value.toFixed(2);
        (0, kolmafia_1.print)(`Wandering at ${candidate.location} for expected value ${value} (${targets})`, (0, kolmafia_1.isDarkMode)() ? "yellow" : "blue");
        return candidate.location;
    }
}
const defaultWanderOptions = {
    drunkSafe: true,
    allowEquipment: true,
};
class WandererManager {
    quartetChoice = (0, libram_1.get)("lastQuartetRequest") || 4;
    unsupportedChoices = new Map([
        [(0, libram_1.$location) `The Spooky Forest`, { 502: 2, 505: 2 }],
        [(0, libram_1.$location) `Guano Junction`, { 1427: 1 }],
        [(0, libram_1.$location) `The Hidden Apartment Building`, { 780: 6, 1578: 6 }],
        [(0, libram_1.$location) `The Black Forest`, { 923: 1, 924: 1 }],
        [(0, libram_1.$location) `LavaCoâ„¢ Lamp Factory`, { 1091: 9 }],
        [(0, libram_1.$location) `The Haunted Laboratory`, { 884: 6 }],
        [(0, libram_1.$location) `The Haunted Nursery`, { 885: 6 }],
        [(0, libram_1.$location) `The Haunted Storage Room`, { 886: 6 }],
        [(0, libram_1.$location) `The Haunted Ballroom`, { 106: 3, 90: this.quartetChoice }],
        [(0, libram_1.$location) `The Haunted Library`, { 163: 4, 888: 4, 889: 5 }],
        [(0, libram_1.$location) `The Haunted Gallery`, { 89: 6, 91: 2 }],
        [(0, libram_1.$location) `The Hidden Park`, { 789: 6 }],
        [
            (0, libram_1.$location) `A Mob of Zeppelin Protesters`,
            { 1432: 1, 856: 2, 857: 2, 858: 2 },
        ],
        [(0, libram_1.$location) `A-Boo Peak`, { 1430: 2 }],
        [(0, libram_1.$location) `Sloppy Seconds Diner`, { 919: 6 }],
        [(0, libram_1.$location) `VYKEA`, { 1115: 6 }],
        [
            (0, libram_1.$location) `The Castle in the Clouds in the Sky (Basement)`,
            {
                669: 1,
                670: 4,
                671: 4,
            },
        ],
        [
            (0, libram_1.$location) `The Haunted Bedroom`,
            {
                876: 1,
                877: 1,
                878: 1,
                879: 2,
                880: 2, // a dumb 75 meat club
            },
        ],
        [(0, libram_1.$location) `The Copperhead Club`, { 855: 4 }],
        [(0, libram_1.$location) `The Haunted Bathroom`, { 882: 2 }],
        [
            (0, libram_1.$location) `The Castle in the Clouds in the Sky (Top Floor)`,
            {
                1431: 1,
                675: 4,
                676: 4,
                677: 1,
                678: 3, // Go to Steampunk choice
            },
        ],
        [
            (0, libram_1.$location) `The Castle in the Clouds in the Sky (Ground Floor)`,
            {
                672: 3,
                673: 3,
                674: 3,
                1026: 3, // Skip
            },
        ],
        [(0, libram_1.$location) `The Hidden Office Building`, { 786: 6 }],
        [(0, libram_1.$location) `Cobb's Knob Barracks`, { 522: 2 }],
        [(0, libram_1.$location) `The Penultimate Fantasy Airship`, { 178: 2, 182: 1 }],
        [(0, libram_1.$location) `The Haiku Dungeon`, { 297: 3 }], // skip
    ]);
    equipment = new Map([
        ...kolmafia_1.Location.all()
            .filter((l) => l.zone === "The 8-Bit Realm")
            .map((l) => [l, (0, libram_1.$items) `continuum transfunctioner`]),
        [
            (0, libram_1.$location) `Shadow Rift (The 8-Bit Realm)`,
            (0, libram_1.$items) `continuum transfunctioner`,
        ],
    ]);
    cacheKey = "";
    targets = {};
    options;
    constructor(options) {
        this.options = options;
    }
    getTarget(wanderer) {
        const { draggableFight, options } = (0, lib_1.isDraggableFight)(wanderer)
            ? { draggableFight: wanderer, options: {} }
            : { draggableFight: wanderer.wanderer, options: wanderer };
        const { drunkSafe, allowEquipment } = {
            ...defaultWanderOptions,
            ...options,
        };
        const newKey = `${(0, kolmafia_1.myTotalTurnsSpent)()};${(0, kolmafia_1.totalTurnsPlayed)()};${(0, libram_1.get)("familiarSweat")}`;
        if (this.cacheKey !== newKey)
            this.clear();
        this.cacheKey = newKey;
        const locationSkipList = allowEquipment ? [] : [...this.equipment.keys()];
        return sober() || !drunkSafe
            ? (this.targets[`${draggableFight}:${allowEquipment}`] ??= wanderWhere(this.options, draggableFight, [], locationSkipList))
            : (0, libram_1.$location) `Drunken Stupor`;
    }
    getChoices(wanderer) {
        return this.unsupportedChoices.get(this.getTarget(wanderer)) ?? {};
    }
    clear() {
        this.targets = {};
    }
    getEquipment(wanderer) {
        return this.equipment.get(this.getTarget(wanderer)) ?? [];
    }
}
exports.WandererManager = WandererManager;
