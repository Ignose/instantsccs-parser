import { Effect, Item, Location, Monster } from "kolmafia";
export declare const draggableFights: readonly ["backup", "wanderer", "yellow ray", "freefight"];
export type DraggableFight = (typeof draggableFights)[number];
export declare function isDraggableFight<T>(fight: T | string): fight is DraggableFight;
interface UnlockableZone {
    zone: string;
    available: () => boolean;
    unlocker: Item;
    noInv: boolean;
}
export type WandererFactoryOptions = {
    ascend: boolean;
    estimatedTurns: () => number;
    freeFightExtraValue: (loc: Location) => number;
    itemValue: (item: Item) => number;
    effectValue: (effect: Effect, duration: number) => number;
    plentifulMonsters: Monster[];
    prioritizeCappingGuzzlr: boolean;
    digitzesRemaining?: (turns: number) => number;
};
export type WandererFactory = (type: DraggableFight, locationSkiplist: Location[], options: WandererFactoryOptions) => WandererTarget[];
export type WandererLocation = {
    location: Location;
    targets: WandererTarget[];
    value: number;
};
export declare const UnlockableZones: UnlockableZone[];
export declare function underwater(location: Location): boolean;
export declare function canAdventureOrUnlock(loc: Location): boolean;
export declare function unlock(loc: Location, value: number): boolean;
export declare function canWander(location: Location, type: DraggableFight): boolean;
export declare class WandererTarget {
    name: string;
    value: number;
    location: Location;
    prepareTurn: () => boolean;
    /**
     * Process for determining where to put a wanderer to extract additional value from it
     * @param name name of this wanderer - for documentation/logging purposes
     * @param location returns the location to adventure to target this; null only if something goes wrong
     * @param value the expected additional value of putting a single wanderer-fight into the zone for this
     * @param prepareTurn attempt to set up, spending meat and or items as necessary
     */
    constructor(name: string, location: Location, value: number, prepareTurn?: () => boolean);
}
export declare function defaultFactory(): WandererTarget[];
export declare function wandererTurnsAvailableToday(options: WandererFactoryOptions, location: Location): number;
export declare function bofaValue({ plentifulMonsters, itemValue, effectValue }: WandererFactoryOptions, monster: Monster): number;
export {};
