"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.guzzlrFactory = void 0;
const kolmafia_1 = require("kolmafia");
const libram_1 = require("libram");
const lib_1 = require("./lib");
function considerAbandon(options, locationSkiplist) {
    const location = libram_1.Guzzlr.getLocation();
    const remaningTurns = Math.ceil((100 - (0, libram_1.get)("guzzlrDeliveryProgress")) / (10 - (0, libram_1.get)("_guzzlrDeliveries")));
    (0, kolmafia_1.print)(`Got guzzlr quest ${libram_1.Guzzlr.getTier()} at ${libram_1.Guzzlr.getLocation()} with remaining turns ${remaningTurns}`);
    if (libram_1.Guzzlr.canAbandon() &&
        // consider abandoning
        (!location || // if mafia failed to track the location correctly
            locationSkiplist.includes(location) ||
            !(0, lib_1.canAdventureOrUnlock)(location) || // or the zone is marked as "generally cannot adv"
            (options.ascend &&
                (0, lib_1.wandererTurnsAvailableToday)(options, location) < remaningTurns)) // or ascending and not enough turns to finish
    ) {
        (0, kolmafia_1.print)("Abandoning...");
        libram_1.Guzzlr.abandon();
    }
}
function acceptGuzzlrQuest(options, locationSkiplist) {
    if (libram_1.Guzzlr.isQuestActive())
        considerAbandon(options, locationSkiplist);
    while (!libram_1.Guzzlr.isQuestActive()) {
        (0, kolmafia_1.print)("Picking a guzzlr quest");
        if (libram_1.Guzzlr.canPlatinum() &&
            !(options.prioritizeCappingGuzzlr && libram_1.Guzzlr.haveFullPlatinumBonus())) {
            libram_1.Guzzlr.acceptPlatinum();
        }
        else if (libram_1.Guzzlr.canGold() &&
            (libram_1.Guzzlr.haveFullBronzeBonus() || !libram_1.Guzzlr.haveFullGoldBonus())) {
            // if gold is not maxed, do that first since they are limited per day
            libram_1.Guzzlr.acceptGold();
        }
        else {
            // fall back to bronze when can't plat, can't gold, or bronze is not maxed
            libram_1.Guzzlr.acceptBronze();
        }
        considerAbandon(options, locationSkiplist);
    }
}
function guzzlrValue(buckValue, tier) {
    const progressPerTurn = 100 / (10 - (0, libram_1.get)("_guzzlrDeliveries"));
    switch (tier) {
        case null:
            return 0;
        case "bronze":
            return (3 * buckValue) / progressPerTurn;
        case "gold":
            return (6 * buckValue) / progressPerTurn;
        case "platinum":
            return (21.5 * buckValue) / progressPerTurn;
    }
}
function guzzlrFactory(_type, locationSkiplist, options) {
    if (libram_1.Guzzlr.have()) {
        const buckValue = options.itemValue((0, libram_1.$item) `Guzzlrbuck`);
        acceptGuzzlrQuest(options, locationSkiplist);
        const location = libram_1.Guzzlr.getLocation();
        if (location !== null) {
            const guzzlrBooze = libram_1.Guzzlr.getTier() === "platinum"
                ? libram_1.Guzzlr.getCheapestPlatinumCocktail()
                : libram_1.Guzzlr.getBooze();
            return guzzlrBooze
                ? [
                    new lib_1.WandererTarget("Guzzlr", location, guzzlrValue(buckValue, libram_1.Guzzlr.getTier()) - (0, kolmafia_1.mallPrice)(guzzlrBooze), () => {
                        if (!guzzlrBooze) {
                            // this is an error state - accepted a guzzlr quest but mafia doesn't know the booze
                            return false;
                        }
                        if (!(0, libram_1.have)(guzzlrBooze)) {
                            const fancy = guzzlrBooze && (0, kolmafia_1.craftType)(guzzlrBooze).includes("fancy");
                            if (guzzlrBooze &&
                                (!fancy || (fancy && (0, libram_1.freeCrafts)("booze") > 0))) {
                                (0, kolmafia_1.retrieveItem)(guzzlrBooze);
                            }
                            else if (guzzlrBooze) {
                                (0, kolmafia_1.buy)(1, guzzlrBooze, guzzlrValue(buckValue, libram_1.Guzzlr.getTier()));
                            }
                        }
                        return (0, libram_1.have)(guzzlrBooze);
                    }),
                ]
                : [];
        }
    }
    return [];
}
exports.guzzlrFactory = guzzlrFactory;
