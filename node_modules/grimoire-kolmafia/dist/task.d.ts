import { Effect, Item, Location } from "kolmafia";
import { Delayed } from "libram";
import { StringProperty } from "libram/dist/propertyTypes";
import { CombatStrategy } from "./combat";
import { Limit } from "./limit";
import { Outfit, OutfitSpec } from "./outfit";
export declare type Quest<T, Context = void> = {
    name: string;
    completed?: (ctx: Context) => boolean;
    ready?: (ctx: Context) => boolean;
    tasks: T[];
};
export declare type AcquireItem<Context = void> = {
    item: Item;
    num?: number;
    price?: number;
    useful?: (ctx: Context) => boolean;
    optional?: boolean;
    get?: (ctx: Context) => void;
};
/**
 * A single script step or action to take.
 *
 * Most scripts will not need to change the generic parameters from the default
 * values; they are only needed for advanced use cases.
 *
 * @param A The set of combat placeholder actions.
 * @param Context The type for global state passed from the engine (@see ContextualEngine).
 */
export declare type Task<A extends string = never, Context = void> = {
    name: string;
    after?: string[];
    ready?: (ctx: Context) => boolean;
    completed: (ctx: Context) => boolean;
    prepare?: (ctx: Context) => void;
    do: Location | ((ctx: Context) => Location) | ((context: Context) => void);
    post?: (ctx: Context) => void;
    acquire?: Delayed<AcquireItem[], [Context]>;
    effects?: Delayed<Effect[], [Context]>;
    choices?: Delayed<{
        [id: number]: number | string;
    }, [Context]>;
    limit?: Limit<Context>;
    outfit?: Delayed<OutfitSpec | Outfit, [Context]>;
    combat?: CombatStrategy<A, Context>;
};
export declare type StrictCombatTask<A extends string = never, Context = void, C extends CombatStrategy<A, Context> = CombatStrategy<A, Context>, O extends OutfitSpec | Outfit = OutfitSpec | Outfit> = Omit<Task<A, Context>, "do" | "combat" | "outfit"> & ({
    do: Delayed<Location, [Context]> | ((context: Context) => void);
    combat: C;
    outfit: Delayed<O, [Context]>;
} | {
    do: () => void;
    outfit?: Delayed<O, [Context]>;
});
/**
 * Returns the state of a quest as a numeric value as follows:
 *   "unstarted" => -1
 *   "started" => 0
 *   "stepNUM" => NUM
 *   "finished" => 999
 */
export declare function step(questName: StringProperty): number;
