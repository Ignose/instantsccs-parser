import { Quest, Task } from "./task";
/**
 * Extract a list of tasks from the provided quests.
 *
 * Each task name is prepended with the quest name ("Quest Name/Task Name").
 * The quest-local names referred to in task.after are updated appropriately.
 * The task completion condition is updated to include the quest completion.
 *
 * Tasks are returned in-order: all tasks from the first quest, then all tasks
 * from the second quest, etc.
 *
 * @param quests The list of quests. This method does not modify the quest
 *    objects or their tasks.
 * @param implicitAfter If true, each task with task.after = undefined will
 *    have a dependency added on the previous task in the list.
 * @returns A list of tasks from the input quests (with updated properties).
 */
export declare function getTasks<A extends string, T extends Task<A> = Task<A>>(quests: Quest<T>[], implicitAfter?: boolean, verifyTaskDependencies?: boolean): T[];
export declare function verifyDependencies<A extends string>(tasks: Task<A>[]): Task<A, void>[];
export declare function orderByRoute<A extends string, T extends Task<A> = Task<A>>(tasks: T[], routing: string[], ignore_missing_tasks?: boolean): T[];
