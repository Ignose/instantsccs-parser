"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RNG = void 0;
const PHPMTRand_1 = require("./PHPMTRand");
const PHPRand_1 = require("./PHPRand");
class RNG {
    constructor(seed) {
        this.rand = new PHPRand_1.PHPRand(seed);
        this.mtRand = new PHPMTRand_1.PHPMTRand(seed);
    }
    roll(a, b) {
        const [min, max] = b ? [a, b] : [1, a];
        return this.mtRand.roll(min, max);
    }
    /**
     * Picks a single item from an array (replicating KoL's `pickone` function, which uses PHP 5.3's `mt_rand`)
     *
     * @param array Array to pick from
     * @returns Picked item
     */
    pickOne(array) {
        return array[this.roll(array.length) - 1];
    }
    /**
     * Picks n items from an array (replicating PHP 5.3 `array_rand`). If quantity is 1, shortcuts to `pickOne`.
     *
     * @param array Array to pick from
     * @param quantity Quantity to pick
     * @returns Array of picked items (or sin)
     */
    pick(array, quantity) {
        if (quantity == 1)
            return [this.pickOne(array)];
        return this.rand.pick(array, quantity);
    }
    /**
     * Shuffle an array in place (replicating PHP 5.3 `shuffle`)
     * @param array Array to shuffle
     * @returns Shuffled array
     */
    shuffle(array) {
        return this.rand.shuffle(array);
    }
}
exports.RNG = RNG;
