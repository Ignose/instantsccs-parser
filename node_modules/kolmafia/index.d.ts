// v5.28597.0
// Generated by KoLmafia r28597 with type generator v5
type Environment = "indoor" | "none" | "outdoor" | "underground" | "underwater" | "unknown";
type ModifierValueType = "boolean" | "multistring" | "none" | "numeric" | "string";
export function abort(string?: string): never;
export function absorbedMonsters(): { [monster: string]: boolean };
export function addItemCondition(count: number, item: Item): void;
export function addItemCondition(item: Item, count: number): void;
export function adv1(locationValue: Location, adventuresUsedValue?: number): boolean;
export function adv1(locationValue: Location, adventuresUsedValue: number, filterFunction?: string | ((round: number, monster: Monster, text: string) => string)): boolean;
export function advCost(skill: Skill): number;
export function adventure(location: Location, count: number, filterFunction?: string | ((round: number, monster: Monster, text: string) => string)): boolean;
export function adventure(count: number, location: Location, filterFunction?: string | ((round: number, monster: Monster, text: string) => string)): boolean;
export function allMonstersWithId(): { [monster: string]: boolean };
export function allNormalOutfits(): string[];
export function alliedRadio(request: string): boolean;
export function appearanceRates(location: Location, includeQueue?: boolean): { [monster: string]: number };
export function append(buffer: string, s: string): string;
export function attack(): string;
export function autosell(item: Item, count: number): boolean;
export function autosell(count: number, item: Item): boolean;
export function autosellPrice(item: Item): number;
export function availableAmount(item: Item): number;
export function availableChoiceOptions(spoilers?: boolean): { [key: number]: string };
export function availableChoiceSelectInputs(decision: number): { [key: string]: { [key: string]: string } };
export function availableChoiceTextInputs(decision: number): { [key: string]: string };
export function availablePocket(monster: Monster): number;
export function availablePocket(effect: Effect): number;
export function availablePocket(item: Item): number;
export function availablePocket(stat: Stat): number;
export function banishedBy(monster: Monster): string[];
export function batchClose(): boolean;
export function batchOpen(): void;
export function beretBuskingEffects(): { [effect: string]: number };
export function beretBuskingEffects(power: number, cast: number): { [effect: string]: number };
export function bjornifyFamiliar(familiar: Familiar): boolean;
export function blackMarketAvailable(): boolean;
export function booleanModifier(modifier: string): boolean;
export function booleanModifier(modifier: Modifier): boolean;
export function booleanModifier(type: string, modifier: string): boolean;
export function booleanModifier(type: string, modifier: Modifier): boolean;
export function booleanModifier(item: Item, modifier: string): boolean;
export function booleanModifier(item: Item, modifier: Modifier): boolean;
export function booleanModifier(effect: Effect, modifier: string): boolean;
export function booleanModifier(effect: Effect, modifier: Modifier): boolean;
export function buffedHitStat(): number;
export function bufferToFile(buffer: string, filename: string): boolean;
export function buy(item: Item, quantity?: number): boolean;
export function buy(quantity: number, item: Item): boolean;
export function buy(item: Item, quantity: number, price: number): number;
export function buy(quantity: number, item: Item, price: number): number;
export function buy(coinmaster: Coinmaster, quantity: number, item: Item): boolean;
export function buyPrice(master: Coinmaster, item: Item): number;
export function buyUsingStorage(item: Item, quantity?: number): boolean;
export function buyUsingStorage(quantity: number, item: Item): boolean;
export function buyUsingStorage(item: Item, quantity: number, price: number): number;
export function buyUsingStorage(quantity: number, item: Item, price: number): number;
export function buysItem(master: Coinmaster, item: Item): boolean;
export function canAdventure(location: Location): boolean;
export function canDrink(): boolean;
export function canEat(): boolean;
export function canEquip(equipment: Item): boolean;
export function canEquip(familiar: Familiar, item?: Item): boolean;
export function canFaxbot(monster: Monster, faxbot?: string): boolean;
export function canInteract(): boolean;
export function canStillSteal(): boolean;
export function canadiaAvailable(): boolean;
export function candyForTier(tier: number, flags?: number): Item[];
export function ceil(val: number): number;
export function changeMcd(level: number): boolean;
export function charAt(source: string, index: number): string;
export function chatClan(messageValue: string, recipientValue?: string): void;
export function chatMacro(macroValue: string): void;
export function chatNotify(messageValue: string, colorValue: string): void;
export function chatPrivate(recipientValue: string, messageValue: string): void;
export function chew(item: Item, count?: number): boolean;
export function chew(count: number, item: Item): boolean;
export function choiceFollowsFight(): boolean;
export function classModifier(type: string, modifier: string): Class;
export function classModifier(type: string, modifier: Modifier): Class;
export function classModifier(item: Item, modifier: string): Class;
export function classModifier(item: Item, modifier: Modifier): Class;
export function clear(agg: any): void;
export function clearBoozeHelper(): void;
export function clearFoodHelper(): void;
export function cliExecute(string: string): boolean;
export function cliExecuteOutput(string: string): string;
export function closetAmount(item: Item): number;
export function combatManaCostModifier(): number;
export function combatRateModifier(): number;
export function combatSkillAvailable(skill: Skill): boolean;
export function concoctionPrice(value: Item): number;
export function concoctionPrice(value: Vykea): number;
export function containsText(source: string, search: string): boolean;
export function council(): void;
export function count(agg: any): number;
export function craft(modeValue: string, countValue: number, item1: Item, item2: Item): number;
export function craftType(item: Item): string;
export function creatableAmount(item: Item): number;
export function creatableTurns(itemId: Item, count?: number): number;
export function creatableTurns(itemId: Item, count: number, freeCrafting?: boolean): number;
export function create(item: Item, count?: number): boolean;
export function create(count: number, item: Item): boolean;
export function currentHitStat(): Stat;
export function currentMcd(): number;
export function currentPvpStances(): { [key: string]: number };
export function currentRadSickness(): number;
export function currentRound(): number;
export function curse(itemId: Item, target: string, message?: string): boolean;
export function curse(quantity: number, itemId: Item, target: string, message: string): boolean;
export function dadSeaMonkeeWeakness(round: number): Element;
export function dailySpecial(): Item;
export function damageAbsorptionPercent(): number;
export function damageReduction(): number;
export function dartPartsToSkills(): { [key: string]: Skill };
export function dartSkillsToParts(): { [skill: string]: string };
export function dateToTimestamp(inFormat: string, dateTimeString: string): number;
export function daycount(): number;
export function debugprint(string: string): void;
export function descToEffect(value: string): Effect;
export function descToItem(value: string): Item;
export function disable(name: string): void;
export function dispensaryAvailable(): boolean;
export function displayAmount(item: Item): number;
export function drink(item: Item, count?: number): boolean;
export function drink(count: number, item: Item): boolean;
export function drinksilent(item: Item, count?: number): boolean;
export function drinksilent(count: number, item: Item): boolean;
export function dump(arg: any, color?: string): void;
export function eat(item: Item, count?: number): boolean;
export function eat(count: number, item: Item): boolean;
export function eatsilent(item: Item, count?: number): boolean;
export function eatsilent(count: number, item: Item): boolean;
export function effectFact(monster: Monster): Effect;
export function effectFact(cls: Class, path: Path, monster: Monster): Effect;
export function effectModifier(type: string, modifier: string): Effect;
export function effectModifier(type: string, modifier: Modifier): Effect;
export function effectModifier(item: Item, modifier: string): Effect;
export function effectModifier(item: Item, modifier: Modifier): Effect;
export function effectPockets(): { [key: number]: boolean };
export function effectsModifier(type: string, modifier: string): Effect[];
export function effectsModifier(type: string, modifier: Modifier): Effect[];
export function effectsModifier(item: Item, modifier: string): Effect[];
export function effectsModifier(item: Item, modifier: Modifier): Effect[];
export function eightBitPoints(locationValue: Location): number;
export function eightBitPoints(locationValue: Location, colorValue: string, modValue: number): number;
export function elementalResistance(element?: Element): number;
export function elementalResistance(monster: Monster): number;
export function emptyCloset(): boolean;
export function enable(name: string): void;
export function endsWith(source: string, suffix: string): boolean;
export function enthroneFamiliar(familiar: Familiar): boolean;
export function entityDecode(string: string): string;
export function entityEncode(string: string): string;
export function equip(item: Item, slot?: Slot): boolean;
export function equip(slot: Slot, item: Item): boolean;
export function equip(item: Item, familiar: Familiar): boolean;
export function equip(familiar: Familiar, item: Item): boolean;
export function equipAllFamiliars(): boolean;
export function equippedAmount(item: Item, includeAllFamiliars?: boolean): number;
export function equippedItem(slot: Slot): Item;
export function eudora(): string;
export function eudora(newEudora: string): boolean;
export function eudoraItem(): Item;
export function everyCardName(name: string): string;
export function expectedColdMedicineCabinet(): { [key: string]: Item };
export function expectedDamage(monster?: Monster): number;
export function experienceBonus(): number;
export function expressionEval(expr: string): number;
export function extractItems(string: string): { [item: string]: number };
export function extractMeat(string: string): number;
export function factType(monster: Monster): "none" | "effect" | "item" | "stats" | "hp" | "mp" | "meat" | "modifier";
export function factType(cls: Class, path: Path, monster: Monster): "none" | "effect" | "item" | "stats" | "hp" | "mp" | "meat" | "modifier";
export function familiarEquipment(familiar: Familiar): Item;
export function familiarEquippedEquipment(familiar: Familiar): Item;
export function familiarWeight(familiar: Familiar): number;
export function favoriteFamiliars(): { [familiar: string]: boolean };
export function faxbot(monsterName: Monster, botName?: string): boolean;
export function fightFollowsChoice(): boolean;
export function fileToArray(filename: string): { [key: number]: string };
export function fileToBuffer(filename: string): string;
export function fileToMap(filename: string, result: any, compact?: boolean): boolean;
export function floor(val: number): number;
export function floristAvailable(): boolean;
export function flushMonsterManuelCache(): boolean;
export function formField(key: string): string;
export function formFields(): { [key: string]: string };
export function formatDateTime(inFormat: string, dateTimeString: string, outFormat: string): string;
export function freeCooks(): number;
export function freeCrafts(): number;
export function freeMixes(): number;
export function freeSmiths(): number;
export function friarsAvailable(): boolean;
export function fuelCost(skill: Skill): number;
export function fullnessLimit(): number;
export function gamedayToInt(): number;
export function gamedayToString(): string;
export function gametimeToInt(): number;
export function getAllProperties(filterValue: string, globalValue: boolean): { [key: string]: boolean };
export function getAutoAttack(): number;
export function getAutumnatonLocations(): Location[];
export function getAvatar(): string[];
export function getCampground(): { [item: string]: number };
export function getCcsAction(index: number): string;
export function getChateau(): { [item: string]: number };
export function getClanId(): number;
export function getClanLounge(): { [item: string]: number };
export function getClanName(): string;
export function getClanRumpus(): { [key: string]: number };
export function getCloset(): { [item: string]: number };
export function getCounter(label: string): number;
export function getCounters(label: string, min: number, max: number): string;
export function getCustomOutfits(): string[];
export function getDisplay(): { [item: string]: number };
export function getDwelling(): Item;
export function getFishingLocations(): { [key: string]: Location };
export function getFloristPlants(): { [location: string]: string[] };
export function getFreePulls(): { [item: string]: number };
export function getFuel(): number;
export function getGoals(): string[];
export function getIgnoreZoneWarnings(): boolean;
export function getIngredients(item: Item): { [item: string]: number };
export function getInventory(): { [item: string]: number };
export function getItemsHash(itemsSource: "inventory" | "closet" | "storage" | "display" | "shop"): number;
export function getLocationMonsters(location: Location): { [monster: string]: boolean };
export function getLocketMonsters(): { [monster: string]: boolean };
export function getMonsterMapping(path?: string): { [monster: string]: Monster };
export function getMonsters(location: Location): Monster[];
export function getMoods(): string[];
export function getOutfits(): string[];
export function getPath(): string;
export function getPathFull(): string;
export function getPathVariables(): string;
export function getPermedSkills(): { [skill: string]: boolean };
export function getPlayerId(playerNameValue: string): string;
export function getPlayerName(playerIdValue: number): string;
export function getPower(item: Item): number;
export function getProperty(name: string, globalValue?: boolean): string;
export function getRelated(item: Item, type: string): { [item: string]: number };
export function getRevision(): number;
export function getShop(): { [item: string]: number };
export function getShopLog(): string[];
export function getStackTrace(): { file: string; name: string; line: number; }[];
export function getStash(): { [item: string]: number };
export function getStorage(): { [item: string]: number };
export function getTitle(): string;
export function getVersion(): string;
export function getWorkshed(): Item;
export function getZapWand(): Item;
export function gitAtHead(project: string): boolean;
export function gitExists(project: string): boolean;
export function gitInfo(script: string): { url: string; branch: string; commit: string; last_changed_author: string; last_changed_date: string; };
export function gitList(): string[];
export function gnomadsAvailable(): boolean;
export function goalExists(check: string): boolean;
export function groupString(string: string, regex: string): { [key: number]: { [key: number]: string } };
export function guildAvailable(): boolean;
export function guildStoreAvailable(): boolean;
export function handlingChoice(): boolean;
export function hasQueuedCommands(): boolean;
export function haveBartender(): boolean;
export function haveChef(): boolean;
export function haveDisplay(): boolean;
export function haveEffect(effect: Effect): number;
export function haveEquipped(item: Item): boolean;
export function haveFamiliar(familiar: Familiar): boolean;
export function haveMushroomPlot(): boolean;
export function haveOutfit(outfit: string): boolean;
export function haveServant(servant: Servant): boolean;
export function haveShop(): boolean;
export function haveSkill(skill: Skill): boolean;
export function hedgeMaze(goal: string): boolean;
export function heist(item: Item): boolean;
export function heist(num: number, item: Item): boolean;
export function heistTargets(): { [monster: string]: { [key: number]: Item } };
export function hermit(item: Item, count: number): boolean;
export function hermit(count: number, item: Item): boolean;
export function hiddenTempleUnlocked(): boolean;
export function hippyStoneBroken(): boolean;
export function hippyStoreAvailable(): boolean;
export function historicalAge(item: Item): number;
export function historicalPrice(item: Item): number;
export function holiday(): string;
export function hpCost(skill: Skill): number;
export function imageToMonster(value: string): Monster;
export function inBadMoon(): boolean;
export function inCasual(): boolean;
export function inHardcore(): boolean;
export function inMoxieSign(): boolean;
export function inMultiFight(): boolean;
export function inMuscleSign(): boolean;
export function inMysticalitySign(): boolean;
export function inTerrarium(familiar: Familiar): boolean;
export function inaccessibleReason(master: Coinmaster): string;
export function indexOf(source: string, search: string, start?: number): number;
export function inebrietyLimit(): number;
export function initiativeModifier(): number;
export function insert(buffer: string, index: number, s: string): string;
export function isAccessible(master: Coinmaster): boolean;
export function isAdventuring(): boolean;
export function isBanished(monster: Monster): boolean;
export function isBanished(phylum: Phylum): boolean;
export function isCoinmasterItem(item: Item): boolean;
export function isDarkMode(): boolean;
export function isDiscardable(item: Item): boolean;
export function isDisplayable(item: Item): boolean;
export function isFamiliarEquipmentLocked(): boolean;
export function isGiftable(item: Item): boolean;
export function isGoal(item: Item): boolean;
export function isHeadless(): boolean;
export function isInteger(string: string): boolean;
export function isNpcItem(item: Item): boolean;
export function isOnline(name: string): boolean;
export function isRemovable(effect: Effect): boolean;
export function isShruggable(effect: Effect): boolean;
export function isTradeable(item: Item): boolean;
export function isTrendy(thing: Item): boolean;
export function isTrendy(thing: Skill): boolean;
export function isTrendy(thing: Familiar): boolean;
export function isTrendy(thing: string): boolean;
export function isUnrestricted(thing: Item): boolean;
export function isUnrestricted(thing: Skill): boolean;
export function isUnrestricted(thing: Familiar): boolean;
export function isUnrestricted(thing: string): boolean;
export function isWearingOutfit(outfit: string): boolean;
export function itemAmount(item: Item): number;
export function itemDropModifier(): number;
export function itemDrops(monster?: Monster): { [item: string]: number };
export function itemDropsArray(monster?: Monster): { drop: Item; rate: number; type: string; }[];
export function itemFact(monster: Monster): Item;
export function itemFact(cls: Class, path: Path, monster: Monster): Item;
export function itemPockets(): { [key: number]: boolean };
export function itemType(item: Item): string;
export function joinStrings(strings: string[], joiner?: string): string;
export function jokePockets(): { [key: number]: boolean };
export function jumpChance(monster?: Monster): number;
export function jumpChance(monster: Monster, init?: number): number;
export function jumpChance(location: Location, init?: number): number;
export function jumpChance(monster: Monster, init: number, ml?: number): number;
export function jumpChance(location: Location, init: number, ml?: number): number;
export function knollAvailable(): boolean;
export function lastChoice(): number;
export function lastDecision(): number;
export function lastIndexOf(source: string, search: string, start?: number): number;
export function lastItemMessage(): string;
export function lastMonster(): Monster;
export function lastSkillMessage(): string;
export function leetify(string: string): string;
export function length(string: string): number;
export function lightningCost(skill: Skill): number;
export function limitMode(): string;
export function loadHtml(string: string): string;
export function lockFamiliarEquipment(lock: boolean): void;
export function logN(val: number, base?: number): number;
export function logprint(string: string): void;
export function makeUrl(string: string, usePostMethod: boolean, encoded: boolean): string;
export function mallPrice(item: Item, maxAge?: number): number;
export function mallPrices(items: { [key: number]: boolean }): number;
export function mallPrices(category: string, tiers?: string): number;
export function manaCostModifier(): number;
export function mapToFile(map: any, filename: string, compact?: boolean): boolean;
export function max(val: number, ...otherVal: number[]): number;
export function max(val: number, ...otherVal: number[]): number;
export function maximize(maximizerStringValue: string, isSpeculateOnlyValue: boolean): boolean;
export function maximize(maximizerStringValue: string, maxPriceValue: number, priceLevelValue: number, isSpeculateOnlyValue: boolean): boolean;
export function maximize(maximizerStringValue: string, maxPriceValue: number, priceLevelValue: number, isSpeculateOnlyValue: boolean, showEquipment: boolean): { display: string; command: string; score: number; effect: Effect; item: Item; skill: Skill; }[];
export function meatDrop(monster?: Monster): number;
export function meatDropModifier(): number;
export function meatPockets(): { [key: number]: number };
export function min(val: number, ...otherVal: number[]): number;
export function min(val: number, ...otherVal: number[]): number;
export function minstrelInstrument(): Item;
export function minstrelLevel(): number;
export function minstrelQuest(): boolean;
export function modifierEval(expr: string): number;
export function monkeyPaw(item: Item): boolean;
export function monkeyPaw(effect: Effect): boolean;
export function monkeyPaw(wish: string): boolean;
export function monsterAttack(monster?: Monster): number;
export function monsterDefense(monster?: Monster): number;
export function monsterElement(monster?: Monster): Element;
export function monsterEval(expr: string): number;
export function monsterFactoidsAvailable(monster: Monster, cachedOnly: boolean): number;
export function monsterHp(monster?: Monster): number;
export function monsterInitiative(monster?: Monster): number;
export function monsterLevelAdjustment(): number;
export function monsterManuelText(monster: Monster): string;
export function monsterModifier(effect: Effect, modifier: string): Monster;
export function monsterModifier(effect: Effect, modifier: Modifier): Monster;
export function monsterPhylum(monster?: Monster): Phylum;
export function monsterPockets(): { [key: number]: boolean };
export function moodExecute(multiplicity: number): void;
export function moodList(): string[];
export function moonLight(): number;
export function moonPhase(): number;
export function mpCost(skill: Skill): number;
export function myAbsorbs(): number;
export function myAdventures(): number;
export function myAscensions(): number;
export function myAudience(): number;
export function myBasestat(stat: Stat): number;
export function myBjornedFamiliar(): Familiar;
export function myBuffedstat(stat: Stat): number;
export function myClass(): Class;
export function myClosetMeat(): number;
export function myCompanion(): string;
export function myDaycount(): number;
export function myDiscomomentum(): number;
export function myEffectiveFamiliar(): Familiar;
export function myEffects(): { [effect: string]: number };
export function myEnthronedFamiliar(): Familiar;
export function myFamiliar(): Familiar;
export function myFullness(): number;
export function myFury(): number;
export function myGardenType(): string;
export function myHash(): string;
export function myHp(): number;
export function myId(): string;
export function myInebriety(): number;
export function myLevel(): number;
export function myLightning(): number;
export function myLocation(): Location;
export function myMask(): string;
export function myMaxfury(): number;
export function myMaxhp(): number;
export function myMaxmp(): number;
export function myMaxpp(): number;
export function myMeat(): number;
export function myMp(): number;
export function myName(): string;
export function myPath(): Path;
/** @deprecated Changing 'my_path_id()' to 'my_path().id' will remove this warning */
export function myPathId(): number;
export function myPokeFam(slot: number): Familiar;
export function myPp(): number;
export function myPrimestat(): Stat;
export function myRain(): number;
export function myRam(): number;
export function myRobotEnergy(): number;
export function myRobotScraps(): number;
export function myServant(): Servant;
export function mySessionAdv(): number;
export function mySessionItems(): { [item: string]: number };
export function mySessionItems(item: Item): number;
export function mySessionMeat(): number;
export function mySessionResults(): { [key: string]: number };
export function mySign(): string;
export function mySoulsauce(): number;
export function mySpleenUse(): number;
export function myStorageMeat(): number;
export function myThrall(): Thrall;
export function myThunder(): number;
export function myTotalTurnsSpent(): number;
export function myTurncount(): number;
export function myVykeaCompanion(): Vykea;
export function myWildfireWater(): number;
export function nowToInt(): number;
export function nowToString(dateFormatValue: string): string;
export function npcPrice(item: Item): number;
export function numberologyPrize(num: number): string;
export function numericFact(monster: Monster): number;
export function numericFact(cls: Class, path: Path, monster: Monster): number;
export function numericModifier(modifier: string): number;
export function numericModifier(modifier: Modifier): number;
export function numericModifier(type: string, modifier: string): number;
export function numericModifier(type: string, modifier: Modifier): number;
export function numericModifier(item: Item, modifier: string): number;
export function numericModifier(item: Item, modifier: Modifier): number;
export function numericModifier(effect: Effect, modifier: string): number;
export function numericModifier(effect: Effect, modifier: Modifier): number;
export function numericModifier(skill: Skill, modifier: string): number;
export function numericModifier(skill: Skill, modifier: Modifier): number;
export function numericModifier(thrall: Thrall, modifier: string): number;
export function numericModifier(thrall: Thrall, modifier: Modifier): number;
export function numericModifier(familiar: Familiar, modifier: string, weight: number, item: Item): number;
export function outfit(outfit: string): boolean;
export function outfitPieces(outfit: string): Item[];
export function outfitTattoo(outfit: string): string;
export function outfitTreats(outfit: string): { [item: string]: number };
export function overdrink(item: Item, count?: number): boolean;
export function overdrink(count: number, item: Item): boolean;
/** @deprecated Changing 'path_id_to_name(xxx)' to 'my_path(xxx).name' will remove this warning */
export function pathIdToName(value: number): string;
/** @deprecated Changing 'path_name_to_id(xxx)' to 'to_path(xxx).id' will remove this warning */
export function pathNameToId(value: string): number;
export function phpMtRand(rng: Rng): number;
export function phpRand(rng: Rng): number;
export function phpSeed(seed: number): Rng;
export function pickPocket(monster: Monster): boolean;
export function pickPocket(effect: Effect): { [effect: string]: number };
export function pickPocket(item: Item): { [item: string]: number };
export function pickPocket(stat: Stat): { [stat: string]: number };
export function pickPocket(pocketNumber: number): boolean;
export function pickedPockets(): { [key: number]: boolean };
export function pickedScraps(): { [key: number]: boolean };
export function ping(pingTest?: string): { page: string; count: number; low: number; high: number; total: number; bytes: number; average: number; bps: number; };
export function ping(count: number, page: string): { page: string; count: number; low: number; high: number; total: number; bytes: number; average: number; bps: number; };
export function pocketEffects(pocket: number): { [effect: string]: number };
export function pocketItems(pocket: number): { [item: string]: number };
export function pocketJoke(pocket: number): string;
export function pocketMeat(pocket: number): { [key: number]: string };
export function pocketMonster(pocket: number): Monster;
export function pocketPoem(pocket: number): { [key: number]: string };
export function pocketScrap(pocket: number): { [key: number]: string };
export function pocketStats(pocket: number): { [stat: string]: number };
export function poemPockets(): { [key: number]: number };
export function potentialPockets(monster: Monster): { [key: number]: number };
export function potentialPockets(effect: Effect): { [key: number]: number };
export function potentialPockets(item: Item): { [key: number]: number };
export function potentialPockets(stat: Stat): { [key: number]: number };
export function preValidateAdventure(location: Location): boolean;
export function prepareForAdventure(location: Location): boolean;
export function print(string?: string): void;
export function print(string: string, color?: string): void;
export function printHtml(string: string, logToSession?: boolean): void;
export function propertyDefaultValue(nameValue: string): string;
export function propertyExists(nameValue: string, globalValue?: boolean): boolean;
export function propertyHasDefault(nameValue: string): boolean;
export function pullsRemaining(): number;
export function putCloset(meat: number): boolean;
export function putCloset(item: Item, count?: number): boolean;
export function putCloset(count: number, item: Item): boolean;
export function putDisplay(count: number, item: Item): boolean;
export function putDisplay(item: Item, count: number): boolean;
export function putShop(priceValue: number, limitValue: number, itemValue: Item): boolean;
export function putShop(priceValue: number, limitValue: number, qtyValue: number, itemValue: Item): boolean;
export function putShopUsingStorage(priceValue: number, limitValue: number, itemValue: Item): boolean;
export function putShopUsingStorage(priceValue: number, limitValue: number, qtyValue: number, itemValue: Item): boolean;
export function putStash(item: Item, count: number): boolean;
export function putStash(count: number, item: Item): boolean;
export function pvpAttacksLeft(): number;
export function rainCost(skill: Skill): number;
export function random(range: number): number;
export function rawDamageAbsorption(): number;
export function readCcs(name: string): string;
export function receiveFax(): void;
export function refreshShop(): boolean;
export function refreshStash(): boolean;
export function refreshStatus(): boolean;
export function removeItemCondition(count: number, item: Item): void;
export function removeItemCondition(item: Item, count: number): void;
export function removeProperty(nameValue: string, globalValue?: boolean): string;
export function renameProperty(oldNameValue: string, newNameValue: string): boolean;
export function replace(buffer: string, start: number, finish: number, s: string): string;
export function replaceString(source: string, searchValue: string, replaceValue: string): string;
export function replaceString(source: string, searchValue: string, replaceValue: string): string;
export function repriceShop(priceValue: number, itemValue: Item): boolean;
export function repriceShop(priceValue: number, limitValue: number, itemValue: Item): boolean;
export function restorationPockets(): { [key: number]: boolean };
export function restoreHp(amount: number): boolean;
export function restoreMp(amount: number): boolean;
export function retrieveItem(item: Item, count?: number): boolean;
export function retrieveItem(count: number, item: Item): boolean;
export function retrievePrice(item: Item, count?: number): number;
export function retrievePrice(item: Item, count: number, exact?: boolean): number;
export function retrievePrice(count: number, item: Item, exact?: boolean): number;
export function reverseNumberology(): { [key: number]: number };
export function reverseNumberology(advDelta: number, spleenDelta: number): { [key: number]: number };
export function rollover(): number;
export function round(val: number): number;
export function runChoice(decision: number, extra?: string): string;
export function runChoice(decision: number, extra: boolean): string;
export function runChoice(decision: number, custom: boolean, more: string): string;
export function runCombat(filterFunction?: string | ((round: number, monster: Monster, text: string) => string)): string;
export function runTurn(): string;
export function runaway(): string;
export function sausageGoblinChance(): number;
export function scrapPockets(): { [key: number]: number };
export function sell(master: Coinmaster, countValue: number, itemValue: Item): boolean;
export function sellCost(master: Coinmaster, item: Item): { [item: string]: number };
export function sellCost(master: Coinmaster, skill: Skill): { [item: string]: number };
export function sellPrice(master: Coinmaster, item: Item): number;
export function sellPrice(master: Coinmaster, skill: Skill): number;
export function sellsItem(master: Coinmaster, item: Item): boolean;
export function sellsSkill(master: Coinmaster, skill: Skill): boolean;
export function sendFax(): void;
export function sessionLogs(dayCount: number): string[];
export function sessionLogs(player: string, dayCount: number): string[];
export function sessionLogs(playerName: string, baseDate: string, count: number): string[];
export function setAutoAttack(attackValue: number): void;
export function setAutoAttack(attackValue: string): void;
export function setCcs(name: string): boolean;
export function setLength(buffer: string, i: number): void;
export function setLocation(location: Location): void;
export function setProperty(nameValue: string, value: string): void;
export function shopAmount(item: Item): number;
export function shopLimit(item: Item): number;
export function shopPrice(item: Item): number;
export function skillModifier(type: string, modifier: string): Skill;
export function skillModifier(type: string, modifier: Modifier): Skill;
export function skillModifier(item: Item, modifier: string): Skill;
export function skillModifier(item: Item, modifier: Modifier): Skill;
export function skillsModifier(type: string, modifier: string): Skill[];
export function skillsModifier(type: string, modifier: Modifier): Skill[];
export function skillsModifier(item: Item, modifier: string): Skill[];
export function skillsModifier(item: Item, modifier: Modifier): Skill[];
export function slashCount(item: Item): number;
export function soulsauceCost(skill: Skill): number;
export function spleenLimit(): number;
export function splitModifiers(modifiers: string): { [modifier: string]: string };
export function splitString(string: string, regex?: string): string[];
export function squareRoot(val: number): number;
export function startsWith(source: string, prefix: string): boolean;
export function stashAmount(item: Item): number;
export function statBonusToday(): Stat;
export function statBonusTomorrow(): Stat;
export function statModifier(effect: Effect, modifier: string): Stat;
export function statModifier(effect: Effect, modifier: Modifier): Stat;
export function statsPockets(): { [key: number]: boolean };
export function steal(): string;
export function stillsAvailable(): number;
export function stopCounter(label: string): void;
export function storageAmount(item: Item): number;
export function stringFact(monster: Monster): string;
export function stringFact(cls: Class, path: Path, monster: Monster): string;
export function stringModifier(modifier: string): string;
export function stringModifier(modifier: Modifier): string;
export function stringModifier(type: string, modifier: string): string;
export function stringModifier(type: string, modifier: Modifier): string;
export function stringModifier(item: Item, modifier: string): string;
export function stringModifier(item: Item, modifier: Modifier): string;
export function stringModifier(effect: Effect, modifier: string): string;
export function stringModifier(effect: Effect, modifier: Modifier): string;
export function stringsModifier(modifier: string): string[];
export function stringsModifier(modifier: Modifier): string[];
export function stringsModifier(type: string, modifier: string): string[];
export function stringsModifier(type: string, modifier: Modifier): string[];
export function stringsModifier(item: Item, modifier: string): string[];
export function stringsModifier(item: Item, modifier: Modifier): string[];
export function stringsModifier(effect: Effect, modifier: string): string[];
export function stringsModifier(effect: Effect, modifier: Modifier): string[];
export function stunSkill(): Skill;
export function substring(source: string, start: number, finish?: number): string;
export function svnAtHead(project: string): boolean;
export function svnExists(project: string): boolean;
export function svnInfo(script: string): { url: string; revision: number; last_changed_author: string; last_changed_rev: number; last_changed_date: string; };
export function svnList(): string[];
export function sweetSynthesis(effect: Effect, count?: number): boolean;
export function sweetSynthesis(item1: Item, item2: Item): boolean;
export function sweetSynthesis(count: number, effect: Effect, flags?: number): boolean;
export function sweetSynthesis(count: number, item1: Item, item2: Item): boolean;
export function sweetSynthesisPair(effect: Effect, flags?: number): Item[];
export function sweetSynthesisPairing(effect: Effect, item: Item, flags?: number): Item[];
export function sweetSynthesisResult(item1: Item, item2: Item): Effect;
export function takeCloset(meat: number): boolean;
export function takeCloset(item: Item, count?: number): boolean;
export function takeCloset(count: number, item: Item): boolean;
export function takeDisplay(item: Item, count: number): boolean;
export function takeDisplay(count: number, item: Item): boolean;
export function takeShop(itemValue: Item): boolean;
export function takeShop(count: number, item: Item): boolean;
export function takeStash(item: Item, count: number): boolean;
export function takeStash(count: number, item: Item): boolean;
export function takeStorage(item: Item, count: number): boolean;
export function takeStorage(count: number, item: Item): boolean;
export function tavern(goal?: string): number;
export function throwItem(item: Item): string;
export function throwItems(item1: Item, item2: Item): string;
export function thunderCost(skill: Skill): number;
export function timeToString(): string;
export function timestampToDate(timestamp: number, outFormat: string): string;
export function toBoolean(value: string): boolean;
export function toBoolean(value: boolean): boolean;
export function toBoolean(value: number): boolean;
export function toBounty(value: string): Bounty;
export function toBuffer(value: string): string;
export function toBuffer(value: string): string;
export function toClass(value: string): Class;
export function toClass(value: number): Class;
export function toCoinmaster(value: string): Coinmaster;
export function toEffect(name: string): Effect;
export function toEffect(id: number): Effect;
export function toEffect(skill: Skill): Effect;
export function toElement(value: string): Element;
export function toFamiliar(name: string): Familiar;
export function toFamiliar(id: number): Familiar;
export function toFloat(value: string): number;
export function toFloat(value: boolean): number;
export function toFloat(value: number): number;
export function toFloat(value: number): number;
export function toInt(value: string): number;
export function toInt(value: boolean): number;
export function toInt(value: number): number;
export function toInt(value: number): number;
export function toInt(value: Item): number;
export function toInt(value: Familiar): number;
export function toInt(value: Location): number;
export function toInt(value: Skill): number;
export function toInt(value: Effect): number;
export function toInt(value: Class): number;
export function toInt(value: Monster): number;
export function toInt(value: Thrall): number;
export function toInt(value: Servant): number;
export function toInt(value: Vykea): number;
export function toInt(value: Path): number;
export function toItem(value: string): Item;
export function toItem(value: number): Item;
export function toItem(name: string, count: number): Item;
export function toJson(val: any): string;
export function toLocation(value: string): Location;
export function toLocation(value: number): Location;
export function toLowerCase(string: string): string;
export function toModifier(name: string): Modifier;
export function toMonster(name: string): Monster;
export function toMonster(id: number): Monster;
export function toPath(value: string): Path;
export function toPath(value: number): Path;
export function toPhylum(value: string): Phylum;
export function toPlural(item: Item): string;
export function toServant(value: string): Servant;
export function toServant(value: number): Servant;
export function toSkill(id: number): Skill;
export function toSkill(effect: Effect): Skill;
export function toSkill(name: string, type?: string): Skill;
export function toSlot(item: string): Slot;
export function toSlot(item: Item): Slot;
export function toStat(value: string): Stat;
export function toString(val: string): string;
export function toString(val: number, fmt: string): string;
export function toString(val: number, fmt: string): string;
export function toThrall(value: string): Thrall;
export function toThrall(value: number): Thrall;
export function toUpperCase(string: string): string;
export function toUrl(value: Location): string;
export function toVykea(value: string): Vykea;
export function toWikiUrl(value: string): string;
export function toWikiUrl(value: Item): string;
export function toWikiUrl(value: Effect): string;
export function toWikiUrl(value: Skill): string;
export function toWikiUrl(value: Monster): string;
export function todayToString(): string;
export function totalFreeRests(): number;
export function totalTurnsPlayed(): number;
export function towerDoor(): boolean;
export function traceprint(string: string): void;
export function trackCopyCount(monster: Monster): number;
export function trackIgnoreQueue(monster: Monster): boolean;
export function trackedBy(monster: Monster): string[];
export function truncate(val: number): number;
export function turnsPerCast(skill: Skill): number;
export function turnsPlayed(): number;
export function turnsUntilForcedNoncombat(location: Location): number;
export function twiddle(): string;
export function unusualConstructDisc(): Item;
export function updateCandyPrices(): void;
export function urlDecode(string: string): string;
export function urlEncode(string: string): string;
export function use(item: Item, count?: number): boolean;
export function use(count: number, item: Item): boolean;
export function useFamiliar(familiar: Familiar): boolean;
export function useServant(servant: Servant): boolean;
export function useSkill(skill: Skill): string;
export function useSkill(skill: Skill, count: number, target?: string): boolean;
export function useSkill(count: number, skill: Skill, target?: string): boolean;
export function userConfirm(message: string): boolean;
export function userConfirm(message: string, timeOut: number, defaultBoolean: boolean): boolean;
export function userNotify(message: string, onlyShowWhenHidden?: boolean): void;
export function userPrompt(message: string, options?: any): string;
export function userPrompt(message: string, timeOut: number, defaultString: string): string;
export function visit(master: Coinmaster): boolean;
export function visitUrl(string?: string): string;
export function visitUrl(string: string, usePostMethod?: boolean): string;
export function visitUrl(string: string, usePostMethod: boolean, encoded?: boolean): string;
export function votingBoothInitiatives(clss: Class, path: Path, daycount: number): { [key: string]: boolean };
export function votingBoothInitiatives(clss: number, path: number, daycount: number): { [key: string]: boolean };
export function wait(delay: number): void;
export function waitq(delay: number): void;
export function weaponHands(item: Item): number;
export function weaponType(item: Item): Stat;
export function weightAdjustment(): number;
export function wellStocked(itemName: string, quantity: number, price: number): boolean;
export function whiteCitadelAvailable(): boolean;
export function whoClan(): { [key: string]: boolean };
export function willUsuallyDodge(): boolean;
export function willUsuallyMiss(): boolean;
export function write(string: string): void;
export function writeCcs(data: string, name: string): boolean;
export function writeln(string: string): void;
export function xpath(html: string, xpath: string): string[];
export function zap(item: Item): Item;
declare abstract class MafiaClass {
    static get<T extends MafiaClass>(this: { new (): T; }, name: (string | number)): T;
    static get<T extends MafiaClass>(this: { new (): T; }, names: readonly (string | number)[]): T[];
    static all<T extends MafiaClass>(this: { new (): T; }): T[];
    static none: MafiaClass;
}
export class Bounty extends MafiaClass {
    static none: Bounty;
    /**
     * Plural */
    readonly plural: string;
    /**
     * Type */
    readonly type: string;
    /**
     * Kol internal type */
    readonly kolInternalType: string;
    /**
     * Number */
    readonly number: number;
    /**
     * Image */
    readonly image: string;
    /**
     * Monster */
    readonly monster: Monster;
    /**
     * Location */
    readonly location: Location;
}
export type ClassType = "Accordion Thief" | "Avatar of Boris" | "Avatar of Jarlsberg" | "Avatar of Sneaky Pete" | "Beanslinger" | "Cheese Wizard" | "Cow Puncher" | "Disco Bandit" | "Ed the Undying" | "Gelatinous Noob" | "Grey Goo" | "Jazz Agent" | "Kindly Professor" | "Pastamancer" | "Pig Skinner" | "Plumber" | "Sauceror" | "Seal Clubber" | "Snake Oiler" | "Turtle Tamer" | "Vampyre" | "Zombie Master" | "Zootomist";
export class Class extends MafiaClass {
    static none: Class;
    toString(): ClassType;
    /**
     * Id */
    readonly id: number;
    /**
     * Primestat */
    readonly primestat: Stat;
    /**
     * Path */
    readonly path: Path;
}
export class Coinmaster extends MafiaClass {
    static none: Coinmaster;
    /**
     * Token */
    readonly token: string;
    /**
     * Item */
    readonly item: Item;
    /**
     * Property */
    readonly property: string;
    /**
     * Available tokens */
    readonly availableTokens: number;
    /**
     * Buys */
    readonly buys: boolean;
    /**
     * Sells */
    readonly sells: boolean;
    /**
     * Nickname */
    readonly nickname: string;
    /**
     * Shopid */
    readonly shopid: string;
}
export class Effect extends MafiaClass {
    static none: Effect;
    /**
     * Id */
    readonly id: number;
    /**
     * Name */
    readonly name: string;
    /**
     * Default */
    readonly default: string;
    /**
     * Note */
    readonly note: string;
    /**
     * All */
    readonly all: readonly string[];
    /**
     * Image */
    readonly image: string;
    /**
     * Descid */
    readonly descid: string;
    /**
     * Candy tier */
    readonly candyTier: number;
    /**
     * Quality */
    readonly quality: string;
    /**
     * Attributes */
    readonly attributes: string;
    /**
     * Song */
    readonly song: boolean;
}
export type ElementType = "bad spelling" | "cold" | "hot" | "shadow" | "sleaze" | "slime" | "spooky" | "stench" | "supercold";
export class Element extends MafiaClass {
    static none: Element;
    toString(): ElementType;
    /**
     * Image */
    readonly image: string;
}
export class Familiar extends MafiaClass {
    static none: Familiar;
    /**
     * Id */
    readonly id: number;
    /**
     * Hatchling */
    readonly hatchling: Item;
    /**
     * Image */
    readonly image: string;
    /**
     * Name */
    readonly name: string;
    /**
     * Owner */
    readonly owner: string;
    /**
     * Owner id */
    readonly ownerId: number;
    /**
     * Experience */
    readonly experience: number;
    /**
     * Charges */
    readonly charges: number;
    /**
     * Drop name */
    readonly dropName: string;
    /**
     * Drop item */
    readonly dropItem: Item;
    /**
     * Drops today */
    readonly dropsToday: number;
    /**
     * Drops limit */
    readonly dropsLimit: number;
    /**
     * Fights today */
    readonly fightsToday: number;
    /**
     * Fights limit */
    readonly fightsLimit: number;
    /**
     * Combat */
    readonly combat: boolean;
    /**
     * Physical damage */
    readonly physicalDamage: boolean;
    /**
     * Elemental damage */
    readonly elementalDamage: boolean;
    /**
     * Block */
    readonly block: boolean;
    /**
     * Delevel */
    readonly delevel: boolean;
    /**
     * Hp during combat */
    readonly hpDuringCombat: boolean;
    /**
     * Mp during combat */
    readonly mpDuringCombat: boolean;
    /**
     * Other action during combat */
    readonly otherActionDuringCombat: boolean;
    /**
     * Hp after combat */
    readonly hpAfterCombat: boolean;
    /**
     * Mp after combat */
    readonly mpAfterCombat: boolean;
    /**
     * Other action after combat */
    readonly otherActionAfterCombat: boolean;
    /**
     * Passive */
    readonly passive: boolean;
    /**
     * Underwater */
    readonly underwater: boolean;
    /**
     * Variable */
    readonly variable: boolean;
    /**
     * Feasted */
    readonly feasted: boolean;
    /**
     * Attributes */
    readonly attributes: string;
    /**
     * Poke level */
    readonly pokeLevel: number;
    /**
     * Poke level 2 power */
    readonly pokeLevel2Power: number;
    /**
     * Poke level 2 hp */
    readonly pokeLevel2Hp: number;
    /**
     * Poke level 3 power */
    readonly pokeLevel3Power: number;
    /**
     * Poke level 3 hp */
    readonly pokeLevel3Hp: number;
    /**
     * Poke level 4 power */
    readonly pokeLevel4Power: number;
    /**
     * Poke level 4 hp */
    readonly pokeLevel4Hp: number;
    /**
     * Poke move 1 */
    readonly pokeMove1: string;
    /**
     * Poke move 2 */
    readonly pokeMove2: string;
    /**
     * Poke move 3 */
    readonly pokeMove3: string;
    /**
     * Poke attribute */
    readonly pokeAttribute: string;
    /**
     * Soup weight */
    readonly soupWeight: number;
    /**
     * Soup attributes */
    readonly soupAttributes: readonly string[];
}
export class Item extends MafiaClass {
    static none: Item;
    /**
     * Id */
    readonly id: number;
    /**
     * Name */
    readonly name: string;
    /**
     * Plural */
    readonly plural: string;
    /**
     * Descid */
    readonly descid: string;
    /**
     * Image */
    readonly image: string;
    /**
     * Smallimage */
    readonly smallimage: string;
    /**
     * Levelreq */
    readonly levelreq: number;
    /**
     * Quality */
    readonly quality: string;
    /**
     * Adventures */
    readonly adventures: string;
    /**
     * Muscle */
    readonly muscle: string;
    /**
     * Mysticality */
    readonly mysticality: string;
    /**
     * Moxie */
    readonly moxie: string;
    /**
     * Fullness */
    readonly fullness: number;
    /**
     * Inebriety */
    readonly inebriety: number;
    /**
     * Spleen */
    readonly spleen: number;
    /**
     * Minhp */
    readonly minhp: number;
    /**
     * Maxhp */
    readonly maxhp: number;
    /**
     * Minmp */
    readonly minmp: number;
    /**
     * Maxmp */
    readonly maxmp: number;
    /**
     * Dailyusesleft */
    readonly dailyusesleft: number;
    /**
     * Notes */
    readonly notes: string;
    /**
     * Quest */
    readonly quest: boolean;
    /**
     * Gift */
    readonly gift: boolean;
    /**
     * Tradeable */
    readonly tradeable: boolean;
    /**
     * Discardable */
    readonly discardable: boolean;
    /**
     * Combat */
    readonly combat: boolean;
    /**
     * Combat reusable */
    readonly combatReusable: boolean;
    /**
     * Usable */
    readonly usable: boolean;
    /**
     * Reusable */
    readonly reusable: boolean;
    /**
     * Multi */
    readonly multi: boolean;
    /**
     * Fancy */
    readonly fancy: boolean;
    /**
     * Pasteable */
    readonly pasteable: boolean;
    /**
     * Smithable */
    readonly smithable: boolean;
    /**
     * Cookable */
    readonly cookable: boolean;
    /**
     * Mixable */
    readonly mixable: boolean;
    /**
     * Candy */
    readonly candy: boolean;
    /**
     * Candy type */
    readonly candyType: string;
    /**
     * Chocolate */
    readonly chocolate: boolean;
    /**
     * Potion */
    readonly potion: boolean;
    /**
     * Seller */
    readonly seller: Coinmaster;
    /**
     * Buyer */
    readonly buyer: Coinmaster;
    /**
     * Name length */
    readonly nameLength: number;
    /**
     * Noob skill */
    readonly noobSkill: Skill;
    /**
     * Tcrs name */
    readonly tcrsName: string;
    /**
     * Skill */
    readonly skill: Skill;
    /**
     * Recipe */
    readonly recipe: Item;
}
export class Location extends MafiaClass {
    static none: Location;
    /**
     * Id */
    readonly id: number;
    /**
     * Nocombats */
    readonly nocombats: boolean;
    /**
     * Combat percent */
    readonly combatPercent: number;
    /**
     * Zone */
    readonly zone: string;
    /**
     * Parent */
    readonly parent: string;
    /**
     * Parentdesc */
    readonly parentdesc: string;
    /**
     * Root */
    readonly root: string;
    /**
     * Difficulty level */
    readonly difficultyLevel: string;
    /**
     * Environment */
    readonly environment: Environment;
    /**
     * Fire level */
    readonly fireLevel: number;
    /**
     * Bounty */
    readonly bounty: Bounty;
    /**
     * Combat queue */
    readonly combatQueue: string;
    /**
     * Noncombat queue */
    readonly noncombatQueue: string;
    /**
     * Turns spent */
    readonly turnsSpent: number;
    /**
     * Last noncombat turns spent */
    readonly lastNoncombatTurnsSpent: number;
    /**
     * Force noncombat */
    readonly forceNoncombat: number;
    /**
     * Kisses */
    readonly kisses: number;
    /**
     * Recommended stat */
    readonly recommendedStat: number;
    /**
     * Poison */
    readonly poison: number;
    /**
     * Water level */
    readonly waterLevel: number;
    /**
     * Wanderers */
    readonly wanderers: boolean;
    /**
     * Pledge allegiance */
    readonly pledgeAllegiance: string;
}
export class Modifier extends MafiaClass {
    static none: Modifier;
    /**
     * Name */
    readonly name: string;
    /**
     * Type */
    readonly type: ModifierValueType;
}
export class Monster extends MafiaClass {
    static none: Monster;
    /**
     * Name */
    readonly name: string;
    /**
     * Article */
    readonly article: string;
    /**
     * Id */
    readonly id: number;
    /**
     * Base hp */
    readonly baseHp: number;
    /**
     * Base attack */
    readonly baseAttack: number;
    /**
     * Base defense */
    readonly baseDefense: number;
    /**
     * Raw hp */
    readonly rawHp: number;
    /**
     * Raw attack */
    readonly rawAttack: number;
    /**
     * Raw defense */
    readonly rawDefense: number;
    /**
     * Base initiative */
    readonly baseInitiative: number;
    /**
     * Raw initiative */
    readonly rawInitiative: number;
    /**
     * Attack element */
    readonly attackElement: Element;
    /**
     * Attack elements */
    readonly attackElements: readonly Element[];
    /**
     * Defense element */
    readonly defenseElement: Element;
    /**
     * Physical resistance */
    readonly physicalResistance: number;
    /**
     * Elemental resistance */
    readonly elementalResistance: number;
    /**
     * Hot resistance */
    readonly hotResistance: number;
    /**
     * Cold resistance */
    readonly coldResistance: number;
    /**
     * Stench resistance */
    readonly stenchResistance: number;
    /**
     * Spooky resistance */
    readonly spookyResistance: number;
    /**
     * Sleaze resistance */
    readonly sleazeResistance: number;
    /**
     * Min meat */
    readonly minMeat: number;
    /**
     * Max meat */
    readonly maxMeat: number;
    /**
     * Min sprinkles */
    readonly minSprinkles: number;
    /**
     * Max sprinkles */
    readonly maxSprinkles: number;
    /**
     * Base mainstat exp */
    readonly baseMainstatExp: number;
    /**
     * Group */
    readonly group: number;
    /**
     * Phylum */
    readonly phylum: Phylum;
    /**
     * Poison */
    readonly poison: Effect;
    /**
     * Boss */
    readonly boss: boolean;
    /**
     * Copyable */
    readonly copyable: boolean;
    /**
     * Wishable */
    readonly wishable: boolean;
    /**
     * Image */
    readonly image: string;
    /**
     * Images */
    readonly images: readonly string[];
    /**
     * Sub types */
    readonly subTypes: readonly string[];
    /**
     * Random modifiers */
    readonly randomModifiers: readonly string[];
    /**
     * Manuel name */
    readonly manuelName: string;
    /**
     * Wiki name */
    readonly wikiName: string;
    /**
     * Attributes */
    readonly attributes: string;
    /**
     * Fact type */
    readonly factType: string;
    /**
     * Fact */
    readonly fact: string;
    /**
     * Parts */
    readonly parts: readonly string[];
}
export class Path extends MafiaClass {
    static none: Path;
    /**
     * Id */
    readonly id: number;
    /**
     * Name */
    readonly name: string;
    /**
     * Avatar */
    readonly avatar: boolean;
    /**
     * Image */
    readonly image: string;
    /**
     * Points */
    readonly points: number;
    /**
     * Familiars */
    readonly familiars: boolean;
}
export type PhylumType = "beast" | "bug" | "constellation" | "construct" | "demon" | "dude" | "elemental" | "elf" | "fish" | "goblin" | "hippy" | "hobo" | "horror" | "humanoid" | "mer-kin" | "orc" | "penguin" | "pirate" | "plant" | "slime" | "undead" | "weird";
export class Phylum extends MafiaClass {
    static none: Phylum;
    toString(): PhylumType;
    /**
     * Image */
    readonly image: string;
}
export type ServantType = "Assassin" | "Belly-Dancer" | "Bodyguard" | "Cat" | "Maid" | "Priest" | "Scribe";
export class Servant extends MafiaClass {
    static none: Servant;
    toString(): ServantType;
    /**
     * Id */
    readonly id: number;
    /**
     * Name */
    readonly name: ServantType;
    /**
     * Level */
    readonly level: number;
    /**
     * Experience */
    readonly experience: number;
    /**
     * Image */
    readonly image: string;
    /**
     * Level1 ability */
    readonly level1Ability: string;
    /**
     * Level7 ability */
    readonly level7Ability: string;
    /**
     * Level14 ability */
    readonly level14Ability: string;
    /**
     * Level21 ability */
    readonly level21Ability: string;
}
export class Skill extends MafiaClass {
    static none: Skill;
    /**
     * Id */
    readonly id: number;
    /**
     * Name */
    readonly name: string;
    /**
     * Type */
    readonly type: string;
    /**
     * Level */
    readonly level: number;
    /**
     * Image */
    readonly image: string;
    /**
     * Traincost */
    readonly traincost: number;
    /**
     * Class */
    readonly class: Class;
    /**
     * Libram */
    readonly libram: boolean;
    /**
     * Passive */
    readonly passive: boolean;
    /**
     * Buff */
    readonly buff: boolean;
    /**
     * Combat */
    readonly combat: boolean;
    /**
     * Spell */
    readonly spell: boolean;
    /**
     * Song */
    readonly song: boolean;
    /**
     * Expression */
    readonly expression: boolean;
    /**
     * Walk */
    readonly walk: boolean;
    /**
     * Summon */
    readonly summon: boolean;
    /**
     * Permable */
    readonly permable: boolean;
    /**
     * Dailylimit */
    readonly dailylimit: number;
    /**
     * Dailylimitpref */
    readonly dailylimitpref: string;
    /**
     * Timescast */
    readonly timescast: number;
}
export type SlotType = "acc1" | "acc2" | "acc3" | "back" | "bootskin" | "bootspur" | "buddy-bjorn" | "card-sleeve" | "crown-of-thrones" | "fakehand" | "familiar" | "folder1" | "folder2" | "folder3" | "folder4" | "folder5" | "hat" | "hats" | "holster" | "off-hand" | "pants" | "shirt" | "sticker1" | "sticker2" | "sticker3" | "weapon";
export class Slot extends MafiaClass {
    static none: Slot;
    toString(): SlotType;
}
export type StatType = "Moxie" | "Muscle" | "Mysticality";
export class Stat extends MafiaClass {
    static none: Stat;
    toString(): StatType;
}
export type ThrallType = "Angel Hair Wisp" | "Elbow Macaroni" | "Lasagmbie" | "Penne Dreadful" | "Spaghetti Elemental" | "Spice Ghost" | "Vampieroghi" | "Vermincelli";
export class Thrall extends MafiaClass {
    static none: Thrall;
    toString(): ThrallType;
    /**
     * Id */
    readonly id: number;
    /**
     * Name */
    readonly name: ThrallType;
    /**
     * Level */
    readonly level: number;
    /**
     * Image */
    readonly image: string;
    /**
     * Tinyimage */
    readonly tinyimage: string;
    /**
     * Skill */
    readonly skill: Skill;
    /**
     * Current modifiers */
    readonly currentModifiers: string;
}
export class Vykea extends MafiaClass {
    static none: Vykea;
    /**
     * Id */
    readonly id: number;
    /**
     * Name */
    readonly name: string;
    /**
     * Type */
    readonly type: number;
    /**
     * Rune */
    readonly rune: Item;
    /**
     * Level */
    readonly level: number;
    /**
     * Image */
    readonly image: string;
    /**
     * Modifiers */
    readonly modifiers: string;
    /**
     * Attack element */
    readonly attackElement: Element;
}
export const MafiaClasses: Readonly<[typeof Bounty, typeof Class, typeof Coinmaster, typeof Effect, typeof Element, typeof Familiar, typeof Item, typeof Location, typeof Modifier, typeof Monster, typeof Path, typeof Phylum, typeof Servant, typeof Skill, typeof Slot, typeof Stat, typeof Thrall, typeof Vykea]>;
export type AfterAdventureScript = () => void;
export type BeforePVPScript = () => void;
export type BetweenBattleScript = () => void;
export type BuyScript = (item: string, quantity: string, ingredientLevel: string, defaultBuy: string) => boolean;
export type ChatPlayerScript = (playerName: string, playerId: string, channel: string) => void;
export type ChatbotScript = (sender: string, content: string, channel?: string) => void;
export type ChoiceAdventureScript = (choiceNumber: number, responseText: string) => void;
export type ConsultScript = (round: number, monster: Monster, responseText: string) => void;
export type CounterScript = (label: string, turnsRemaining: string) => boolean;
export type FamiliarScript = () => boolean;
export type KingLiberatedScript = () => void;
export type PostAscensionScript = () => void;
export type PreAscensionScript = () => void;
export type RecoveryScript = (type: "HP" | "MP", needed: number) => boolean;
export type SpadingScript = (event: string, meta: string, responseText: string) => void;
declare class Storage {
    /**
     * Returns the number of key/value pairs.
     */
    readonly length: number;

    /**
     * Removes all key/value pairs, if there are any.
     */
    clear(): void;

    /**
     * Returns the current value associated with the given key, or null if the given key does not exist.
     */
    getItem(key: string): string | null;

    /**
     * Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.
     */
    key(index: number): string | null;

    /**
     * Removes the key/value pair with the given key, if a key/value pair with the given key exists.
     */
    removeItem(key: string): void;

    /**
     * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.
     */
    setItem(key: string, value: string): void;
}
export const sessionStorage: Storage;

declare class Rng {}
