import { Bounty, Class, Coinmaster, Effect, Element, Familiar, Item, Location, MafiaClass, Modifier, Monster, Path, Phylum, Servant, Skill, Slot, Stat, Thrall } from "kolmafia";
/**
 * A Bounty specified by name.
 *
 * @category In-game constant
 */
export declare const $bounty: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Bounty;
    cls: typeof MafiaClass & (new () => Bounty);
    none: Bounty;
    get(name: string): Bounty | null;
};
/**
 * A list of Bounties specified by a comma-separated list of names.
 * For a list of all possible Bounties, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $bounties: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Bounty[];
    all(): Bounty[];
};
/**
 * A Class specified by name.
 *
 * @category In-game constant
 */
export declare const $class: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Class;
    cls: typeof MafiaClass & (new () => Class);
    none: Class;
    get(name: string): Class | null;
};
/**
 * A list of Classes specified by a comma-separated list of names.
 * For a list of all possible Classes, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $classes: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Class[];
    all(): Class[];
};
/**
 * A Coinmaster specified by name.
 *
 * @category In-game constant
 */
export declare const $coinmaster: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Coinmaster;
    cls: typeof MafiaClass & (new () => Coinmaster);
    none: Coinmaster;
    get(name: string): Coinmaster | null;
};
/**
 * A list of Coinmasters specified by a comma-separated list of names.
 * For a list of all possible Coinmasters, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $coinmasters: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Coinmaster[];
    all(): Coinmaster[];
};
/**
 * An Effect specified by name.
 *
 * @category In-game constant
 */
export declare const $effect: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Effect;
    cls: typeof MafiaClass & (new () => Effect);
    none: Effect;
    get(name: string): Effect | null;
};
/**
 * A list of Effects specified by a comma-separated list of names.
 * For a list of all possible Effects, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $effects: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Effect[];
    all(): Effect[];
};
/**
 * An Element specified by name.
 *
 * @category In-game constant
 */
export declare const $element: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Element;
    cls: typeof MafiaClass & (new () => Element);
    none: Element;
    get(name: string): Element | null;
};
/**
 * A list of Elements specified by a comma-separated list of names.
 * For a list of all possible Elements, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $elements: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Element[];
    all(): Element[];
};
/**
 * A Familiar specified by name.
 *
 * @category In-game constant
 */
export declare const $familiar: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Familiar;
    cls: typeof MafiaClass & (new () => Familiar);
    none: Familiar;
    get(name: string): Familiar | null;
};
/**
 * A list of Familiars specified by a comma-separated list of names.
 * For a list of all possible Familiars, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $familiars: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Familiar[];
    all(): Familiar[];
};
/**
 * An Item specified by name.
 *
 * @category In-game constant
 */
export declare const $item: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Item;
    cls: typeof MafiaClass & (new () => Item);
    none: Item;
    get(name: string): Item | null;
};
/**
 * A list of Items specified by a comma-separated list of names.
 * For a list of all possible Items, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $items: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Item[];
    all(): Item[];
};
/**
 * A Location specified by name.
 *
 * @category In-game constant
 */
export declare const $location: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Location;
    cls: typeof MafiaClass & (new () => Location);
    none: Location;
    get(name: string): Location | null;
};
/**
 * A list of Locations specified by a comma-separated list of names.
 * For a list of all possible Locations, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $locations: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Location[];
    all(): Location[];
};
/**
 * A Modifier specified by name.
 *
 * @category In-game constant
 */
export declare const $modifier: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Modifier;
    cls: typeof MafiaClass & (new () => Modifier);
    none: Modifier;
    get(name: string): Modifier | null;
};
/**
 * A list of Modifiers specified by a comma-separated list of names.
 * For a list of all possible Modifiers, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $modifiers: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Modifier[];
    all(): Modifier[];
};
/**
 * A Monster specified by name.
 *
 * @category In-game constant
 */
export declare const $monster: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Monster;
    cls: typeof MafiaClass & (new () => Monster);
    none: Monster;
    get(name: string): Monster | null;
};
/**
 * A list of Monsters specified by a comma-separated list of names.
 * For a list of all possible Monsters, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $monsters: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Monster[];
    all(): Monster[];
};
/**
 * A Path specified by name.
 *
 * @category In-game constant
 */
export declare const $path: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Path;
    cls: typeof MafiaClass & (new () => Path);
    none: Path;
    get(name: string): Path | null;
};
/**
 * A list of Paths specified by a comma-separated list of names.
 * For a list of all possible Paths, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $paths: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Path[];
    all(): Path[];
};
/**
 * A Phylum specified by name.
 *
 * @category In-game constant
 */
export declare const $phylum: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Phylum;
    cls: typeof MafiaClass & (new () => Phylum);
    none: Phylum;
    get(name: string): Phylum | null;
};
/**
 * A list of Phyla specified by a comma-separated list of names.
 * For a list of all possible Phyla, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $phyla: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Phylum[];
    all(): Phylum[];
};
/**
 * A Servant specified by name.
 *
 * @category In-game constant
 */
export declare const $servant: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Servant;
    cls: typeof MafiaClass & (new () => Servant);
    none: Servant;
    get(name: string): Servant | null;
};
/**
 * A list of Servants specified by a comma-separated list of names.
 * For a list of all possible Servants, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $servants: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Servant[];
    all(): Servant[];
};
/**
 * A Skill specified by name.
 *
 * @category In-game constant
 */
export declare const $skill: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Skill;
    cls: typeof MafiaClass & (new () => Skill);
    none: Skill;
    get(name: string): Skill | null;
};
/**
 * A list of Skills specified by a comma-separated list of names.
 * For a list of all possible Skills, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $skills: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Skill[];
    all(): Skill[];
};
/**
 * A Slot specified by name.
 *
 * @category In-game constant
 */
export declare const $slot: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Slot;
    cls: typeof MafiaClass & (new () => Slot);
    none: Slot;
    get(name: string): Slot | null;
};
/**
 * A list of Slots specified by a comma-separated list of names.
 * For a list of all possible Slots, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $slots: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Slot[];
    all(): Slot[];
};
/**
 * A Stat specified by name.
 *
 * @category In-game constant
 */
export declare const $stat: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Stat;
    cls: typeof MafiaClass & (new () => Stat);
    none: Stat;
    get(name: string): Stat | null;
};
/**
 * A list of Stats specified by a comma-separated list of names.
 * For a list of all possible Stats, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $stats: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Stat[];
    all(): Stat[];
};
/**
 * A Thrall specified by name.
 *
 * @category In-game constant
 */
export declare const $thrall: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Thrall;
    cls: typeof MafiaClass & (new () => Thrall);
    none: Thrall;
    get(name: string): Thrall | null;
};
/**
 * A list of Thralls specified by a comma-separated list of names.
 * For a list of all possible Thralls, leave the template string blank.
 *
 * @category In-game constant
 */
export declare const $thralls: {
    (literals: TemplateStringsArray, ...placeholders: string[]): Thrall[];
    all(): Thrall[];
};
