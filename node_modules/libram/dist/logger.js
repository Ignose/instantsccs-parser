import { logprint, printHtml } from "kolmafia";
export var LogLevels;
(function (LogLevels) {
    LogLevels[LogLevels["NONE"] = 0] = "NONE";
    LogLevels[LogLevels["ERROR"] = 1] = "ERROR";
    LogLevels[LogLevels["WARNING"] = 2] = "WARNING";
    LogLevels[LogLevels["INFO"] = 3] = "INFO";
    LogLevels[LogLevels["DEBUG"] = 4] = "DEBUG";
})(LogLevels || (LogLevels = {}));
const defaultHandlers = {
    [LogLevels.INFO]: (message) => {
        printHtml(`<b>[Libram Info]</b> ${message}`);
        logprint(`[Libram] ${message}`);
        return;
    },
    [LogLevels.WARNING]: (message) => {
        printHtml(`<span style="background: orange; color: white;"><b>[Libram Warning]</b> ${message}</span>`);
        logprint(`[Libram] ${message}`);
        return;
    },
    [LogLevels.ERROR]: (error) => {
        printHtml(`<span style="background: red; color: white;"><b>[Libram Error]</b> ${error.toString()}</span>`);
        logprint(`[Libram] ${error}`);
        return;
    },
    [LogLevels.DEBUG]: (message) => {
        printHtml(`<span style="background: red; color: white;"><b>[Libram Debug]</b> ${message}</span>`);
        logprint(`[Libram] ${message}`);
        return;
    },
};
class Logger {
    handlers = defaultHandlers;
    static currentLevel = LogLevels.ERROR;
    get level() {
        return Logger.currentLevel;
    }
    setLevel(level) {
        Logger.currentLevel = level;
    }
    setHandler(level, callback) {
        this.handlers[level] = callback;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    log(level, message) {
        if (this.level >= level)
            this.handlers[level](message);
    }
    info(message) {
        this.log(LogLevels.INFO, message);
    }
    warning(message) {
        this.log(LogLevels.WARNING, message);
    }
    error(message) {
        this.log(LogLevels.ERROR, message);
    }
    debug(message) {
        this.log(LogLevels.DEBUG, message);
    }
}
export default new Logger();
