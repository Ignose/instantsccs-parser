export declare enum LogLevels {
    NONE = 0,
    ERROR = 1,
    WARNING = 2,
    INFO = 3,
    DEBUG = 4
}
declare const defaultHandlers: {
    3: (message: string) => unknown;
    2: (message: string) => unknown;
    1: (error: string | Error) => unknown;
    4: (message: string) => unknown;
};
type LogLevel = keyof typeof defaultHandlers;
type LogFunction<T extends LogLevel> = (typeof defaultHandlers)[T];
declare class Logger {
    handlers: {
        3: (message: string) => unknown;
        2: (message: string) => unknown;
        1: (error: string | Error) => unknown;
        4: (message: string) => unknown;
    };
    private static currentLevel;
    get level(): LogLevels;
    setLevel(level: LogLevels): void;
    setHandler<T extends LogLevel>(level: T, callback: LogFunction<T>): void;
    log(level: LogLevels.ERROR, message: string | Error): void;
    log(level: LogLevel, message: string): void;
    info(message: string): void;
    warning(message: string): void;
    error(message: string | Error): void;
    debug(message: string): void;
}
declare const _default: Logger;
export default _default;
