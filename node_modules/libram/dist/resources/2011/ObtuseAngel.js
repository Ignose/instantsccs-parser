import { useFamiliar } from "kolmafia";
import { Copier } from "../../Copier.js";
import { have as _have, isCurrentFamiliar } from "../../lib.js";
import { get } from "../../property.js";
import { $familiar } from "../../template-string.js";
const familiar = $familiar `Obtuse Angel`;
/**
 * @returns whether the player has an Obtuse Angel
 */
export function have() {
    return _have(familiar);
}
/**
 * @returns number of badly romantic arrows used today
 */
export function getBadlyRomanticArrowUses() {
    return Math.max(0, get("_badlyRomanticArrows"));
}
/**
 * @returns whether badly romantic arrow can still be used
 */
export function haveBadlyRomanticArrowUsesRemaining() {
    return getBadlyRomanticArrowUses() === 0;
}
/**
 * @returns whether the player could use badly romantic arrow in theory
 */
export function couldUseBadlyRomanticArrow() {
    return have() && haveBadlyRomanticArrowUsesRemaining();
}
/**
 * Prepares badly romantic arrow for use
 *
 * @returns success
 */
export function prepareBadlyRomanticArrow() {
    return useFamiliar(familiar);
}
/**
 * @returns whether the player can use badly romantic arrow right now
 */
export function canUseBadlyRomanticArrow() {
    return isCurrentFamiliar(familiar) && haveBadlyRomanticArrowUsesRemaining();
}
/**
 * @returns current badly romantic arrow monster target
 */
export function getBadlyRomanticArrowMonster() {
    return get("romanticTarget");
}
export const BadlyRomanticArrow = new Copier(() => couldUseBadlyRomanticArrow(), () => prepareBadlyRomanticArrow(), () => canUseBadlyRomanticArrow(), () => getBadlyRomanticArrowMonster());
