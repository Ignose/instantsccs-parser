import { Item } from "kolmafia";
import { Tuple } from "../../utils.js";
/**
 * Determines whether the TakerSpace letter of Marque is your current workshed
 *
 * @returns Whether the TakerSpace letter of Marque is your current workshed
 */
export declare function installed(): boolean;
/**
 * Determines whether you `have` the TakerSpace letter of Marque (or if it is installed)
 *
 * @returns Whether you `have` the TakerSpace letter of Marque or it's installed
 */
export declare function have(): boolean;
declare const RESOURCES: readonly ["Spice", "Rum", "Anchor", "Mast", "Silk", "Gold"];
export type Resource = (typeof RESOURCES)[number];
export type Recipe = Tuple<number, (typeof RESOURCES)["length"]>;
/**
 * @returns A copy of our map of all recipes
 */
export declare function allRecipes(): Map<Item, Recipe>;
/**
 * Collect daily resources from takerspace if you haven't yet today and are able to
 * @returns Whether we successfully collected supplies
 */
export declare function collect(): boolean;
/**
 * Determine how much of a resource you will have when the TakerSpace is installed
 * @param resource The resource in question
 * @returns The amount of that resource that you will have when the TakerSpace is installed
 */
export declare function amount(resource: Resource): number;
/**
 * Determine the Recipe for a given item
 * @param item The item in question
 * @returns The Recipe for that item, as a length-6 array in the order Spice, Rum, Anchor, Mast, Silk, Gold
 */
export declare function recipeFor(item: Item): Recipe | null;
/**
 * @returns Your current available resources, as a length-6 array in the order Spice, Rum, Anchor, Mast, Silk, Gold
 */
export declare function currentResources(): Recipe;
/**
 * Determine if you have enough resources to make a particular item
 * @param item The item in question
 * @param amount The number of the item to make; defaults to one
 * @returns Whether we have enough resources available to make the amount of the item
 */
export declare function haveEnoughFor(item: Item, amount?: number): boolean;
/**
 * Determines if you're currently able to make a particular item
 * @param item The item in question
 * @param amount The number of the item to make; defaults to one
 * @returns Whether we currently can make the item--that is, whether the TakerSpace is in your workshed and you have enough resources
 */
export declare function canMake(item: Item, amount?: number): boolean;
/**
 * Attempts to make a particular item
 * @param item The item in question
 * @param amount The number of the item to make; defaults to one
 * @returns Whether we succeeded in our endeavor
 */
export declare function make(item: Item, amount?: number): boolean;
export {};
