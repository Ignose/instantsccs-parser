import { cliExecute } from "kolmafia";
import { have as have_ } from "../../lib.js";
import { get } from "../../property.js";
import { $effect, $item } from "../../template-string.js";
export const RINGS = Object.freeze([
    ["yam1", "sword", "eye", "chair", "fur", "vessel"],
    ["lightning", "bottle", "meat", "wood", "yam2"],
    ["yam3", "wall", "cheese", "eyepatch"],
    ["explosion", "clock", "yam4"],
]);
/**
 * @returns Whether you `have` the Mayam calendar
 */
export function have() {
    return have_($item `Mayam Calendar`);
}
/**
 * @returns The Mayam calendar symbols you've used so far today.
 */
export function symbolsUsed() {
    return get("_mayamSymbolsUsed").split(",");
}
/**
 * Determine whether certain Mayam symbols are available for use today
 *
 * @param {...Glyph[]} symbols The symbols to check
 * @returns Whether or not the given symbols are all available for use
 */
export function available(...symbols) {
    return symbols.every((symbol) => !symbolsUsed().includes(symbol));
}
/**
 * @returns The remaining number of uses you have of your Mayam calendar today
 */
export function remainingUses() {
    return RINGS[3].filter((symbol) => available(symbol)).length;
}
/**
 * Utility function to ensure you're dealing with a `Combination` array.
 * @param combination An array containing a `CombinationString` or a `Combination` array.
 * @returns A `Combination` corresponding to the information passed in.
 */
export function toCombination(combination) {
    return combination.length === 1
        ? combination[0].split(" ")
        : combination;
}
/**
 * Utility function to ensure you're dealing with a `CombinationString` string.
 * @param combination An array containing a `CombinationString` or a `Combination` array.
 * @returns A `CombinationString` corresponding to the information passed in.
 */
export function toCombinationString(combination) {
    return combination.length === 1
        ? combination[0]
        : combination.join(" ");
}
/**
 * Enter a combination in the Mayam calendar
 * @param combination The combination to submit, either as a single string or as a series of symbols
 * @returns Whether we succeeded in our endeavor
 */
export function submit(...combination) {
    if (!available(...toCombination(combination))) {
        return false;
    }
    return cliExecute(`mayam rings ${combination.join(" ").replace(/yam\d/g, "yam")}`);
}
export const RESONANCES = Object.freeze({
    "eye yam2 eyepatch yam4": $item `Mayam spinach`,
    "vessel yam2 cheese explosion": $item `stuffed yam stinkbomb`,
    "yam1 meat cheese yam4": $item `yam and swiss`,
    "sword yam2 eyepatch explosion": $item `yam cannon`,
    "fur lightning eyepatch yam4": $item `tiny yam cannon`,
    "yam1 lightning yam3 clock": $item `yam battery`,
    "fur yam2 wall yam4": $item `furry yam buckler`,
    "yam1 yam2 yam3 explosion": $item `thanksgiving bomb`,
    "yam1 meat eyepatch yam4": $item `yamtility belt`,
    "chair yam2 yam3 clock": $effect `Caught Yam-Handed`,
    "yam1 yam2 cheese clock": $effect `Memories of Cheesier Age`,
});
export const RESONANCE_KEYS = Object.keys(RESONANCES);
/**
 * Find the combination needed to get a particular resonance
 * @param target The Item or Effect granted by the resonance
 * @returns The combination needed, or null if none such exists
 */
export function resonanceFor(target) {
    return ([...Object.entries(RESONANCES)]
        .find(([, value]) => value === target)?.[0]
        .split(" ") ?? null);
}
/**
 * Determines whether an item can be obtained via resonance at this moment
 * @param target The target Item or Effect for your resonance
 * @returns Whether or not you can currently use that resonance
 */
export function resonanceAvailable(target) {
    const resonance = resonanceFor(target);
    return !!resonance && available(...resonance);
}
/**
 * Determine what Item or Effect results from a particular resonance
 *
 * @param combination The combination to check, either as a single string or a series of symbols
 * @returns The Item or Effect of the resonance, if it is indeed a resonance; `null` otherwise
 */
export function getResonanceResult(...combination) {
    const combinationString = combination.length === 1
        ? combination[0]
        : combination.join(" ");
    return combinationString in RESONANCES
        ? RESONANCES[combinationString]
        : null;
}
