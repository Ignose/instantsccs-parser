import { Monster, Item, Location } from "kolmafia";
/**
 * @returns Whether we currently have the closed-circuit pay phone
 */
export declare function have(): boolean;
/**
 * @returns Rufus's currently expected quest target, if he has one
 */
export declare function rufusTarget(): Monster | Item | string | null;
declare const INGRESS_RIFTS: {
    readonly desertbeach: Location;
    readonly forestvillage: Location;
    readonly mclargehuge: Location;
    readonly beanstalk: Location;
    readonly manor3: Location;
    readonly "8bit": Location;
    readonly pyramid: Location;
    readonly giantcastle: Location;
    readonly woods: Location;
    readonly hiddencity: Location;
    readonly cemetery: Location;
    readonly plains: Location;
    readonly town_right: Location;
};
export type Ingress = "" | keyof typeof INGRESS_RIFTS;
/**
 * @returns Your current `shadowRiftIngress`; `null` if none is set this ascension
 */
export declare function currentIngress(): Ingress;
/**
 * @returns The current shadow rift that Mafia thinks KoL thinks you're in.
 */
export declare function currentRift(): Location | null;
/**
 * Choose a shadow rift to suit your needs
 *
 * @param options An object of various requirements you might have for the rift you want
 * @param options.canAdventure Set to `true` if you want to only select a rift that you can currently access
 * @param options.monsters Set to an array of Shadow Monsters you want to be available in the rift
 * @param options.drops Set to an array of item drops you want to come from monsters in the rift
 * @param options.otherFilter Set an optional additional filtering function not covered by the above logic
 * @param options.sortBy Set a function used to compare valid rifts between eachother; bigger numbers are better
 * @returns A rift that meets the criteria you specify, if one exists
 */
export declare function chooseRift(options: {
    canAdventure?: boolean;
    monsters?: Monster[];
    drops?: Item[];
    otherFilter?: (l: Location) => boolean;
    sortBy?: (l: Location) => number;
}): Location | null;
/**
 * Choose a quest based on the options available to us
 *
 * @param chooser A function that maps quest-options to a choice
 * @returns Whether we successfully accepted a quest
 */
export declare function chooseQuest(chooser: ({ entity, artifact, items, }: {
    entity: Monster;
    artifact: Item;
    items: Item;
}) => 1 | 2 | 3 | 4): boolean;
/**
 * @returns Array containing all shadow rift locations
 */
export declare function rifts(): Location[];
/**
 * Picks an option based on your current shadow rift ingress
 *
 * @param options An object keyed by shadow rift ingress; it must either contain all possible ingresses, or have a `default` parameter.
 * @param alternateSource An optional alternate way of determining which Ingress to choose by.
 * @returns The option corresponding to your current shadow rift ingress.
 */
export declare const byIngress: <S>(options: import("../../utils.js").Switch<Ingress, S>, alternateSource?: Ingress | ((...args: never[]) => Ingress) | undefined) => S;
/**
 * Submit your Rufus quest
 *
 * @returns Whether we successfully submitted your Rufus quest
 */
export declare function submitQuest(): boolean;
export {};
