import { Effect, Item, Stat } from "kolmafia";
import { ValueOf } from "../../utils.js";
/**
 * @returns Whether you own the Boxing Daycare
 */
export declare function have(): boolean;
/**
 * @returns Whether we can currently have a Boxing Daydream
 */
export declare function canDaydream(): boolean;
/**
 * Have a Boxing Daydream, retrieving an item from the daycare
 * @returns Whether we succeeded in our endeavor
 */
export declare function daydream(): boolean;
/**
 * @returns Whether we can currently visit the Boxing Day Spa
 */
export declare function canVisitSpa(): boolean;
declare const SPA_PACKAGES: {
    readonly "Mud Bath": "Muddled";
    readonly "Mani-pedi": "Ten out of Ten";
    readonly "Cucumber Eye Treatment": "Uncucumbered";
    readonly "Thermal Spring Aromatherapy": "Flagrantly Fragrant";
};
type SpaPackage = keyof typeof SPA_PACKAGES | ValueOf<typeof SPA_PACKAGES>;
/**
 * Visit the Boxing Day Spa, getting a buff of your choice
 * @param target What spa package to request
 * @returns Whether we succeeded in our endeavor
 */
export declare function visitSpa(target: SpaPackage | Effect | Stat): boolean;
/**
 * Hire an instructor for your boxing daycare
 * @param shouldHire Function to determine if, given a particular item/quantity pair, we should actually attempt to hire an instructor
 * @returns Whether or not we successfully hired a new instructor
 */
export declare function hireInstructor(shouldHire?: (item: Item, quantity: number) => boolean): boolean;
/**
 * Attempt to reroll your boxing daycare instructor item cost
 * @returns Whether we successfully rerolled the daycare instructor item
 */
export declare function rerollInstructor(): boolean;
/**
 *
 * @param number Number of recruits; defaults to the current value
 * @returns The amount of meat it costs to recruit more toddlers
 */
export declare function recruitCost(number?: number): number;
/**
 * Returns the lower and upper bound for the number of toddlers you can expect to recruit from the Boxing Daycare if you recruit
 * @param options Optional object containing equipment and instructors
 * @param options.equipment The amount of equipment you have; defaults to current value
 * @param options.instructors The number of instructors you have; defaults to current value
 * @returns A tuple consisting of the lower and upper bounds of how many toddlers you might get from recruiting toddlers
 */
export declare function expectedRecruits({ equipment, instructors, }?: {
    equipment?: number | undefined;
    instructors?: number | undefined;
}): [number, number];
/**
 * Recruit toddlers for your Boxing Daycare
 * @returns Whether we successfully recruited more toddlers
 */
export declare function recruit(): boolean;
/**
 * Scavenge in the boxing daycare
 * @returns Whether we successfully scavenged
 */
export declare function scavenge(): boolean;
export {};
