import { Familiar } from "kolmafia";
import { RegularFamiliarTag } from "../../lib.js";
import { NumericModifier } from "../../modifierTypes.js";
import { Modifiers } from "../../modifier.js";
/**
 * Do you own a still-suit?
 * @returns Whether you have the tiny stillsuit
 */
export declare function have(): boolean;
/**
 * @returns the expected adventures from drinking stillsuit distillate
 */
export declare function distillateAdventures(): number;
/**
 * Drinks stillsuit distillate
 * @returns whether distillate was successfully drunk
 */
export declare function drinkDistillate(): boolean;
/**
 * @returns A `Modifiers` object that contains your next Distillate modifiers
 */
export declare function nextDistillateModifiers(): Modifiers<NumericModifier>;
/**
 * @returns A `Modifiers` object that contains your current Distillate modifiers
 */
export declare function currentDistillateModifiers(): Modifiers<NumericModifier>;
/**
 * Checks distillate for specific modifiers
 * @param modifier determines what modifier to check stillsuit buffs against
 * @returns the modifier value for the given modifier
 */
export declare function distillateModifier(modifier: NumericModifier): number;
export declare const MODIFIER_TAGS: Record<RegularFamiliarTag, NumericModifier>;
/**
 * Calculate the ratio of stillsuit modifiers for a particular familiar.
 * @param familiar The familiar in question
 * @returns An object whose keys are NumericModifiers potentially granted by the stillsuit distillate from this familiar, and whose values are the relative weights of those modifiers
 */
export declare function modifierRatio(familiar: Familiar): Modifiers<NumericModifier>;
/**
 * Identify the best familiar you have to generate stillsuit distillate for a given modifier
 * @param modifier The modifier in question
 * @returns The familiar you currently `have` that returns the best stillsuit distillate for that modifier.
 */
export declare function bestFamiliar(modifier: NumericModifier): Familiar;
