import { availableAmount, useSkill as useSkill_ } from "kolmafia";
import { get } from "../../property.js";
import { $item, $skill } from "../../template-string.js";
import { examine } from "../../lib.js";
import { clamp } from "../../utils.js";
/** designer sweatpants */
const item = $item `designer sweatpants`;
/** designer sweatpants sweat skills */
export const skills = {
    SweatFlick: $skill `Sweat Flick`,
    SweatSpray: $skill `Sweat Spray`,
    SweatFlood: $skill `Sweat Flood`,
    SipSomeSweat: $skill `Sip Some Sweat`,
    SweatSip: $skill `Sweat Sip`,
    DrenchYourselfInSweat: $skill `Drench Yourself in Sweat`,
    SweatOutSomeBooze: $skill `Sweat Out Some Booze`,
    MakeSweatAde: $skill `Make Sweat-Ade`,
};
/** Map of skill to sweat cost */
const sweatSkillCost = new Map([
    [skills.SweatFlick, 1],
    [skills.SweatSpray, 3],
    [skills.SweatFlood, 5],
    [skills.SipSomeSweat, 5],
    [skills.SweatSip, 5],
    [skills.DrenchYourselfInSweat, 15],
    [skills.SweatOutSomeBooze, 25],
    [skills.MakeSweatAde, 50],
]);
/**
 * Do you own designer sweatpants
 * @returns Whether you have the designer sweatpants
 */
export function have() {
    return availableAmount(item) > 0;
}
/**
 * Get the current sweat amount
 * @returns The amount of sweat
 */
export function sweat() {
    return get("sweat");
}
/**
 * Refresh the current sweat amount by visiting the item description
 */
export function refresh() {
    examine(item);
}
/**
 * Get the sweat cost of a skill
 * @param skill The skill to check
 * @returns The sweat cost, or Infinty for an invalid skill
 */
export function sweatCost(skill) {
    return sweatSkillCost.get(skill) ?? Infinity;
}
/**
 * Check if a sweat skill can be cast
 * @param skill The skill to check
 * @returns If this skill can be cast
 */
export function canUseSkill(skill) {
    return have() && skill.dailylimit !== 0 && sweatCost(skill) <= sweat();
}
/**
 * Get the available number of times a sweat skill can be cast with current sweat
 * @param skill The skill to check
 * @returns The available number of casts
 */
export function availableCasts(skill) {
    if (!canUseSkill(skill))
        return 0;
    return clamp(Math.floor(sweat() / sweatCost(skill)), 0, skill.dailylimit > -1 ? skill.dailylimit : Infinity);
}
/**
 * Get the potential number of times a sweat skill can be cast, with maximum sweat
 * @param skill The skill to check
 * @returns The potential number of casts
 */
export function potentialCasts(skill) {
    if (!have() || sweatCost(skill) === 0)
        return 0;
    return clamp(Math.floor(100 / sweatCost(skill)), 0, skill.dailylimit > -1 ? skill.dailylimit : Infinity);
}
/**
 * Cast a sweat skill, on failure refresh sweat amount
 * @param skill The skill to cast
 * @returns If this skill was cast successfully
 */
export function useSkill(skill) {
    if (!canUseSkill(skill))
        return false;
    const sweatAmt = sweat();
    const result = useSkill_(1, skill) && sweatAmt !== sweat();
    if (!result) {
        refresh();
    }
    return result;
}
