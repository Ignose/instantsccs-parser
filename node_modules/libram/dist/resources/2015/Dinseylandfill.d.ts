import { Item, Location } from "kolmafia";
/**
 * @returns Whether you permanently own Dinseylandfill
 */
export declare function have(): boolean;
/**
 * @returns Whether you have access to Dinseylandfill currently
 */
export declare function available(): boolean;
declare class QuestData {
    name: string;
    priority: number;
    questNameKiosk: string;
    questNameQuestLog: string;
    questStateProperty: string;
    questProgressProperty: string;
    questProgressLimit: number;
    canUseWanderers: boolean;
    requiredItem: Item;
    questLocation: Location;
    /**
     * Process for determining where to put a wanderer to extract additional value from it
     *
     * @param name easy to refer to name of the quest
     * @param priority ranked preference of quests
     * @param questNameKiosk returns the name of the quest as found at the dinseylandfill Job Kiosk
     * @param questNameQuestLog returns the name of the quest as found in the quest log
     * @param questStateProperty name of the mafia property tracing the current state of the quest (e.g. unstarted, step[x], finished)
     * @param questProgressProperty name of the mafia property that tracks progress of the current quest state
     * @param questProgressLimit Maximum questProgressProperty can reach
     * @param canUseWanderers whether wandering monsters can be used to progress the quest
     * @param requiredItem the required item (if any) needed to be equipped to progress the quest
     * @param questLocation where to adventure to progress the quest
     */
    constructor(name: string, priority: number, questNameKiosk: string, questNameQuestLog: string, questStateProperty: string, questProgressProperty: string, questProgressLimit: number, canUseWanderers: boolean, requiredItem: Item, questLocation: Location);
    currentQuest(): boolean;
}
export declare const quests: QuestData[];
/**
 * Disposes of a Bag of park garbage in the Maintenance Tunnels for daily funfunds
 *
 * @returns Whether you successfully deposited a bag for funfunds
 */
export declare function disposeGarbage(): boolean;
/**
 * @returns Whether you have a current Dinsey quest
 */
export declare function hasQuest(): boolean;
/**
 * @returns The QuestData for your current active quest
 */
export declare function activeQuest(): QuestData;
/**
 * @returns Whether your quest is ready to hand in
 */
export declare function questComplete(): boolean;
/**
 * @returns Whether your quest still has actions needing completion
 */
export declare function hasActiveQuest(): boolean;
/**
 * Determines the probability of getting a robortender drop based on number of drops received
 *
 * @param priority The name or ranked preference of the lowest priority quest you want to accept.
 * @returns Whether you accepted a quest or not
 */
export declare function acceptQuest(priority: number | string): boolean;
/**
 * Turns in a completed quest
 */
export declare function turnInQuest(): void;
export declare const keyCardsLocations: Map<Item, Location>;
/**
 * @returns Whether you currently have access to fighting Wart Dinsey
 */
export declare function canFightWartDinsey(): boolean;
/**
 * @returns Whether you permanently own Dinseylandfill
 */
export declare function coasterNextTurn(): boolean;
/**
 * @returns Whether you permanently own Dinseylandfill
 */
export declare function foughtWartDinseyThisLife(): boolean;
/**
 * @returns Whether you have disposed of garbage for funfunds today
 */
export declare function hasDisposedGarbage(): boolean;
export {};
