export type Scalars = {
    ID: string;
    Int: number;
    String: string;
    Boolean: boolean;
    Cursor: any;
    Float: number;
    JSON: any;
    Datetime: any;
};
/** The root query type which gives access points into the data universe. */
export interface Query {
    /**
     * Exposes the root query type nested one level down. This is helpful for Relay 1
     * which can only query top level fields if they are in a particular form.
     */
    query: Query;
    /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
    nodeId: Scalars['ID'];
    /** Fetches an object given its globally unique `ID`. */
    node: (Node | null);
    /** Reads and enables pagination through a set of `Class`. */
    allClasses: (ClassesConnection | null);
    /** Reads and enables pagination through a set of `Consumable`. */
    allConsumables: (ConsumablesConnection | null);
    /** Reads and enables pagination through a set of `EffectModifier`. */
    allEffectModifiers: (EffectModifiersConnection | null);
    /** Reads and enables pagination through a set of `Effect`. */
    allEffects: (EffectsConnection | null);
    /** Reads and enables pagination through a set of `Equipment`. */
    allEquipment: (EquipmentConnection | null);
    /** Reads and enables pagination through a set of `FamiliarModifier`. */
    allFamiliarModifiers: (FamiliarModifiersConnection | null);
    /** Reads and enables pagination through a set of `Familiar`. */
    allFamiliars: (FamiliarsConnection | null);
    /** Reads and enables pagination through a set of `FoldGroup`. */
    allFoldGroups: (FoldGroupsConnection | null);
    /** Reads and enables pagination through a set of `Foldable`. */
    allFoldables: (FoldablesConnection | null);
    /** Reads and enables pagination through a set of `ItemModifier`. */
    allItemModifiers: (ItemModifiersConnection | null);
    /** Reads and enables pagination through a set of `Item`. */
    allItems: (ItemsConnection | null);
    /** Reads and enables pagination through a set of `Location`. */
    allLocations: (LocationsConnection | null);
    /** Reads and enables pagination through a set of `Meta`. */
    allMetas: (MetasConnection | null);
    /** Reads and enables pagination through a set of `MonsterDrop`. */
    allMonsterDrops: (MonsterDropsConnection | null);
    /** Reads and enables pagination through a set of `Monster`. */
    allMonsters: (MonstersConnection | null);
    /** Reads and enables pagination through a set of `NativeMonster`. */
    allNativeMonsters: (NativeMonstersConnection | null);
    /** Reads and enables pagination through a set of `OutfitEquipment`. */
    allOutfitEquipments: (OutfitEquipmentsConnection | null);
    /** Reads and enables pagination through a set of `OutfitTreat`. */
    allOutfitTreats: (OutfitTreatsConnection | null);
    /** Reads and enables pagination through a set of `Outfit`. */
    allOutfits: (OutfitsConnection | null);
    /** Reads and enables pagination through a set of `Path`. */
    allPaths: (PathsConnection | null);
    /** Reads and enables pagination through a set of `SkillModifier`. */
    allSkillModifiers: (SkillModifiersConnection | null);
    /** Reads and enables pagination through a set of `Skill`. */
    allSkills: (SkillsConnection | null);
    classById: (Class | null);
    consumableById: (Consumable | null);
    effectModifierByEffect: (EffectModifier | null);
    effectById: (Effect | null);
    effectByDescid: (Effect | null);
    equipmentById: (Equipment | null);
    familiarModifierByFamiliar: (FamiliarModifier | null);
    familiarById: (Familiar | null);
    foldGroupById: (FoldGroup | null);
    itemModifierByItem: (ItemModifier | null);
    itemById: (Item | null);
    itemByDescid: (Item | null);
    locationByName: (Location | null);
    monsterById: (Monster | null);
    outfitById: (Outfit | null);
    pathById: (Path | null);
    pathByImage: (Path | null);
    skillModifierBySkill: (SkillModifier | null);
    skillById: (Skill | null);
    /** Reads a single `Class` using its globally unique `ID`. */
    class: (Class | null);
    /** Reads a single `Consumable` using its globally unique `ID`. */
    consumable: (Consumable | null);
    /** Reads a single `EffectModifier` using its globally unique `ID`. */
    effectModifier: (EffectModifier | null);
    /** Reads a single `Effect` using its globally unique `ID`. */
    effect: (Effect | null);
    /** Reads a single `Equipment` using its globally unique `ID`. */
    equipment: (Equipment | null);
    /** Reads a single `FamiliarModifier` using its globally unique `ID`. */
    familiarModifier: (FamiliarModifier | null);
    /** Reads a single `Familiar` using its globally unique `ID`. */
    familiar: (Familiar | null);
    /** Reads a single `FoldGroup` using its globally unique `ID`. */
    foldGroup: (FoldGroup | null);
    /** Reads a single `ItemModifier` using its globally unique `ID`. */
    itemModifier: (ItemModifier | null);
    /** Reads a single `Item` using its globally unique `ID`. */
    item: (Item | null);
    /** Reads a single `Location` using its globally unique `ID`. */
    location: (Location | null);
    /** Reads a single `Monster` using its globally unique `ID`. */
    monster: (Monster | null);
    /** Reads a single `Outfit` using its globally unique `ID`. */
    outfit: (Outfit | null);
    /** Reads a single `Path` using its globally unique `ID`. */
    path: (Path | null);
    /** Reads a single `SkillModifier` using its globally unique `ID`. */
    skillModifier: (SkillModifier | null);
    /** Reads a single `Skill` using its globally unique `ID`. */
    skill: (Skill | null);
    __typename: 'Query';
}
/** An object with a globally unique `ID`. */
export type Node = (Query | Class | Path | Consumable | Item | Equipment | Familiar | FamiliarModifier | Monster | Location | Outfit | FoldGroup | ItemModifier | EffectModifier | Effect | SkillModifier | Skill) & {
    __isUnion?: true;
};
/** A connection to a list of `Class` values. */
export interface ClassesConnection {
    /** A list of `Class` objects. */
    nodes: (Class | null)[];
    /** A list of edges which contains the `Class` and cursor to aid in pagination. */
    edges: ClassesEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Class` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'ClassesConnection';
}
export interface Class {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    name: Scalars['String'];
    enumName: Scalars['String'];
    image: (Scalars['String'] | null);
    primeStatIndex: Scalars['Int'];
    path: (Scalars['Int'] | null);
    stun: (Scalars['String'] | null);
    stomachCapacity: (Scalars['Int'] | null);
    liverCapacity: (Scalars['Int'] | null);
    spleenCapacity: (Scalars['Int'] | null);
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath: (Path | null);
    __typename: 'Class';
}
export interface Path {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    name: Scalars['String'];
    enumName: Scalars['String'];
    image: (Scalars['String'] | null);
    isAvatar: Scalars['Boolean'];
    article: (Scalars['String'] | null);
    pointsPreference: (Scalars['String'] | null);
    maximumPoints: Scalars['Int'];
    bucket: Scalars['Boolean'];
    stomachCapacity: Scalars['Int'];
    liverCapacity: Scalars['Int'];
    spleenCapacity: Scalars['Int'];
    /** Reads and enables pagination through a set of `Class`. */
    classesByPath: ClassesConnection;
    __typename: 'Path';
}
/** Methods to use when ordering `Class`. */
export type ClassesOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'ENUM_NAME_ASC' | 'ENUM_NAME_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'PRIME_STAT_INDEX_ASC' | 'PRIME_STAT_INDEX_DESC' | 'PATH_ASC' | 'PATH_DESC' | 'STUN_ASC' | 'STUN_DESC' | 'STOMACH_CAPACITY_ASC' | 'STOMACH_CAPACITY_DESC' | 'LIVER_CAPACITY_ASC' | 'LIVER_CAPACITY_DESC' | 'SPLEEN_CAPACITY_ASC' | 'SPLEEN_CAPACITY_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A `Class` edge in the connection. */
export interface ClassesEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Class` at the end of the edge. */
    node: (Class | null);
    __typename: 'ClassesEdge';
}
/** Information about pagination in a connection. */
export interface PageInfo {
    /** When paginating forwards, are there more items? */
    hasNextPage: Scalars['Boolean'];
    /** When paginating backwards, are there more items? */
    hasPreviousPage: Scalars['Boolean'];
    /** When paginating backwards, the cursor to continue. */
    startCursor: (Scalars['Cursor'] | null);
    /** When paginating forwards, the cursor to continue. */
    endCursor: (Scalars['Cursor'] | null);
    __typename: 'PageInfo';
}
/** A connection to a list of `Consumable` values. */
export interface ConsumablesConnection {
    /** A list of `Consumable` objects. */
    nodes: (Consumable | null)[];
    /** A list of edges which contains the `Consumable` and cursor to aid in pagination. */
    edges: ConsumablesEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Consumable` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'ConsumablesConnection';
}
export interface Consumable {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    stomach: Scalars['Int'];
    liver: Scalars['Int'];
    spleen: Scalars['Int'];
    levelRequirement: Scalars['Int'];
    quality: (ConsumableQuality | null);
    adventureRange: Scalars['String'];
    adventures: Scalars['Float'];
    muscle: Scalars['Float'];
    muscleRange: Scalars['String'];
    mysticality: Scalars['Float'];
    mysticalityRange: Scalars['String'];
    moxie: Scalars['Float'];
    moxieRange: Scalars['String'];
    notes: (Scalars['String'] | null);
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById: (Item | null);
    __typename: 'Consumable';
}
export type ConsumableQuality = 'EPIC' | 'AWESOME' | 'CHANGING' | 'CRAPPY' | 'DECENT' | 'DRIPPY' | 'GOOD' | 'NONE' | 'QUEST' | 'SUPER_EPIC' | 'SUPER_ULTRA_EPIC' | 'SUPER_ULTRA_MEGA_EPIC' | 'SUPER_ULTRA_MEGA_TURBO_EPIC';
export interface Item {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    name: Scalars['String'];
    descid: (Scalars['String'] | null);
    image: Scalars['String'];
    uses: (ItemUse | null)[];
    quest: Scalars['Boolean'];
    gift: Scalars['Boolean'];
    tradeable: Scalars['Boolean'];
    discardable: Scalars['Boolean'];
    autosell: Scalars['Int'];
    plural: (Scalars['String'] | null);
    ambiguous: Scalars['Boolean'];
    /** Reads a single `Equipment` that is related to this `Item`. */
    equipmentById: (Equipment | null);
    /** Reads a single `Consumable` that is related to this `Item`. */
    consumableById: (Consumable | null);
    /** Reads and enables pagination through a set of `Familiar`. */
    familiarsByLarva: FamiliarsConnection;
    /** Reads and enables pagination through a set of `Familiar`. */
    familiarsByEquipment: FamiliarsConnection;
    /** Reads and enables pagination through a set of `MonsterDrop`. */
    monsterDropsByItem: MonsterDropsConnection;
    /** Reads and enables pagination through a set of `OutfitEquipment`. */
    outfitEquipmentsByEquipment: OutfitEquipmentsConnection;
    /** Reads and enables pagination through a set of `OutfitTreat`. */
    outfitTreatsByItem: OutfitTreatsConnection;
    /** Reads and enables pagination through a set of `Foldable`. */
    foldablesByItem: FoldablesConnection;
    /** Reads a single `ItemModifier` that is related to this `Item`. */
    itemModifierByItem: (ItemModifier | null);
    __typename: 'Item';
}
export type ItemUse = 'ACCESSORY' | 'AVATAR' | 'BOOTSKIN' | 'BOOTSPUR' | 'BOUNTY' | 'CANDY' | 'CANDY1' | 'CANDY2' | 'CARD' | 'CHOCOLATE' | 'COMBAT' | 'COMBAT_REUSABLE' | 'CONTAINER' | 'COOK' | 'CURSE' | 'DRINK' | 'DRINK_HELPER' | 'FAMILIAR' | 'FANCY' | 'FOLDER' | 'FOOD' | 'FOOD_HELPER' | 'GROW' | 'GUARDIAN' | 'HAT' | 'MATCHABLE' | 'MESSAGE' | 'MIX' | 'MULTIPLE' | 'OFFHAND' | 'PACKAGE' | 'PANTS' | 'PASTE' | 'POKEPILL' | 'POTION' | 'REUSABLE' | 'SHIRT' | 'SINGLE' | 'SIXGUN' | 'SMITH' | 'SOLO' | 'SPHERE' | 'SPLEEN' | 'STICKER' | 'USABLE' | 'WEAPON' | 'ZAP';
export interface Equipment {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    power: Scalars['Int'];
    musRequirement: Scalars['Int'];
    mysRequirement: Scalars['Int'];
    moxRequirement: Scalars['Int'];
    type: (Scalars['String'] | null);
    hands: (Scalars['Int'] | null);
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById: (Item | null);
    __typename: 'Equipment';
}
/** A connection to a list of `Familiar` values. */
export interface FamiliarsConnection {
    /** A list of `Familiar` objects. */
    nodes: (Familiar | null)[];
    /** A list of edges which contains the `Familiar` and cursor to aid in pagination. */
    edges: FamiliarsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Familiar` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'FamiliarsConnection';
}
export interface Familiar {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    name: Scalars['String'];
    image: Scalars['String'];
    categories: (FamiliarCategory | null)[];
    larva: (Scalars['Int'] | null);
    equipment: (Scalars['Int'] | null);
    cageMatch: Scalars['Int'];
    scavengerHunt: Scalars['Int'];
    obstacleCourse: Scalars['Int'];
    hideAndSeek: Scalars['Int'];
    attributes: (Scalars['String'] | null)[];
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva: (Item | null);
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment: (Item | null);
    /** Reads a single `FamiliarModifier` that is related to this `Familiar`. */
    familiarModifierByFamiliar: (FamiliarModifier | null);
    __typename: 'Familiar';
}
export type FamiliarCategory = 'BLOCK' | 'COMBAT0' | 'COMBAT1' | 'DELEVEL0' | 'DELEVEL1' | 'DROP' | 'HP0' | 'HP1' | 'ITEM0' | 'ITEM1' | 'ITEM2' | 'ITEM3' | 'MEAT0' | 'MEAT1' | 'MP0' | 'MP1' | 'OTHER0' | 'OTHER1' | 'PASSIVE' | 'POKEFAM' | 'STAT0' | 'STAT1' | 'STAT2' | 'STAT3' | 'UNDERWATER' | 'VARIABLE';
export interface FamiliarModifier {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    familiar: Scalars['Int'];
    modifiers: Scalars['JSON'];
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar: (Familiar | null);
    __typename: 'FamiliarModifier';
}
/** A `Familiar` edge in the connection. */
export interface FamiliarsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Familiar` at the end of the edge. */
    node: (Familiar | null);
    __typename: 'FamiliarsEdge';
}
/** Methods to use when ordering `Familiar`. */
export type FamiliarsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'CATEGORIES_ASC' | 'CATEGORIES_DESC' | 'LARVA_ASC' | 'LARVA_DESC' | 'EQUIPMENT_ASC' | 'EQUIPMENT_DESC' | 'CAGE_MATCH_ASC' | 'CAGE_MATCH_DESC' | 'SCAVENGER_HUNT_ASC' | 'SCAVENGER_HUNT_DESC' | 'OBSTACLE_COURSE_ASC' | 'OBSTACLE_COURSE_DESC' | 'HIDE_AND_SEEK_ASC' | 'HIDE_AND_SEEK_DESC' | 'ATTRIBUTES_ASC' | 'ATTRIBUTES_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `MonsterDrop` values. */
export interface MonsterDropsConnection {
    /** A list of `MonsterDrop` objects. */
    nodes: (MonsterDrop | null)[];
    /** A list of edges which contains the `MonsterDrop` and cursor to aid in pagination. */
    edges: MonsterDropsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `MonsterDrop` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'MonsterDropsConnection';
}
export interface MonsterDrop {
    monster: Scalars['Int'];
    item: Scalars['Int'];
    rate: Scalars['Int'];
    category: (MonsterDropCategory | null);
    /** Reads a single `Monster` that is related to this `MonsterDrop`. */
    monsterByMonster: (Monster | null);
    /** Reads a single `Item` that is related to this `MonsterDrop`. */
    itemByItem: (Item | null);
    __typename: 'MonsterDrop';
}
export type MonsterDropCategory = 'A' | 'C' | 'F' | 'M' | 'N' | 'P';
export interface Monster {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    ambiguous: Scalars['Boolean'];
    article: Scalars['String'];
    attack: Scalars['String'];
    boss: Scalars['Boolean'];
    defence: Scalars['String'];
    drippy: Scalars['Boolean'];
    element: MonsterElement;
    elementalAttack: MonsterElement;
    elementalDefence: MonsterElement;
    elementalResistance: Scalars['String'];
    experience: (Scalars['String'] | null);
    free: Scalars['Boolean'];
    ghost: Scalars['Boolean'];
    groupSize: Scalars['Int'];
    hp: Scalars['String'];
    id: Scalars['Int'];
    image: (Scalars['String'] | null)[];
    initiative: Scalars['String'];
    itemBlockChance: Scalars['Float'];
    lucky: Scalars['Boolean'];
    manuel: (Scalars['String'] | null);
    meat: (Scalars['Float'] | null);
    meatExpression: (Scalars['String'] | null);
    monsterLevelMultiplier: Scalars['String'];
    name: Scalars['String'];
    nobanish: Scalars['Boolean'];
    nocopy: Scalars['Boolean'];
    nomanuel: Scalars['Boolean'];
    nowander: Scalars['Boolean'];
    nowish: Scalars['Boolean'];
    phylum: Scalars['String'];
    physicalResistance: Scalars['String'];
    poison: (Scalars['String'] | null);
    scaling: Scalars['String'];
    scalingCap: Scalars['String'];
    scalingFloor: Scalars['String'];
    skillBlockChance: Scalars['Float'];
    snake: Scalars['Boolean'];
    spellBlockChance: Scalars['Float'];
    sprinkles: (Scalars['String'] | null)[];
    superlikely: Scalars['Boolean'];
    ultrarare: Scalars['Boolean'];
    wanderer: Scalars['Boolean'];
    wiki: (Scalars['String'] | null);
    wish: Scalars['Boolean'];
    /** Reads and enables pagination through a set of `MonsterDrop`. */
    monsterDropsByMonster: MonsterDropsConnection;
    /** Reads and enables pagination through a set of `NativeMonster`. */
    nativeMonstersByMonster: NativeMonstersConnection;
    __typename: 'Monster';
}
export type MonsterElement = 'BAD_SPELLING' | 'COLD' | 'CUTE' | 'HOT' | 'SHADOW' | 'SLEAZE' | 'SLIME' | 'SPOOKY' | 'STENCH' | 'SUPERCOLD';
/** Methods to use when ordering `MonsterDrop`. */
export type MonsterDropsOrderBy = 'NATURAL' | 'MONSTER_ASC' | 'MONSTER_DESC' | 'ITEM_ASC' | 'ITEM_DESC' | 'RATE_ASC' | 'RATE_DESC' | 'CATEGORY_ASC' | 'CATEGORY_DESC';
/** A connection to a list of `NativeMonster` values. */
export interface NativeMonstersConnection {
    /** A list of `NativeMonster` objects. */
    nodes: (NativeMonster | null)[];
    /** A list of edges which contains the `NativeMonster` and cursor to aid in pagination. */
    edges: NativeMonstersEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `NativeMonster` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'NativeMonstersConnection';
}
export interface NativeMonster {
    location: Scalars['String'];
    monster: Scalars['Int'];
    weight: Scalars['Float'];
    rejection: Scalars['Float'];
    parity: (Scalars['Int'] | null);
    /** Reads a single `Location` that is related to this `NativeMonster`. */
    locationByLocation: (Location | null);
    /** Reads a single `Monster` that is related to this `NativeMonster`. */
    monsterByMonster: (Monster | null);
    __typename: 'NativeMonster';
}
export interface Location {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: (Scalars['Int'] | null);
    name: Scalars['String'];
    zone: Scalars['String'];
    url: Scalars['String'];
    difficulty: LocationDifficulty;
    environment: LocationEnvironment;
    statRequirement: Scalars['Int'];
    waterLevel: (Scalars['Int'] | null);
    overdrunk: Scalars['Boolean'];
    nowander: Scalars['Boolean'];
    combatRate: Scalars['Int'];
    /** Reads and enables pagination through a set of `NativeMonster`. */
    nativeMonstersByLocation: NativeMonstersConnection;
    __typename: 'Location';
}
export type LocationDifficulty = 'HIGH' | 'LOW' | 'MEDIUM' | 'NONE' | 'UNKNOWN';
export type LocationEnvironment = 'INDOOR' | 'NONE' | 'OUTDOOR' | 'UNDERGROUND' | 'UNDERWATER';
/** Methods to use when ordering `NativeMonster`. */
export type NativeMonstersOrderBy = 'NATURAL' | 'LOCATION_ASC' | 'LOCATION_DESC' | 'MONSTER_ASC' | 'MONSTER_DESC' | 'WEIGHT_ASC' | 'WEIGHT_DESC' | 'REJECTION_ASC' | 'REJECTION_DESC' | 'PARITY_ASC' | 'PARITY_DESC';
/** A `NativeMonster` edge in the connection. */
export interface NativeMonstersEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `NativeMonster` at the end of the edge. */
    node: (NativeMonster | null);
    __typename: 'NativeMonstersEdge';
}
/** A `MonsterDrop` edge in the connection. */
export interface MonsterDropsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `MonsterDrop` at the end of the edge. */
    node: (MonsterDrop | null);
    __typename: 'MonsterDropsEdge';
}
/** A connection to a list of `OutfitEquipment` values. */
export interface OutfitEquipmentsConnection {
    /** A list of `OutfitEquipment` objects. */
    nodes: (OutfitEquipment | null)[];
    /** A list of edges which contains the `OutfitEquipment` and cursor to aid in pagination. */
    edges: OutfitEquipmentsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `OutfitEquipment` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'OutfitEquipmentsConnection';
}
export interface OutfitEquipment {
    outfit: Scalars['Int'];
    equipment: Scalars['Int'];
    /** Reads a single `Outfit` that is related to this `OutfitEquipment`. */
    outfitByOutfit: (Outfit | null);
    /** Reads a single `Item` that is related to this `OutfitEquipment`. */
    itemByEquipment: (Item | null);
    __typename: 'OutfitEquipment';
}
export interface Outfit {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    name: Scalars['String'];
    image: Scalars['String'];
    /** Reads and enables pagination through a set of `OutfitEquipment`. */
    outfitEquipmentsByOutfit: OutfitEquipmentsConnection;
    /** Reads and enables pagination through a set of `OutfitTreat`. */
    outfitTreatsByOutfit: OutfitTreatsConnection;
    __typename: 'Outfit';
}
/** Methods to use when ordering `OutfitEquipment`. */
export type OutfitEquipmentsOrderBy = 'NATURAL' | 'OUTFIT_ASC' | 'OUTFIT_DESC' | 'EQUIPMENT_ASC' | 'EQUIPMENT_DESC';
/** A connection to a list of `OutfitTreat` values. */
export interface OutfitTreatsConnection {
    /** A list of `OutfitTreat` objects. */
    nodes: (OutfitTreat | null)[];
    /** A list of edges which contains the `OutfitTreat` and cursor to aid in pagination. */
    edges: OutfitTreatsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `OutfitTreat` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'OutfitTreatsConnection';
}
export interface OutfitTreat {
    outfit: (Scalars['Int'] | null);
    item: (Scalars['Int'] | null);
    chance: Scalars['Float'];
    /** Reads a single `Outfit` that is related to this `OutfitTreat`. */
    outfitByOutfit: (Outfit | null);
    /** Reads a single `Item` that is related to this `OutfitTreat`. */
    itemByItem: (Item | null);
    __typename: 'OutfitTreat';
}
/** A `OutfitTreat` edge in the connection. */
export interface OutfitTreatsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `OutfitTreat` at the end of the edge. */
    node: (OutfitTreat | null);
    __typename: 'OutfitTreatsEdge';
}
/** Methods to use when ordering `OutfitTreat`. */
export type OutfitTreatsOrderBy = 'NATURAL' | 'OUTFIT_ASC' | 'OUTFIT_DESC' | 'ITEM_ASC' | 'ITEM_DESC' | 'CHANCE_ASC' | 'CHANCE_DESC';
/** A `OutfitEquipment` edge in the connection. */
export interface OutfitEquipmentsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `OutfitEquipment` at the end of the edge. */
    node: (OutfitEquipment | null);
    __typename: 'OutfitEquipmentsEdge';
}
/** A connection to a list of `Foldable` values. */
export interface FoldablesConnection {
    /** A list of `Foldable` objects. */
    nodes: (Foldable | null)[];
    /** A list of edges which contains the `Foldable` and cursor to aid in pagination. */
    edges: FoldablesEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Foldable` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'FoldablesConnection';
}
export interface Foldable {
    foldGroup: (Scalars['Int'] | null);
    item: (Scalars['Int'] | null);
    /** Reads a single `FoldGroup` that is related to this `Foldable`. */
    foldGroupByFoldGroup: (FoldGroup | null);
    /** Reads a single `Item` that is related to this `Foldable`. */
    itemByItem: (Item | null);
    __typename: 'Foldable';
}
export interface FoldGroup {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    damage: Scalars['Int'];
    /** Reads and enables pagination through a set of `Foldable`. */
    foldablesByFoldGroup: FoldablesConnection;
    __typename: 'FoldGroup';
}
/** Methods to use when ordering `Foldable`. */
export type FoldablesOrderBy = 'NATURAL' | 'FOLD_GROUP_ASC' | 'FOLD_GROUP_DESC' | 'ITEM_ASC' | 'ITEM_DESC';
/** A `Foldable` edge in the connection. */
export interface FoldablesEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Foldable` at the end of the edge. */
    node: (Foldable | null);
    __typename: 'FoldablesEdge';
}
export interface ItemModifier {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    item: Scalars['Int'];
    modifiers: Scalars['JSON'];
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem: (Item | null);
    __typename: 'ItemModifier';
}
/** A `Consumable` edge in the connection. */
export interface ConsumablesEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Consumable` at the end of the edge. */
    node: (Consumable | null);
    __typename: 'ConsumablesEdge';
}
/** Methods to use when ordering `Consumable`. */
export type ConsumablesOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'STOMACH_ASC' | 'STOMACH_DESC' | 'LIVER_ASC' | 'LIVER_DESC' | 'SPLEEN_ASC' | 'SPLEEN_DESC' | 'LEVEL_REQUIREMENT_ASC' | 'LEVEL_REQUIREMENT_DESC' | 'QUALITY_ASC' | 'QUALITY_DESC' | 'ADVENTURE_RANGE_ASC' | 'ADVENTURE_RANGE_DESC' | 'ADVENTURES_ASC' | 'ADVENTURES_DESC' | 'MUSCLE_ASC' | 'MUSCLE_DESC' | 'MUSCLE_RANGE_ASC' | 'MUSCLE_RANGE_DESC' | 'MYSTICALITY_ASC' | 'MYSTICALITY_DESC' | 'MYSTICALITY_RANGE_ASC' | 'MYSTICALITY_RANGE_DESC' | 'MOXIE_ASC' | 'MOXIE_DESC' | 'MOXIE_RANGE_ASC' | 'MOXIE_RANGE_DESC' | 'NOTES_ASC' | 'NOTES_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `EffectModifier` values. */
export interface EffectModifiersConnection {
    /** A list of `EffectModifier` objects. */
    nodes: (EffectModifier | null)[];
    /** A list of edges which contains the `EffectModifier` and cursor to aid in pagination. */
    edges: EffectModifiersEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `EffectModifier` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'EffectModifiersConnection';
}
export interface EffectModifier {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    effect: Scalars['Int'];
    modifiers: Scalars['JSON'];
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect: (Effect | null);
    __typename: 'EffectModifier';
}
export interface Effect {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    name: Scalars['String'];
    descid: (Scalars['String'] | null);
    image: Scalars['String'];
    quality: EffectQuality;
    nohookah: Scalars['Boolean'];
    nopvp: Scalars['Boolean'];
    noremove: Scalars['Boolean'];
    song: Scalars['Boolean'];
    actions: (Scalars['String'] | null)[];
    ambiguous: Scalars['Boolean'];
    /** Reads a single `EffectModifier` that is related to this `Effect`. */
    effectModifierByEffect: (EffectModifier | null);
    __typename: 'Effect';
}
export type EffectQuality = 'BAD' | 'GOOD' | 'NEUTRAL';
/** A `EffectModifier` edge in the connection. */
export interface EffectModifiersEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `EffectModifier` at the end of the edge. */
    node: (EffectModifier | null);
    __typename: 'EffectModifiersEdge';
}
/** Methods to use when ordering `EffectModifier`. */
export type EffectModifiersOrderBy = 'NATURAL' | 'EFFECT_ASC' | 'EFFECT_DESC' | 'MODIFIERS_ASC' | 'MODIFIERS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Effect` values. */
export interface EffectsConnection {
    /** A list of `Effect` objects. */
    nodes: (Effect | null)[];
    /** A list of edges which contains the `Effect` and cursor to aid in pagination. */
    edges: EffectsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Effect` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'EffectsConnection';
}
/** A `Effect` edge in the connection. */
export interface EffectsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Effect` at the end of the edge. */
    node: (Effect | null);
    __typename: 'EffectsEdge';
}
/** Methods to use when ordering `Effect`. */
export type EffectsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'DESCID_ASC' | 'DESCID_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'QUALITY_ASC' | 'QUALITY_DESC' | 'NOHOOKAH_ASC' | 'NOHOOKAH_DESC' | 'NOPVP_ASC' | 'NOPVP_DESC' | 'NOREMOVE_ASC' | 'NOREMOVE_DESC' | 'SONG_ASC' | 'SONG_DESC' | 'ACTIONS_ASC' | 'ACTIONS_DESC' | 'AMBIGUOUS_ASC' | 'AMBIGUOUS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Equipment` values. */
export interface EquipmentConnection {
    /** A list of `Equipment` objects. */
    nodes: (Equipment | null)[];
    /** A list of edges which contains the `Equipment` and cursor to aid in pagination. */
    edges: EquipmentEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Equipment` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'EquipmentConnection';
}
/** A `Equipment` edge in the connection. */
export interface EquipmentEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Equipment` at the end of the edge. */
    node: (Equipment | null);
    __typename: 'EquipmentEdge';
}
/** Methods to use when ordering `Equipment`. */
export type EquipmentOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'POWER_ASC' | 'POWER_DESC' | 'MUS_REQUIREMENT_ASC' | 'MUS_REQUIREMENT_DESC' | 'MYS_REQUIREMENT_ASC' | 'MYS_REQUIREMENT_DESC' | 'MOX_REQUIREMENT_ASC' | 'MOX_REQUIREMENT_DESC' | 'TYPE_ASC' | 'TYPE_DESC' | 'HANDS_ASC' | 'HANDS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `FamiliarModifier` values. */
export interface FamiliarModifiersConnection {
    /** A list of `FamiliarModifier` objects. */
    nodes: (FamiliarModifier | null)[];
    /** A list of edges which contains the `FamiliarModifier` and cursor to aid in pagination. */
    edges: FamiliarModifiersEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `FamiliarModifier` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'FamiliarModifiersConnection';
}
/** A `FamiliarModifier` edge in the connection. */
export interface FamiliarModifiersEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `FamiliarModifier` at the end of the edge. */
    node: (FamiliarModifier | null);
    __typename: 'FamiliarModifiersEdge';
}
/** Methods to use when ordering `FamiliarModifier`. */
export type FamiliarModifiersOrderBy = 'NATURAL' | 'FAMILIAR_ASC' | 'FAMILIAR_DESC' | 'MODIFIERS_ASC' | 'MODIFIERS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `FoldGroup` values. */
export interface FoldGroupsConnection {
    /** A list of `FoldGroup` objects. */
    nodes: (FoldGroup | null)[];
    /** A list of edges which contains the `FoldGroup` and cursor to aid in pagination. */
    edges: FoldGroupsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `FoldGroup` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'FoldGroupsConnection';
}
/** A `FoldGroup` edge in the connection. */
export interface FoldGroupsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `FoldGroup` at the end of the edge. */
    node: (FoldGroup | null);
    __typename: 'FoldGroupsEdge';
}
/** Methods to use when ordering `FoldGroup`. */
export type FoldGroupsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'DAMAGE_ASC' | 'DAMAGE_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `ItemModifier` values. */
export interface ItemModifiersConnection {
    /** A list of `ItemModifier` objects. */
    nodes: (ItemModifier | null)[];
    /** A list of edges which contains the `ItemModifier` and cursor to aid in pagination. */
    edges: ItemModifiersEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `ItemModifier` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'ItemModifiersConnection';
}
/** A `ItemModifier` edge in the connection. */
export interface ItemModifiersEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `ItemModifier` at the end of the edge. */
    node: (ItemModifier | null);
    __typename: 'ItemModifiersEdge';
}
/** Methods to use when ordering `ItemModifier`. */
export type ItemModifiersOrderBy = 'NATURAL' | 'ITEM_ASC' | 'ITEM_DESC' | 'MODIFIERS_ASC' | 'MODIFIERS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Item` values. */
export interface ItemsConnection {
    /** A list of `Item` objects. */
    nodes: (Item | null)[];
    /** A list of edges which contains the `Item` and cursor to aid in pagination. */
    edges: ItemsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Item` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'ItemsConnection';
}
/** A `Item` edge in the connection. */
export interface ItemsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Item` at the end of the edge. */
    node: (Item | null);
    __typename: 'ItemsEdge';
}
/** Methods to use when ordering `Item`. */
export type ItemsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'DESCID_ASC' | 'DESCID_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'USES_ASC' | 'USES_DESC' | 'QUEST_ASC' | 'QUEST_DESC' | 'GIFT_ASC' | 'GIFT_DESC' | 'TRADEABLE_ASC' | 'TRADEABLE_DESC' | 'DISCARDABLE_ASC' | 'DISCARDABLE_DESC' | 'AUTOSELL_ASC' | 'AUTOSELL_DESC' | 'PLURAL_ASC' | 'PLURAL_DESC' | 'AMBIGUOUS_ASC' | 'AMBIGUOUS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Location` values. */
export interface LocationsConnection {
    /** A list of `Location` objects. */
    nodes: (Location | null)[];
    /** A list of edges which contains the `Location` and cursor to aid in pagination. */
    edges: LocationsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Location` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'LocationsConnection';
}
/** A `Location` edge in the connection. */
export interface LocationsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Location` at the end of the edge. */
    node: (Location | null);
    __typename: 'LocationsEdge';
}
/** Methods to use when ordering `Location`. */
export type LocationsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'ZONE_ASC' | 'ZONE_DESC' | 'URL_ASC' | 'URL_DESC' | 'DIFFICULTY_ASC' | 'DIFFICULTY_DESC' | 'ENVIRONMENT_ASC' | 'ENVIRONMENT_DESC' | 'STAT_REQUIREMENT_ASC' | 'STAT_REQUIREMENT_DESC' | 'WATER_LEVEL_ASC' | 'WATER_LEVEL_DESC' | 'OVERDRUNK_ASC' | 'OVERDRUNK_DESC' | 'NOWANDER_ASC' | 'NOWANDER_DESC' | 'COMBAT_RATE_ASC' | 'COMBAT_RATE_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Meta` values. */
export interface MetasConnection {
    /** A list of `Meta` objects. */
    nodes: (Meta | null)[];
    /** A list of edges which contains the `Meta` and cursor to aid in pagination. */
    edges: MetasEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Meta` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'MetasConnection';
}
export interface Meta {
    lastUpdate: (Scalars['Datetime'] | null);
    __typename: 'Meta';
}
/** A `Meta` edge in the connection. */
export interface MetasEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Meta` at the end of the edge. */
    node: (Meta | null);
    __typename: 'MetasEdge';
}
/** Methods to use when ordering `Meta`. */
export type MetasOrderBy = 'NATURAL' | 'LAST_UPDATE_ASC' | 'LAST_UPDATE_DESC';
/** A connection to a list of `Monster` values. */
export interface MonstersConnection {
    /** A list of `Monster` objects. */
    nodes: (Monster | null)[];
    /** A list of edges which contains the `Monster` and cursor to aid in pagination. */
    edges: MonstersEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Monster` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'MonstersConnection';
}
/** A `Monster` edge in the connection. */
export interface MonstersEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Monster` at the end of the edge. */
    node: (Monster | null);
    __typename: 'MonstersEdge';
}
/** Methods to use when ordering `Monster`. */
export type MonstersOrderBy = 'NATURAL' | 'AMBIGUOUS_ASC' | 'AMBIGUOUS_DESC' | 'ARTICLE_ASC' | 'ARTICLE_DESC' | 'ATTACK_ASC' | 'ATTACK_DESC' | 'BOSS_ASC' | 'BOSS_DESC' | 'DEFENCE_ASC' | 'DEFENCE_DESC' | 'DRIPPY_ASC' | 'DRIPPY_DESC' | 'ELEMENT_ASC' | 'ELEMENT_DESC' | 'ELEMENTAL_ATTACK_ASC' | 'ELEMENTAL_ATTACK_DESC' | 'ELEMENTAL_DEFENCE_ASC' | 'ELEMENTAL_DEFENCE_DESC' | 'ELEMENTAL_RESISTANCE_ASC' | 'ELEMENTAL_RESISTANCE_DESC' | 'EXPERIENCE_ASC' | 'EXPERIENCE_DESC' | 'FREE_ASC' | 'FREE_DESC' | 'GHOST_ASC' | 'GHOST_DESC' | 'GROUP_SIZE_ASC' | 'GROUP_SIZE_DESC' | 'HP_ASC' | 'HP_DESC' | 'ID_ASC' | 'ID_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'INITIATIVE_ASC' | 'INITIATIVE_DESC' | 'ITEM_BLOCK_CHANCE_ASC' | 'ITEM_BLOCK_CHANCE_DESC' | 'LUCKY_ASC' | 'LUCKY_DESC' | 'MANUEL_ASC' | 'MANUEL_DESC' | 'MEAT_ASC' | 'MEAT_DESC' | 'MEAT_EXPRESSION_ASC' | 'MEAT_EXPRESSION_DESC' | 'MONSTER_LEVEL_MULTIPLIER_ASC' | 'MONSTER_LEVEL_MULTIPLIER_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'NOBANISH_ASC' | 'NOBANISH_DESC' | 'NOCOPY_ASC' | 'NOCOPY_DESC' | 'NOMANUEL_ASC' | 'NOMANUEL_DESC' | 'NOWANDER_ASC' | 'NOWANDER_DESC' | 'NOWISH_ASC' | 'NOWISH_DESC' | 'PHYLUM_ASC' | 'PHYLUM_DESC' | 'PHYSICAL_RESISTANCE_ASC' | 'PHYSICAL_RESISTANCE_DESC' | 'POISON_ASC' | 'POISON_DESC' | 'SCALING_ASC' | 'SCALING_DESC' | 'SCALING_CAP_ASC' | 'SCALING_CAP_DESC' | 'SCALING_FLOOR_ASC' | 'SCALING_FLOOR_DESC' | 'SKILL_BLOCK_CHANCE_ASC' | 'SKILL_BLOCK_CHANCE_DESC' | 'SNAKE_ASC' | 'SNAKE_DESC' | 'SPELL_BLOCK_CHANCE_ASC' | 'SPELL_BLOCK_CHANCE_DESC' | 'SPRINKLES_ASC' | 'SPRINKLES_DESC' | 'SUPERLIKELY_ASC' | 'SUPERLIKELY_DESC' | 'ULTRARARE_ASC' | 'ULTRARARE_DESC' | 'WANDERER_ASC' | 'WANDERER_DESC' | 'WIKI_ASC' | 'WIKI_DESC' | 'WISH_ASC' | 'WISH_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Outfit` values. */
export interface OutfitsConnection {
    /** A list of `Outfit` objects. */
    nodes: (Outfit | null)[];
    /** A list of edges which contains the `Outfit` and cursor to aid in pagination. */
    edges: OutfitsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Outfit` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'OutfitsConnection';
}
/** A `Outfit` edge in the connection. */
export interface OutfitsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Outfit` at the end of the edge. */
    node: (Outfit | null);
    __typename: 'OutfitsEdge';
}
/** Methods to use when ordering `Outfit`. */
export type OutfitsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Path` values. */
export interface PathsConnection {
    /** A list of `Path` objects. */
    nodes: (Path | null)[];
    /** A list of edges which contains the `Path` and cursor to aid in pagination. */
    edges: PathsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Path` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'PathsConnection';
}
/** A `Path` edge in the connection. */
export interface PathsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Path` at the end of the edge. */
    node: (Path | null);
    __typename: 'PathsEdge';
}
/** Methods to use when ordering `Path`. */
export type PathsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'ENUM_NAME_ASC' | 'ENUM_NAME_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'IS_AVATAR_ASC' | 'IS_AVATAR_DESC' | 'ARTICLE_ASC' | 'ARTICLE_DESC' | 'POINTS_PREFERENCE_ASC' | 'POINTS_PREFERENCE_DESC' | 'MAXIMUM_POINTS_ASC' | 'MAXIMUM_POINTS_DESC' | 'BUCKET_ASC' | 'BUCKET_DESC' | 'STOMACH_CAPACITY_ASC' | 'STOMACH_CAPACITY_DESC' | 'LIVER_CAPACITY_ASC' | 'LIVER_CAPACITY_DESC' | 'SPLEEN_CAPACITY_ASC' | 'SPLEEN_CAPACITY_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `SkillModifier` values. */
export interface SkillModifiersConnection {
    /** A list of `SkillModifier` objects. */
    nodes: (SkillModifier | null)[];
    /** A list of edges which contains the `SkillModifier` and cursor to aid in pagination. */
    edges: SkillModifiersEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `SkillModifier` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'SkillModifiersConnection';
}
export interface SkillModifier {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    skill: Scalars['Int'];
    modifiers: Scalars['JSON'];
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill: (Skill | null);
    __typename: 'SkillModifier';
}
export interface Skill {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId: Scalars['ID'];
    id: Scalars['Int'];
    name: Scalars['String'];
    image: Scalars['String'];
    tags: (SkillTag | null)[];
    mpCost: Scalars['Int'];
    duration: Scalars['Int'];
    guildLevel: (Scalars['Int'] | null);
    maxLevel: (Scalars['Int'] | null);
    permable: Scalars['Boolean'];
    ambiguous: Scalars['Boolean'];
    /** Reads a single `SkillModifier` that is related to this `Skill`. */
    skillModifierBySkill: (SkillModifier | null);
    __typename: 'Skill';
}
export type SkillTag = 'COMBAT' | 'EFFECT' | 'EXPRESSION' | 'HEAL' | 'ITEM' | 'NC' | 'OTHER' | 'PASSIVE' | 'SELF' | 'SONG' | 'WALK';
/** A `SkillModifier` edge in the connection. */
export interface SkillModifiersEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `SkillModifier` at the end of the edge. */
    node: (SkillModifier | null);
    __typename: 'SkillModifiersEdge';
}
/** Methods to use when ordering `SkillModifier`. */
export type SkillModifiersOrderBy = 'NATURAL' | 'SKILL_ASC' | 'SKILL_DESC' | 'MODIFIERS_ASC' | 'MODIFIERS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** A connection to a list of `Skill` values. */
export interface SkillsConnection {
    /** A list of `Skill` objects. */
    nodes: (Skill | null)[];
    /** A list of edges which contains the `Skill` and cursor to aid in pagination. */
    edges: SkillsEdge[];
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** The count of *all* `Skill` you could get from the connection. */
    totalCount: Scalars['Int'];
    __typename: 'SkillsConnection';
}
/** A `Skill` edge in the connection. */
export interface SkillsEdge {
    /** A cursor for use in pagination. */
    cursor: (Scalars['Cursor'] | null);
    /** The `Skill` at the end of the edge. */
    node: (Skill | null);
    __typename: 'SkillsEdge';
}
/** Methods to use when ordering `Skill`. */
export type SkillsOrderBy = 'NATURAL' | 'ID_ASC' | 'ID_DESC' | 'NAME_ASC' | 'NAME_DESC' | 'IMAGE_ASC' | 'IMAGE_DESC' | 'TAGS_ASC' | 'TAGS_DESC' | 'MP_COST_ASC' | 'MP_COST_DESC' | 'DURATION_ASC' | 'DURATION_DESC' | 'GUILD_LEVEL_ASC' | 'GUILD_LEVEL_DESC' | 'MAX_LEVEL_ASC' | 'MAX_LEVEL_DESC' | 'PERMABLE_ASC' | 'PERMABLE_DESC' | 'AMBIGUOUS_ASC' | 'AMBIGUOUS_DESC' | 'PRIMARY_KEY_ASC' | 'PRIMARY_KEY_DESC';
/** The root mutation type which contains root level fields which mutate data. */
export interface Mutation {
    /** Creates a single `Class`. */
    createClass: (CreateClassPayload | null);
    /** Creates a single `Consumable`. */
    createConsumable: (CreateConsumablePayload | null);
    /** Creates a single `EffectModifier`. */
    createEffectModifier: (CreateEffectModifierPayload | null);
    /** Creates a single `Effect`. */
    createEffect: (CreateEffectPayload | null);
    /** Creates a single `Equipment`. */
    createEquipment: (CreateEquipmentPayload | null);
    /** Creates a single `FamiliarModifier`. */
    createFamiliarModifier: (CreateFamiliarModifierPayload | null);
    /** Creates a single `Familiar`. */
    createFamiliar: (CreateFamiliarPayload | null);
    /** Creates a single `FoldGroup`. */
    createFoldGroup: (CreateFoldGroupPayload | null);
    /** Creates a single `Foldable`. */
    createFoldable: (CreateFoldablePayload | null);
    /** Creates a single `ItemModifier`. */
    createItemModifier: (CreateItemModifierPayload | null);
    /** Creates a single `Item`. */
    createItem: (CreateItemPayload | null);
    /** Creates a single `Location`. */
    createLocation: (CreateLocationPayload | null);
    /** Creates a single `Meta`. */
    createMeta: (CreateMetaPayload | null);
    /** Creates a single `MonsterDrop`. */
    createMonsterDrop: (CreateMonsterDropPayload | null);
    /** Creates a single `Monster`. */
    createMonster: (CreateMonsterPayload | null);
    /** Creates a single `NativeMonster`. */
    createNativeMonster: (CreateNativeMonsterPayload | null);
    /** Creates a single `OutfitEquipment`. */
    createOutfitEquipment: (CreateOutfitEquipmentPayload | null);
    /** Creates a single `OutfitTreat`. */
    createOutfitTreat: (CreateOutfitTreatPayload | null);
    /** Creates a single `Outfit`. */
    createOutfit: (CreateOutfitPayload | null);
    /** Creates a single `Path`. */
    createPath: (CreatePathPayload | null);
    /** Creates a single `SkillModifier`. */
    createSkillModifier: (CreateSkillModifierPayload | null);
    /** Creates a single `Skill`. */
    createSkill: (CreateSkillPayload | null);
    /** Updates a single `Class` using its globally unique id and a patch. */
    updateClass: (UpdateClassPayload | null);
    /** Updates a single `Class` using a unique key and a patch. */
    updateClassById: (UpdateClassPayload | null);
    /** Updates a single `Consumable` using its globally unique id and a patch. */
    updateConsumable: (UpdateConsumablePayload | null);
    /** Updates a single `Consumable` using a unique key and a patch. */
    updateConsumableById: (UpdateConsumablePayload | null);
    /** Updates a single `EffectModifier` using its globally unique id and a patch. */
    updateEffectModifier: (UpdateEffectModifierPayload | null);
    /** Updates a single `EffectModifier` using a unique key and a patch. */
    updateEffectModifierByEffect: (UpdateEffectModifierPayload | null);
    /** Updates a single `Effect` using its globally unique id and a patch. */
    updateEffect: (UpdateEffectPayload | null);
    /** Updates a single `Effect` using a unique key and a patch. */
    updateEffectById: (UpdateEffectPayload | null);
    /** Updates a single `Effect` using a unique key and a patch. */
    updateEffectByDescid: (UpdateEffectPayload | null);
    /** Updates a single `Equipment` using its globally unique id and a patch. */
    updateEquipment: (UpdateEquipmentPayload | null);
    /** Updates a single `Equipment` using a unique key and a patch. */
    updateEquipmentById: (UpdateEquipmentPayload | null);
    /** Updates a single `FamiliarModifier` using its globally unique id and a patch. */
    updateFamiliarModifier: (UpdateFamiliarModifierPayload | null);
    /** Updates a single `FamiliarModifier` using a unique key and a patch. */
    updateFamiliarModifierByFamiliar: (UpdateFamiliarModifierPayload | null);
    /** Updates a single `Familiar` using its globally unique id and a patch. */
    updateFamiliar: (UpdateFamiliarPayload | null);
    /** Updates a single `Familiar` using a unique key and a patch. */
    updateFamiliarById: (UpdateFamiliarPayload | null);
    /** Updates a single `FoldGroup` using its globally unique id and a patch. */
    updateFoldGroup: (UpdateFoldGroupPayload | null);
    /** Updates a single `FoldGroup` using a unique key and a patch. */
    updateFoldGroupById: (UpdateFoldGroupPayload | null);
    /** Updates a single `ItemModifier` using its globally unique id and a patch. */
    updateItemModifier: (UpdateItemModifierPayload | null);
    /** Updates a single `ItemModifier` using a unique key and a patch. */
    updateItemModifierByItem: (UpdateItemModifierPayload | null);
    /** Updates a single `Item` using its globally unique id and a patch. */
    updateItem: (UpdateItemPayload | null);
    /** Updates a single `Item` using a unique key and a patch. */
    updateItemById: (UpdateItemPayload | null);
    /** Updates a single `Item` using a unique key and a patch. */
    updateItemByDescid: (UpdateItemPayload | null);
    /** Updates a single `Location` using its globally unique id and a patch. */
    updateLocation: (UpdateLocationPayload | null);
    /** Updates a single `Location` using a unique key and a patch. */
    updateLocationByName: (UpdateLocationPayload | null);
    /** Updates a single `Monster` using its globally unique id and a patch. */
    updateMonster: (UpdateMonsterPayload | null);
    /** Updates a single `Monster` using a unique key and a patch. */
    updateMonsterById: (UpdateMonsterPayload | null);
    /** Updates a single `Outfit` using its globally unique id and a patch. */
    updateOutfit: (UpdateOutfitPayload | null);
    /** Updates a single `Outfit` using a unique key and a patch. */
    updateOutfitById: (UpdateOutfitPayload | null);
    /** Updates a single `Path` using its globally unique id and a patch. */
    updatePath: (UpdatePathPayload | null);
    /** Updates a single `Path` using a unique key and a patch. */
    updatePathById: (UpdatePathPayload | null);
    /** Updates a single `Path` using a unique key and a patch. */
    updatePathByImage: (UpdatePathPayload | null);
    /** Updates a single `SkillModifier` using its globally unique id and a patch. */
    updateSkillModifier: (UpdateSkillModifierPayload | null);
    /** Updates a single `SkillModifier` using a unique key and a patch. */
    updateSkillModifierBySkill: (UpdateSkillModifierPayload | null);
    /** Updates a single `Skill` using its globally unique id and a patch. */
    updateSkill: (UpdateSkillPayload | null);
    /** Updates a single `Skill` using a unique key and a patch. */
    updateSkillById: (UpdateSkillPayload | null);
    /** Deletes a single `Class` using its globally unique id. */
    deleteClass: (DeleteClassPayload | null);
    /** Deletes a single `Class` using a unique key. */
    deleteClassById: (DeleteClassPayload | null);
    /** Deletes a single `Consumable` using its globally unique id. */
    deleteConsumable: (DeleteConsumablePayload | null);
    /** Deletes a single `Consumable` using a unique key. */
    deleteConsumableById: (DeleteConsumablePayload | null);
    /** Deletes a single `EffectModifier` using its globally unique id. */
    deleteEffectModifier: (DeleteEffectModifierPayload | null);
    /** Deletes a single `EffectModifier` using a unique key. */
    deleteEffectModifierByEffect: (DeleteEffectModifierPayload | null);
    /** Deletes a single `Effect` using its globally unique id. */
    deleteEffect: (DeleteEffectPayload | null);
    /** Deletes a single `Effect` using a unique key. */
    deleteEffectById: (DeleteEffectPayload | null);
    /** Deletes a single `Effect` using a unique key. */
    deleteEffectByDescid: (DeleteEffectPayload | null);
    /** Deletes a single `Equipment` using its globally unique id. */
    deleteEquipment: (DeleteEquipmentPayload | null);
    /** Deletes a single `Equipment` using a unique key. */
    deleteEquipmentById: (DeleteEquipmentPayload | null);
    /** Deletes a single `FamiliarModifier` using its globally unique id. */
    deleteFamiliarModifier: (DeleteFamiliarModifierPayload | null);
    /** Deletes a single `FamiliarModifier` using a unique key. */
    deleteFamiliarModifierByFamiliar: (DeleteFamiliarModifierPayload | null);
    /** Deletes a single `Familiar` using its globally unique id. */
    deleteFamiliar: (DeleteFamiliarPayload | null);
    /** Deletes a single `Familiar` using a unique key. */
    deleteFamiliarById: (DeleteFamiliarPayload | null);
    /** Deletes a single `FoldGroup` using its globally unique id. */
    deleteFoldGroup: (DeleteFoldGroupPayload | null);
    /** Deletes a single `FoldGroup` using a unique key. */
    deleteFoldGroupById: (DeleteFoldGroupPayload | null);
    /** Deletes a single `ItemModifier` using its globally unique id. */
    deleteItemModifier: (DeleteItemModifierPayload | null);
    /** Deletes a single `ItemModifier` using a unique key. */
    deleteItemModifierByItem: (DeleteItemModifierPayload | null);
    /** Deletes a single `Item` using its globally unique id. */
    deleteItem: (DeleteItemPayload | null);
    /** Deletes a single `Item` using a unique key. */
    deleteItemById: (DeleteItemPayload | null);
    /** Deletes a single `Item` using a unique key. */
    deleteItemByDescid: (DeleteItemPayload | null);
    /** Deletes a single `Location` using its globally unique id. */
    deleteLocation: (DeleteLocationPayload | null);
    /** Deletes a single `Location` using a unique key. */
    deleteLocationByName: (DeleteLocationPayload | null);
    /** Deletes a single `Monster` using its globally unique id. */
    deleteMonster: (DeleteMonsterPayload | null);
    /** Deletes a single `Monster` using a unique key. */
    deleteMonsterById: (DeleteMonsterPayload | null);
    /** Deletes a single `Outfit` using its globally unique id. */
    deleteOutfit: (DeleteOutfitPayload | null);
    /** Deletes a single `Outfit` using a unique key. */
    deleteOutfitById: (DeleteOutfitPayload | null);
    /** Deletes a single `Path` using its globally unique id. */
    deletePath: (DeletePathPayload | null);
    /** Deletes a single `Path` using a unique key. */
    deletePathById: (DeletePathPayload | null);
    /** Deletes a single `Path` using a unique key. */
    deletePathByImage: (DeletePathPayload | null);
    /** Deletes a single `SkillModifier` using its globally unique id. */
    deleteSkillModifier: (DeleteSkillModifierPayload | null);
    /** Deletes a single `SkillModifier` using a unique key. */
    deleteSkillModifierBySkill: (DeleteSkillModifierPayload | null);
    /** Deletes a single `Skill` using its globally unique id. */
    deleteSkill: (DeleteSkillPayload | null);
    /** Deletes a single `Skill` using a unique key. */
    deleteSkillById: (DeleteSkillPayload | null);
    __typename: 'Mutation';
}
/** The output of our create `Class` mutation. */
export interface CreateClassPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Class` that was created by this mutation. */
    class: (Class | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath: (Path | null);
    /** An edge for our `Class`. May be used by Relay 1. */
    classEdge: (ClassesEdge | null);
    __typename: 'CreateClassPayload';
}
/** The output of our create `Consumable` mutation. */
export interface CreateConsumablePayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Consumable` that was created by this mutation. */
    consumable: (Consumable | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById: (Item | null);
    /** An edge for our `Consumable`. May be used by Relay 1. */
    consumableEdge: (ConsumablesEdge | null);
    __typename: 'CreateConsumablePayload';
}
/** The output of our create `EffectModifier` mutation. */
export interface CreateEffectModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `EffectModifier` that was created by this mutation. */
    effectModifier: (EffectModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect: (Effect | null);
    /** An edge for our `EffectModifier`. May be used by Relay 1. */
    effectModifierEdge: (EffectModifiersEdge | null);
    __typename: 'CreateEffectModifierPayload';
}
/** The output of our create `Effect` mutation. */
export interface CreateEffectPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Effect` that was created by this mutation. */
    effect: (Effect | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Effect`. May be used by Relay 1. */
    effectEdge: (EffectsEdge | null);
    __typename: 'CreateEffectPayload';
}
/** The output of our create `Equipment` mutation. */
export interface CreateEquipmentPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Equipment` that was created by this mutation. */
    equipment: (Equipment | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById: (Item | null);
    /** An edge for our `Equipment`. May be used by Relay 1. */
    equipmentEdge: (EquipmentEdge | null);
    __typename: 'CreateEquipmentPayload';
}
/** The output of our create `FamiliarModifier` mutation. */
export interface CreateFamiliarModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `FamiliarModifier` that was created by this mutation. */
    familiarModifier: (FamiliarModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar: (Familiar | null);
    /** An edge for our `FamiliarModifier`. May be used by Relay 1. */
    familiarModifierEdge: (FamiliarModifiersEdge | null);
    __typename: 'CreateFamiliarModifierPayload';
}
/** The output of our create `Familiar` mutation. */
export interface CreateFamiliarPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Familiar` that was created by this mutation. */
    familiar: (Familiar | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva: (Item | null);
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment: (Item | null);
    /** An edge for our `Familiar`. May be used by Relay 1. */
    familiarEdge: (FamiliarsEdge | null);
    __typename: 'CreateFamiliarPayload';
}
/** The output of our create `FoldGroup` mutation. */
export interface CreateFoldGroupPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `FoldGroup` that was created by this mutation. */
    foldGroup: (FoldGroup | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `FoldGroup`. May be used by Relay 1. */
    foldGroupEdge: (FoldGroupsEdge | null);
    __typename: 'CreateFoldGroupPayload';
}
/** The output of our create `Foldable` mutation. */
export interface CreateFoldablePayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Foldable` that was created by this mutation. */
    foldable: (Foldable | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `FoldGroup` that is related to this `Foldable`. */
    foldGroupByFoldGroup: (FoldGroup | null);
    /** Reads a single `Item` that is related to this `Foldable`. */
    itemByItem: (Item | null);
    /** An edge for our `Foldable`. May be used by Relay 1. */
    foldableEdge: (FoldablesEdge | null);
    __typename: 'CreateFoldablePayload';
}
/** The output of our create `ItemModifier` mutation. */
export interface CreateItemModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `ItemModifier` that was created by this mutation. */
    itemModifier: (ItemModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem: (Item | null);
    /** An edge for our `ItemModifier`. May be used by Relay 1. */
    itemModifierEdge: (ItemModifiersEdge | null);
    __typename: 'CreateItemModifierPayload';
}
/** The output of our create `Item` mutation. */
export interface CreateItemPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Item` that was created by this mutation. */
    item: (Item | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Item`. May be used by Relay 1. */
    itemEdge: (ItemsEdge | null);
    __typename: 'CreateItemPayload';
}
/** The output of our create `Location` mutation. */
export interface CreateLocationPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Location` that was created by this mutation. */
    location: (Location | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Location`. May be used by Relay 1. */
    locationEdge: (LocationsEdge | null);
    __typename: 'CreateLocationPayload';
}
/** The output of our create `Meta` mutation. */
export interface CreateMetaPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Meta` that was created by this mutation. */
    meta: (Meta | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Meta`. May be used by Relay 1. */
    metaEdge: (MetasEdge | null);
    __typename: 'CreateMetaPayload';
}
/** The output of our create `MonsterDrop` mutation. */
export interface CreateMonsterDropPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `MonsterDrop` that was created by this mutation. */
    monsterDrop: (MonsterDrop | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Monster` that is related to this `MonsterDrop`. */
    monsterByMonster: (Monster | null);
    /** Reads a single `Item` that is related to this `MonsterDrop`. */
    itemByItem: (Item | null);
    /** An edge for our `MonsterDrop`. May be used by Relay 1. */
    monsterDropEdge: (MonsterDropsEdge | null);
    __typename: 'CreateMonsterDropPayload';
}
/** The output of our create `Monster` mutation. */
export interface CreateMonsterPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Monster` that was created by this mutation. */
    monster: (Monster | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Monster`. May be used by Relay 1. */
    monsterEdge: (MonstersEdge | null);
    __typename: 'CreateMonsterPayload';
}
/** The output of our create `NativeMonster` mutation. */
export interface CreateNativeMonsterPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `NativeMonster` that was created by this mutation. */
    nativeMonster: (NativeMonster | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Location` that is related to this `NativeMonster`. */
    locationByLocation: (Location | null);
    /** Reads a single `Monster` that is related to this `NativeMonster`. */
    monsterByMonster: (Monster | null);
    /** An edge for our `NativeMonster`. May be used by Relay 1. */
    nativeMonsterEdge: (NativeMonstersEdge | null);
    __typename: 'CreateNativeMonsterPayload';
}
/** The output of our create `OutfitEquipment` mutation. */
export interface CreateOutfitEquipmentPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `OutfitEquipment` that was created by this mutation. */
    outfitEquipment: (OutfitEquipment | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Outfit` that is related to this `OutfitEquipment`. */
    outfitByOutfit: (Outfit | null);
    /** Reads a single `Item` that is related to this `OutfitEquipment`. */
    itemByEquipment: (Item | null);
    /** An edge for our `OutfitEquipment`. May be used by Relay 1. */
    outfitEquipmentEdge: (OutfitEquipmentsEdge | null);
    __typename: 'CreateOutfitEquipmentPayload';
}
/** The output of our create `OutfitTreat` mutation. */
export interface CreateOutfitTreatPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `OutfitTreat` that was created by this mutation. */
    outfitTreat: (OutfitTreat | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Outfit` that is related to this `OutfitTreat`. */
    outfitByOutfit: (Outfit | null);
    /** Reads a single `Item` that is related to this `OutfitTreat`. */
    itemByItem: (Item | null);
    /** An edge for our `OutfitTreat`. May be used by Relay 1. */
    outfitTreatEdge: (OutfitTreatsEdge | null);
    __typename: 'CreateOutfitTreatPayload';
}
/** The output of our create `Outfit` mutation. */
export interface CreateOutfitPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Outfit` that was created by this mutation. */
    outfit: (Outfit | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Outfit`. May be used by Relay 1. */
    outfitEdge: (OutfitsEdge | null);
    __typename: 'CreateOutfitPayload';
}
/** The output of our create `Path` mutation. */
export interface CreatePathPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Path` that was created by this mutation. */
    path: (Path | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Path`. May be used by Relay 1. */
    pathEdge: (PathsEdge | null);
    __typename: 'CreatePathPayload';
}
/** The output of our create `SkillModifier` mutation. */
export interface CreateSkillModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `SkillModifier` that was created by this mutation. */
    skillModifier: (SkillModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill: (Skill | null);
    /** An edge for our `SkillModifier`. May be used by Relay 1. */
    skillModifierEdge: (SkillModifiersEdge | null);
    __typename: 'CreateSkillModifierPayload';
}
/** The output of our create `Skill` mutation. */
export interface CreateSkillPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Skill` that was created by this mutation. */
    skill: (Skill | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Skill`. May be used by Relay 1. */
    skillEdge: (SkillsEdge | null);
    __typename: 'CreateSkillPayload';
}
/** The output of our update `Class` mutation. */
export interface UpdateClassPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Class` that was updated by this mutation. */
    class: (Class | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath: (Path | null);
    /** An edge for our `Class`. May be used by Relay 1. */
    classEdge: (ClassesEdge | null);
    __typename: 'UpdateClassPayload';
}
/** The output of our update `Consumable` mutation. */
export interface UpdateConsumablePayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Consumable` that was updated by this mutation. */
    consumable: (Consumable | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById: (Item | null);
    /** An edge for our `Consumable`. May be used by Relay 1. */
    consumableEdge: (ConsumablesEdge | null);
    __typename: 'UpdateConsumablePayload';
}
/** The output of our update `EffectModifier` mutation. */
export interface UpdateEffectModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `EffectModifier` that was updated by this mutation. */
    effectModifier: (EffectModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect: (Effect | null);
    /** An edge for our `EffectModifier`. May be used by Relay 1. */
    effectModifierEdge: (EffectModifiersEdge | null);
    __typename: 'UpdateEffectModifierPayload';
}
/** The output of our update `Effect` mutation. */
export interface UpdateEffectPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Effect` that was updated by this mutation. */
    effect: (Effect | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Effect`. May be used by Relay 1. */
    effectEdge: (EffectsEdge | null);
    __typename: 'UpdateEffectPayload';
}
/** The output of our update `Equipment` mutation. */
export interface UpdateEquipmentPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Equipment` that was updated by this mutation. */
    equipment: (Equipment | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById: (Item | null);
    /** An edge for our `Equipment`. May be used by Relay 1. */
    equipmentEdge: (EquipmentEdge | null);
    __typename: 'UpdateEquipmentPayload';
}
/** The output of our update `FamiliarModifier` mutation. */
export interface UpdateFamiliarModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `FamiliarModifier` that was updated by this mutation. */
    familiarModifier: (FamiliarModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar: (Familiar | null);
    /** An edge for our `FamiliarModifier`. May be used by Relay 1. */
    familiarModifierEdge: (FamiliarModifiersEdge | null);
    __typename: 'UpdateFamiliarModifierPayload';
}
/** The output of our update `Familiar` mutation. */
export interface UpdateFamiliarPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Familiar` that was updated by this mutation. */
    familiar: (Familiar | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva: (Item | null);
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment: (Item | null);
    /** An edge for our `Familiar`. May be used by Relay 1. */
    familiarEdge: (FamiliarsEdge | null);
    __typename: 'UpdateFamiliarPayload';
}
/** The output of our update `FoldGroup` mutation. */
export interface UpdateFoldGroupPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `FoldGroup` that was updated by this mutation. */
    foldGroup: (FoldGroup | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `FoldGroup`. May be used by Relay 1. */
    foldGroupEdge: (FoldGroupsEdge | null);
    __typename: 'UpdateFoldGroupPayload';
}
/** The output of our update `ItemModifier` mutation. */
export interface UpdateItemModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `ItemModifier` that was updated by this mutation. */
    itemModifier: (ItemModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem: (Item | null);
    /** An edge for our `ItemModifier`. May be used by Relay 1. */
    itemModifierEdge: (ItemModifiersEdge | null);
    __typename: 'UpdateItemModifierPayload';
}
/** The output of our update `Item` mutation. */
export interface UpdateItemPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Item` that was updated by this mutation. */
    item: (Item | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Item`. May be used by Relay 1. */
    itemEdge: (ItemsEdge | null);
    __typename: 'UpdateItemPayload';
}
/** The output of our update `Location` mutation. */
export interface UpdateLocationPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Location` that was updated by this mutation. */
    location: (Location | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Location`. May be used by Relay 1. */
    locationEdge: (LocationsEdge | null);
    __typename: 'UpdateLocationPayload';
}
/** The output of our update `Monster` mutation. */
export interface UpdateMonsterPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Monster` that was updated by this mutation. */
    monster: (Monster | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Monster`. May be used by Relay 1. */
    monsterEdge: (MonstersEdge | null);
    __typename: 'UpdateMonsterPayload';
}
/** The output of our update `Outfit` mutation. */
export interface UpdateOutfitPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Outfit` that was updated by this mutation. */
    outfit: (Outfit | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Outfit`. May be used by Relay 1. */
    outfitEdge: (OutfitsEdge | null);
    __typename: 'UpdateOutfitPayload';
}
/** The output of our update `Path` mutation. */
export interface UpdatePathPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Path` that was updated by this mutation. */
    path: (Path | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Path`. May be used by Relay 1. */
    pathEdge: (PathsEdge | null);
    __typename: 'UpdatePathPayload';
}
/** The output of our update `SkillModifier` mutation. */
export interface UpdateSkillModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `SkillModifier` that was updated by this mutation. */
    skillModifier: (SkillModifier | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill: (Skill | null);
    /** An edge for our `SkillModifier`. May be used by Relay 1. */
    skillModifierEdge: (SkillModifiersEdge | null);
    __typename: 'UpdateSkillModifierPayload';
}
/** The output of our update `Skill` mutation. */
export interface UpdateSkillPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Skill` that was updated by this mutation. */
    skill: (Skill | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Skill`. May be used by Relay 1. */
    skillEdge: (SkillsEdge | null);
    __typename: 'UpdateSkillPayload';
}
/** The output of our delete `Class` mutation. */
export interface DeleteClassPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Class` that was deleted by this mutation. */
    class: (Class | null);
    deletedClassId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath: (Path | null);
    /** An edge for our `Class`. May be used by Relay 1. */
    classEdge: (ClassesEdge | null);
    __typename: 'DeleteClassPayload';
}
/** The output of our delete `Consumable` mutation. */
export interface DeleteConsumablePayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Consumable` that was deleted by this mutation. */
    consumable: (Consumable | null);
    deletedConsumableId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById: (Item | null);
    /** An edge for our `Consumable`. May be used by Relay 1. */
    consumableEdge: (ConsumablesEdge | null);
    __typename: 'DeleteConsumablePayload';
}
/** The output of our delete `EffectModifier` mutation. */
export interface DeleteEffectModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `EffectModifier` that was deleted by this mutation. */
    effectModifier: (EffectModifier | null);
    deletedEffectModifierId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect: (Effect | null);
    /** An edge for our `EffectModifier`. May be used by Relay 1. */
    effectModifierEdge: (EffectModifiersEdge | null);
    __typename: 'DeleteEffectModifierPayload';
}
/** The output of our delete `Effect` mutation. */
export interface DeleteEffectPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Effect` that was deleted by this mutation. */
    effect: (Effect | null);
    deletedEffectId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Effect`. May be used by Relay 1. */
    effectEdge: (EffectsEdge | null);
    __typename: 'DeleteEffectPayload';
}
/** The output of our delete `Equipment` mutation. */
export interface DeleteEquipmentPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Equipment` that was deleted by this mutation. */
    equipment: (Equipment | null);
    deletedEquipmentId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById: (Item | null);
    /** An edge for our `Equipment`. May be used by Relay 1. */
    equipmentEdge: (EquipmentEdge | null);
    __typename: 'DeleteEquipmentPayload';
}
/** The output of our delete `FamiliarModifier` mutation. */
export interface DeleteFamiliarModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `FamiliarModifier` that was deleted by this mutation. */
    familiarModifier: (FamiliarModifier | null);
    deletedFamiliarModifierId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar: (Familiar | null);
    /** An edge for our `FamiliarModifier`. May be used by Relay 1. */
    familiarModifierEdge: (FamiliarModifiersEdge | null);
    __typename: 'DeleteFamiliarModifierPayload';
}
/** The output of our delete `Familiar` mutation. */
export interface DeleteFamiliarPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Familiar` that was deleted by this mutation. */
    familiar: (Familiar | null);
    deletedFamiliarId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva: (Item | null);
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment: (Item | null);
    /** An edge for our `Familiar`. May be used by Relay 1. */
    familiarEdge: (FamiliarsEdge | null);
    __typename: 'DeleteFamiliarPayload';
}
/** The output of our delete `FoldGroup` mutation. */
export interface DeleteFoldGroupPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `FoldGroup` that was deleted by this mutation. */
    foldGroup: (FoldGroup | null);
    deletedFoldGroupId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `FoldGroup`. May be used by Relay 1. */
    foldGroupEdge: (FoldGroupsEdge | null);
    __typename: 'DeleteFoldGroupPayload';
}
/** The output of our delete `ItemModifier` mutation. */
export interface DeleteItemModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `ItemModifier` that was deleted by this mutation. */
    itemModifier: (ItemModifier | null);
    deletedItemModifierId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem: (Item | null);
    /** An edge for our `ItemModifier`. May be used by Relay 1. */
    itemModifierEdge: (ItemModifiersEdge | null);
    __typename: 'DeleteItemModifierPayload';
}
/** The output of our delete `Item` mutation. */
export interface DeleteItemPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Item` that was deleted by this mutation. */
    item: (Item | null);
    deletedItemId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Item`. May be used by Relay 1. */
    itemEdge: (ItemsEdge | null);
    __typename: 'DeleteItemPayload';
}
/** The output of our delete `Location` mutation. */
export interface DeleteLocationPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Location` that was deleted by this mutation. */
    location: (Location | null);
    deletedLocationId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Location`. May be used by Relay 1. */
    locationEdge: (LocationsEdge | null);
    __typename: 'DeleteLocationPayload';
}
/** The output of our delete `Monster` mutation. */
export interface DeleteMonsterPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Monster` that was deleted by this mutation. */
    monster: (Monster | null);
    deletedMonsterId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Monster`. May be used by Relay 1. */
    monsterEdge: (MonstersEdge | null);
    __typename: 'DeleteMonsterPayload';
}
/** The output of our delete `Outfit` mutation. */
export interface DeleteOutfitPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Outfit` that was deleted by this mutation. */
    outfit: (Outfit | null);
    deletedOutfitId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Outfit`. May be used by Relay 1. */
    outfitEdge: (OutfitsEdge | null);
    __typename: 'DeleteOutfitPayload';
}
/** The output of our delete `Path` mutation. */
export interface DeletePathPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Path` that was deleted by this mutation. */
    path: (Path | null);
    deletedPathId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Path`. May be used by Relay 1. */
    pathEdge: (PathsEdge | null);
    __typename: 'DeletePathPayload';
}
/** The output of our delete `SkillModifier` mutation. */
export interface DeleteSkillModifierPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `SkillModifier` that was deleted by this mutation. */
    skillModifier: (SkillModifier | null);
    deletedSkillModifierId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill: (Skill | null);
    /** An edge for our `SkillModifier`. May be used by Relay 1. */
    skillModifierEdge: (SkillModifiersEdge | null);
    __typename: 'DeleteSkillModifierPayload';
}
/** The output of our delete `Skill` mutation. */
export interface DeleteSkillPayload {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId: (Scalars['String'] | null);
    /** The `Skill` that was deleted by this mutation. */
    skill: (Skill | null);
    deletedSkillId: (Scalars['ID'] | null);
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query: (Query | null);
    /** An edge for our `Skill`. May be used by Relay 1. */
    skillEdge: (SkillsEdge | null);
    __typename: 'DeleteSkillPayload';
}
/** The root query type which gives access points into the data universe. */
export interface QueryGenqlSelection {
    /**
     * Exposes the root query type nested one level down. This is helpful for Relay 1
     * which can only query top level fields if they are in a particular form.
     */
    query?: QueryGenqlSelection;
    /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
    nodeId?: boolean | number;
    /** Fetches an object given its globally unique `ID`. */
    node?: (NodeGenqlSelection & {
        __args: {
            /** The globally unique `ID`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads and enables pagination through a set of `Class`. */
    allClasses?: (ClassesConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Class`. */
            orderBy?: (ClassesOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (ClassCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Consumable`. */
    allConsumables?: (ConsumablesConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Consumable`. */
            orderBy?: (ConsumablesOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (ConsumableCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `EffectModifier`. */
    allEffectModifiers?: (EffectModifiersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `EffectModifier`. */
            orderBy?: (EffectModifiersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (EffectModifierCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Effect`. */
    allEffects?: (EffectsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Effect`. */
            orderBy?: (EffectsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (EffectCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Equipment`. */
    allEquipment?: (EquipmentConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Equipment`. */
            orderBy?: (EquipmentOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (EquipmentCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `FamiliarModifier`. */
    allFamiliarModifiers?: (FamiliarModifiersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `FamiliarModifier`. */
            orderBy?: (FamiliarModifiersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FamiliarModifierCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Familiar`. */
    allFamiliars?: (FamiliarsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Familiar`. */
            orderBy?: (FamiliarsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FamiliarCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `FoldGroup`. */
    allFoldGroups?: (FoldGroupsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `FoldGroup`. */
            orderBy?: (FoldGroupsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FoldGroupCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Foldable`. */
    allFoldables?: (FoldablesConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Foldable`. */
            orderBy?: (FoldablesOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FoldableCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `ItemModifier`. */
    allItemModifiers?: (ItemModifiersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `ItemModifier`. */
            orderBy?: (ItemModifiersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (ItemModifierCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Item`. */
    allItems?: (ItemsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Item`. */
            orderBy?: (ItemsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (ItemCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Location`. */
    allLocations?: (LocationsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Location`. */
            orderBy?: (LocationsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (LocationCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Meta`. */
    allMetas?: (MetasConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Meta`. */
            orderBy?: (MetasOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (MetaCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `MonsterDrop`. */
    allMonsterDrops?: (MonsterDropsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `MonsterDrop`. */
            orderBy?: (MonsterDropsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (MonsterDropCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Monster`. */
    allMonsters?: (MonstersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Monster`. */
            orderBy?: (MonstersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (MonsterCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `NativeMonster`. */
    allNativeMonsters?: (NativeMonstersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `NativeMonster`. */
            orderBy?: (NativeMonstersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (NativeMonsterCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `OutfitEquipment`. */
    allOutfitEquipments?: (OutfitEquipmentsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `OutfitEquipment`. */
            orderBy?: (OutfitEquipmentsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (OutfitEquipmentCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `OutfitTreat`. */
    allOutfitTreats?: (OutfitTreatsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `OutfitTreat`. */
            orderBy?: (OutfitTreatsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (OutfitTreatCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Outfit`. */
    allOutfits?: (OutfitsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Outfit`. */
            orderBy?: (OutfitsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (OutfitCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Path`. */
    allPaths?: (PathsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Path`. */
            orderBy?: (PathsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (PathCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `SkillModifier`. */
    allSkillModifiers?: (SkillModifiersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `SkillModifier`. */
            orderBy?: (SkillModifiersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (SkillModifierCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Skill`. */
    allSkills?: (SkillsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Skill`. */
            orderBy?: (SkillsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (SkillCondition | null);
        };
    });
    classById?: (ClassGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    consumableById?: (ConsumableGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    effectModifierByEffect?: (EffectModifierGenqlSelection & {
        __args: {
            effect: Scalars['Int'];
        };
    });
    effectById?: (EffectGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    effectByDescid?: (EffectGenqlSelection & {
        __args: {
            descid: Scalars['String'];
        };
    });
    equipmentById?: (EquipmentGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    familiarModifierByFamiliar?: (FamiliarModifierGenqlSelection & {
        __args: {
            familiar: Scalars['Int'];
        };
    });
    familiarById?: (FamiliarGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    foldGroupById?: (FoldGroupGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    itemModifierByItem?: (ItemModifierGenqlSelection & {
        __args: {
            item: Scalars['Int'];
        };
    });
    itemById?: (ItemGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    itemByDescid?: (ItemGenqlSelection & {
        __args: {
            descid: Scalars['String'];
        };
    });
    locationByName?: (LocationGenqlSelection & {
        __args: {
            name: Scalars['String'];
        };
    });
    monsterById?: (MonsterGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    outfitById?: (OutfitGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    pathById?: (PathGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    pathByImage?: (PathGenqlSelection & {
        __args: {
            image: Scalars['String'];
        };
    });
    skillModifierBySkill?: (SkillModifierGenqlSelection & {
        __args: {
            skill: Scalars['Int'];
        };
    });
    skillById?: (SkillGenqlSelection & {
        __args: {
            id: Scalars['Int'];
        };
    });
    /** Reads a single `Class` using its globally unique `ID`. */
    class?: (ClassGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Class`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Consumable` using its globally unique `ID`. */
    consumable?: (ConsumableGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Consumable`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `EffectModifier` using its globally unique `ID`. */
    effectModifier?: (EffectModifierGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `EffectModifier`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Effect` using its globally unique `ID`. */
    effect?: (EffectGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Effect`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Equipment` using its globally unique `ID`. */
    equipment?: (EquipmentGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Equipment`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `FamiliarModifier` using its globally unique `ID`. */
    familiarModifier?: (FamiliarModifierGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `FamiliarModifier`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Familiar` using its globally unique `ID`. */
    familiar?: (FamiliarGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Familiar`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `FoldGroup` using its globally unique `ID`. */
    foldGroup?: (FoldGroupGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `FoldGroup`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `ItemModifier` using its globally unique `ID`. */
    itemModifier?: (ItemModifierGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `ItemModifier`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Item` using its globally unique `ID`. */
    item?: (ItemGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Item`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Location` using its globally unique `ID`. */
    location?: (LocationGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Location`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Monster` using its globally unique `ID`. */
    monster?: (MonsterGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Monster`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Outfit` using its globally unique `ID`. */
    outfit?: (OutfitGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Outfit`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Path` using its globally unique `ID`. */
    path?: (PathGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Path`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `SkillModifier` using its globally unique `ID`. */
    skillModifier?: (SkillModifierGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `SkillModifier`. */
            nodeId: Scalars['ID'];
        };
    });
    /** Reads a single `Skill` using its globally unique `ID`. */
    skill?: (SkillGenqlSelection & {
        __args: {
            /** The globally unique `ID` to be used in selecting a single `Skill`. */
            nodeId: Scalars['ID'];
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** An object with a globally unique `ID`. */
export interface NodeGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    on_Query?: QueryGenqlSelection;
    on_Class?: ClassGenqlSelection;
    on_Path?: PathGenqlSelection;
    on_Consumable?: ConsumableGenqlSelection;
    on_Item?: ItemGenqlSelection;
    on_Equipment?: EquipmentGenqlSelection;
    on_Familiar?: FamiliarGenqlSelection;
    on_FamiliarModifier?: FamiliarModifierGenqlSelection;
    on_Monster?: MonsterGenqlSelection;
    on_Location?: LocationGenqlSelection;
    on_Outfit?: OutfitGenqlSelection;
    on_FoldGroup?: FoldGroupGenqlSelection;
    on_ItemModifier?: ItemModifierGenqlSelection;
    on_EffectModifier?: EffectModifierGenqlSelection;
    on_Effect?: EffectGenqlSelection;
    on_SkillModifier?: SkillModifierGenqlSelection;
    on_Skill?: SkillGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A connection to a list of `Class` values. */
export interface ClassesConnectionGenqlSelection {
    /** A list of `Class` objects. */
    nodes?: ClassGenqlSelection;
    /** A list of edges which contains the `Class` and cursor to aid in pagination. */
    edges?: ClassesEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Class` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface ClassGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    enumName?: boolean | number;
    image?: boolean | number;
    primeStatIndex?: boolean | number;
    path?: boolean | number;
    stun?: boolean | number;
    stomachCapacity?: boolean | number;
    liverCapacity?: boolean | number;
    spleenCapacity?: boolean | number;
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath?: PathGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface PathGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    enumName?: boolean | number;
    image?: boolean | number;
    isAvatar?: boolean | number;
    article?: boolean | number;
    pointsPreference?: boolean | number;
    maximumPoints?: boolean | number;
    bucket?: boolean | number;
    stomachCapacity?: boolean | number;
    liverCapacity?: boolean | number;
    spleenCapacity?: boolean | number;
    /** Reads and enables pagination through a set of `Class`. */
    classesByPath?: (ClassesConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Class`. */
            orderBy?: (ClassesOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (ClassCondition | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Class` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface ClassCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `enumName` field. */
    enumName?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `primeStatIndex` field. */
    primeStatIndex?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `path` field. */
    path?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `stun` field. */
    stun?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `stomachCapacity` field. */
    stomachCapacity?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `liverCapacity` field. */
    liverCapacity?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `spleenCapacity` field. */
    spleenCapacity?: (Scalars['Int'] | null);
}
/** A `Class` edge in the connection. */
export interface ClassesEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Class` at the end of the edge. */
    node?: ClassGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** Information about pagination in a connection. */
export interface PageInfoGenqlSelection {
    /** When paginating forwards, are there more items? */
    hasNextPage?: boolean | number;
    /** When paginating backwards, are there more items? */
    hasPreviousPage?: boolean | number;
    /** When paginating backwards, the cursor to continue. */
    startCursor?: boolean | number;
    /** When paginating forwards, the cursor to continue. */
    endCursor?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A connection to a list of `Consumable` values. */
export interface ConsumablesConnectionGenqlSelection {
    /** A list of `Consumable` objects. */
    nodes?: ConsumableGenqlSelection;
    /** A list of edges which contains the `Consumable` and cursor to aid in pagination. */
    edges?: ConsumablesEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Consumable` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface ConsumableGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    stomach?: boolean | number;
    liver?: boolean | number;
    spleen?: boolean | number;
    levelRequirement?: boolean | number;
    quality?: boolean | number;
    adventureRange?: boolean | number;
    adventures?: boolean | number;
    muscle?: boolean | number;
    muscleRange?: boolean | number;
    mysticality?: boolean | number;
    mysticalityRange?: boolean | number;
    moxie?: boolean | number;
    moxieRange?: boolean | number;
    notes?: boolean | number;
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface ItemGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    descid?: boolean | number;
    image?: boolean | number;
    uses?: boolean | number;
    quest?: boolean | number;
    gift?: boolean | number;
    tradeable?: boolean | number;
    discardable?: boolean | number;
    autosell?: boolean | number;
    plural?: boolean | number;
    ambiguous?: boolean | number;
    /** Reads a single `Equipment` that is related to this `Item`. */
    equipmentById?: EquipmentGenqlSelection;
    /** Reads a single `Consumable` that is related to this `Item`. */
    consumableById?: ConsumableGenqlSelection;
    /** Reads and enables pagination through a set of `Familiar`. */
    familiarsByLarva?: (FamiliarsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Familiar`. */
            orderBy?: (FamiliarsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FamiliarCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Familiar`. */
    familiarsByEquipment?: (FamiliarsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Familiar`. */
            orderBy?: (FamiliarsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FamiliarCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `MonsterDrop`. */
    monsterDropsByItem?: (MonsterDropsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `MonsterDrop`. */
            orderBy?: (MonsterDropsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (MonsterDropCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `OutfitEquipment`. */
    outfitEquipmentsByEquipment?: (OutfitEquipmentsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `OutfitEquipment`. */
            orderBy?: (OutfitEquipmentsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (OutfitEquipmentCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `OutfitTreat`. */
    outfitTreatsByItem?: (OutfitTreatsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `OutfitTreat`. */
            orderBy?: (OutfitTreatsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (OutfitTreatCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `Foldable`. */
    foldablesByItem?: (FoldablesConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Foldable`. */
            orderBy?: (FoldablesOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FoldableCondition | null);
        };
    });
    /** Reads a single `ItemModifier` that is related to this `Item`. */
    itemModifierByItem?: ItemModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface EquipmentGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    power?: boolean | number;
    musRequirement?: boolean | number;
    mysRequirement?: boolean | number;
    moxRequirement?: boolean | number;
    type?: boolean | number;
    hands?: boolean | number;
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A connection to a list of `Familiar` values. */
export interface FamiliarsConnectionGenqlSelection {
    /** A list of `Familiar` objects. */
    nodes?: FamiliarGenqlSelection;
    /** A list of edges which contains the `Familiar` and cursor to aid in pagination. */
    edges?: FamiliarsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Familiar` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface FamiliarGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    image?: boolean | number;
    categories?: boolean | number;
    larva?: boolean | number;
    equipment?: boolean | number;
    cageMatch?: boolean | number;
    scavengerHunt?: boolean | number;
    obstacleCourse?: boolean | number;
    hideAndSeek?: boolean | number;
    attributes?: boolean | number;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva?: ItemGenqlSelection;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment?: ItemGenqlSelection;
    /** Reads a single `FamiliarModifier` that is related to this `Familiar`. */
    familiarModifierByFamiliar?: FamiliarModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface FamiliarModifierGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    familiar?: boolean | number;
    modifiers?: boolean | number;
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar?: FamiliarGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Familiar` edge in the connection. */
export interface FamiliarsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Familiar` at the end of the edge. */
    node?: FamiliarGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `Familiar` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface FamiliarCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `categories` field. */
    categories?: ((FamiliarCategory | null)[] | null);
    /** Checks for equality with the object’s `larva` field. */
    larva?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `equipment` field. */
    equipment?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `cageMatch` field. */
    cageMatch?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `scavengerHunt` field. */
    scavengerHunt?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `obstacleCourse` field. */
    obstacleCourse?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `hideAndSeek` field. */
    hideAndSeek?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `attributes` field. */
    attributes?: ((Scalars['String'] | null)[] | null);
}
/** A connection to a list of `MonsterDrop` values. */
export interface MonsterDropsConnectionGenqlSelection {
    /** A list of `MonsterDrop` objects. */
    nodes?: MonsterDropGenqlSelection;
    /** A list of edges which contains the `MonsterDrop` and cursor to aid in pagination. */
    edges?: MonsterDropsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `MonsterDrop` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface MonsterDropGenqlSelection {
    monster?: boolean | number;
    item?: boolean | number;
    rate?: boolean | number;
    category?: boolean | number;
    /** Reads a single `Monster` that is related to this `MonsterDrop`. */
    monsterByMonster?: MonsterGenqlSelection;
    /** Reads a single `Item` that is related to this `MonsterDrop`. */
    itemByItem?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface MonsterGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    ambiguous?: boolean | number;
    article?: boolean | number;
    attack?: boolean | number;
    boss?: boolean | number;
    defence?: boolean | number;
    drippy?: boolean | number;
    element?: boolean | number;
    elementalAttack?: boolean | number;
    elementalDefence?: boolean | number;
    elementalResistance?: boolean | number;
    experience?: boolean | number;
    free?: boolean | number;
    ghost?: boolean | number;
    groupSize?: boolean | number;
    hp?: boolean | number;
    id?: boolean | number;
    image?: boolean | number;
    initiative?: boolean | number;
    itemBlockChance?: boolean | number;
    lucky?: boolean | number;
    manuel?: boolean | number;
    meat?: boolean | number;
    meatExpression?: boolean | number;
    monsterLevelMultiplier?: boolean | number;
    name?: boolean | number;
    nobanish?: boolean | number;
    nocopy?: boolean | number;
    nomanuel?: boolean | number;
    nowander?: boolean | number;
    nowish?: boolean | number;
    phylum?: boolean | number;
    physicalResistance?: boolean | number;
    poison?: boolean | number;
    scaling?: boolean | number;
    scalingCap?: boolean | number;
    scalingFloor?: boolean | number;
    skillBlockChance?: boolean | number;
    snake?: boolean | number;
    spellBlockChance?: boolean | number;
    sprinkles?: boolean | number;
    superlikely?: boolean | number;
    ultrarare?: boolean | number;
    wanderer?: boolean | number;
    wiki?: boolean | number;
    wish?: boolean | number;
    /** Reads and enables pagination through a set of `MonsterDrop`. */
    monsterDropsByMonster?: (MonsterDropsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `MonsterDrop`. */
            orderBy?: (MonsterDropsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (MonsterDropCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `NativeMonster`. */
    nativeMonstersByMonster?: (NativeMonstersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `NativeMonster`. */
            orderBy?: (NativeMonstersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (NativeMonsterCondition | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `MonsterDrop` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface MonsterDropCondition {
    /** Checks for equality with the object’s `monster` field. */
    monster?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `item` field. */
    item?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `rate` field. */
    rate?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `category` field. */
    category?: (MonsterDropCategory | null);
}
/** A connection to a list of `NativeMonster` values. */
export interface NativeMonstersConnectionGenqlSelection {
    /** A list of `NativeMonster` objects. */
    nodes?: NativeMonsterGenqlSelection;
    /** A list of edges which contains the `NativeMonster` and cursor to aid in pagination. */
    edges?: NativeMonstersEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `NativeMonster` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface NativeMonsterGenqlSelection {
    location?: boolean | number;
    monster?: boolean | number;
    weight?: boolean | number;
    rejection?: boolean | number;
    parity?: boolean | number;
    /** Reads a single `Location` that is related to this `NativeMonster`. */
    locationByLocation?: LocationGenqlSelection;
    /** Reads a single `Monster` that is related to this `NativeMonster`. */
    monsterByMonster?: MonsterGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface LocationGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    zone?: boolean | number;
    url?: boolean | number;
    difficulty?: boolean | number;
    environment?: boolean | number;
    statRequirement?: boolean | number;
    waterLevel?: boolean | number;
    overdrunk?: boolean | number;
    nowander?: boolean | number;
    combatRate?: boolean | number;
    /** Reads and enables pagination through a set of `NativeMonster`. */
    nativeMonstersByLocation?: (NativeMonstersConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `NativeMonster`. */
            orderBy?: (NativeMonstersOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (NativeMonsterCondition | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `NativeMonster` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface NativeMonsterCondition {
    /** Checks for equality with the object’s `location` field. */
    location?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `monster` field. */
    monster?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `weight` field. */
    weight?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `rejection` field. */
    rejection?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `parity` field. */
    parity?: (Scalars['Int'] | null);
}
/** A `NativeMonster` edge in the connection. */
export interface NativeMonstersEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `NativeMonster` at the end of the edge. */
    node?: NativeMonsterGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `MonsterDrop` edge in the connection. */
export interface MonsterDropsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `MonsterDrop` at the end of the edge. */
    node?: MonsterDropGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A connection to a list of `OutfitEquipment` values. */
export interface OutfitEquipmentsConnectionGenqlSelection {
    /** A list of `OutfitEquipment` objects. */
    nodes?: OutfitEquipmentGenqlSelection;
    /** A list of edges which contains the `OutfitEquipment` and cursor to aid in pagination. */
    edges?: OutfitEquipmentsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `OutfitEquipment` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface OutfitEquipmentGenqlSelection {
    outfit?: boolean | number;
    equipment?: boolean | number;
    /** Reads a single `Outfit` that is related to this `OutfitEquipment`. */
    outfitByOutfit?: OutfitGenqlSelection;
    /** Reads a single `Item` that is related to this `OutfitEquipment`. */
    itemByEquipment?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface OutfitGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    image?: boolean | number;
    /** Reads and enables pagination through a set of `OutfitEquipment`. */
    outfitEquipmentsByOutfit?: (OutfitEquipmentsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `OutfitEquipment`. */
            orderBy?: (OutfitEquipmentsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (OutfitEquipmentCondition | null);
        };
    });
    /** Reads and enables pagination through a set of `OutfitTreat`. */
    outfitTreatsByOutfit?: (OutfitTreatsConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `OutfitTreat`. */
            orderBy?: (OutfitTreatsOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (OutfitTreatCondition | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `OutfitEquipment` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface OutfitEquipmentCondition {
    /** Checks for equality with the object’s `outfit` field. */
    outfit?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `equipment` field. */
    equipment?: (Scalars['Int'] | null);
}
/** A connection to a list of `OutfitTreat` values. */
export interface OutfitTreatsConnectionGenqlSelection {
    /** A list of `OutfitTreat` objects. */
    nodes?: OutfitTreatGenqlSelection;
    /** A list of edges which contains the `OutfitTreat` and cursor to aid in pagination. */
    edges?: OutfitTreatsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `OutfitTreat` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface OutfitTreatGenqlSelection {
    outfit?: boolean | number;
    item?: boolean | number;
    chance?: boolean | number;
    /** Reads a single `Outfit` that is related to this `OutfitTreat`. */
    outfitByOutfit?: OutfitGenqlSelection;
    /** Reads a single `Item` that is related to this `OutfitTreat`. */
    itemByItem?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `OutfitTreat` edge in the connection. */
export interface OutfitTreatsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `OutfitTreat` at the end of the edge. */
    node?: OutfitTreatGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `OutfitTreat` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface OutfitTreatCondition {
    /** Checks for equality with the object’s `outfit` field. */
    outfit?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `item` field. */
    item?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `chance` field. */
    chance?: (Scalars['Float'] | null);
}
/** A `OutfitEquipment` edge in the connection. */
export interface OutfitEquipmentsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `OutfitEquipment` at the end of the edge. */
    node?: OutfitEquipmentGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A connection to a list of `Foldable` values. */
export interface FoldablesConnectionGenqlSelection {
    /** A list of `Foldable` objects. */
    nodes?: FoldableGenqlSelection;
    /** A list of edges which contains the `Foldable` and cursor to aid in pagination. */
    edges?: FoldablesEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Foldable` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface FoldableGenqlSelection {
    foldGroup?: boolean | number;
    item?: boolean | number;
    /** Reads a single `FoldGroup` that is related to this `Foldable`. */
    foldGroupByFoldGroup?: FoldGroupGenqlSelection;
    /** Reads a single `Item` that is related to this `Foldable`. */
    itemByItem?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface FoldGroupGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    damage?: boolean | number;
    /** Reads and enables pagination through a set of `Foldable`. */
    foldablesByFoldGroup?: (FoldablesConnectionGenqlSelection & {
        __args?: {
            /** Only read the first `n` values of the set. */
            first?: (Scalars['Int'] | null);
            /** Only read the last `n` values of the set. */
            last?: (Scalars['Int'] | null);
            /**
             * Skip the first `n` values from our `after` cursor, an alternative to cursor
             * based pagination. May not be used with `last`.
             */
            offset?: (Scalars['Int'] | null);
            /** Read all values in the set before (above) this cursor. */
            before?: (Scalars['Cursor'] | null);
            /** Read all values in the set after (below) this cursor. */
            after?: (Scalars['Cursor'] | null);
            /** The method to use when ordering `Foldable`. */
            orderBy?: (FoldablesOrderBy[] | null);
            /** A condition to be used in determining which values should be returned by the collection. */
            condition?: (FoldableCondition | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `Foldable` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface FoldableCondition {
    /** Checks for equality with the object’s `foldGroup` field. */
    foldGroup?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `item` field. */
    item?: (Scalars['Int'] | null);
}
/** A `Foldable` edge in the connection. */
export interface FoldablesEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Foldable` at the end of the edge. */
    node?: FoldableGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface ItemModifierGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    item?: boolean | number;
    modifiers?: boolean | number;
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Consumable` edge in the connection. */
export interface ConsumablesEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Consumable` at the end of the edge. */
    node?: ConsumableGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `Consumable` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface ConsumableCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `stomach` field. */
    stomach?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `liver` field. */
    liver?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `spleen` field. */
    spleen?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `levelRequirement` field. */
    levelRequirement?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `quality` field. */
    quality?: (ConsumableQuality | null);
    /** Checks for equality with the object’s `adventureRange` field. */
    adventureRange?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `adventures` field. */
    adventures?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `muscle` field. */
    muscle?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `muscleRange` field. */
    muscleRange?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `mysticality` field. */
    mysticality?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `mysticalityRange` field. */
    mysticalityRange?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `moxie` field. */
    moxie?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `moxieRange` field. */
    moxieRange?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `notes` field. */
    notes?: (Scalars['String'] | null);
}
/** A connection to a list of `EffectModifier` values. */
export interface EffectModifiersConnectionGenqlSelection {
    /** A list of `EffectModifier` objects. */
    nodes?: EffectModifierGenqlSelection;
    /** A list of edges which contains the `EffectModifier` and cursor to aid in pagination. */
    edges?: EffectModifiersEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `EffectModifier` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface EffectModifierGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    effect?: boolean | number;
    modifiers?: boolean | number;
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect?: EffectGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface EffectGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    descid?: boolean | number;
    image?: boolean | number;
    quality?: boolean | number;
    nohookah?: boolean | number;
    nopvp?: boolean | number;
    noremove?: boolean | number;
    song?: boolean | number;
    actions?: boolean | number;
    ambiguous?: boolean | number;
    /** Reads a single `EffectModifier` that is related to this `Effect`. */
    effectModifierByEffect?: EffectModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `EffectModifier` edge in the connection. */
export interface EffectModifiersEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `EffectModifier` at the end of the edge. */
    node?: EffectModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `EffectModifier` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface EffectModifierCondition {
    /** Checks for equality with the object’s `effect` field. */
    effect?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `modifiers` field. */
    modifiers?: (Scalars['JSON'] | null);
}
/** A connection to a list of `Effect` values. */
export interface EffectsConnectionGenqlSelection {
    /** A list of `Effect` objects. */
    nodes?: EffectGenqlSelection;
    /** A list of edges which contains the `Effect` and cursor to aid in pagination. */
    edges?: EffectsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Effect` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Effect` edge in the connection. */
export interface EffectsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Effect` at the end of the edge. */
    node?: EffectGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Effect` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface EffectCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `descid` field. */
    descid?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `quality` field. */
    quality?: (EffectQuality | null);
    /** Checks for equality with the object’s `nohookah` field. */
    nohookah?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `nopvp` field. */
    nopvp?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `noremove` field. */
    noremove?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `song` field. */
    song?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `actions` field. */
    actions?: ((Scalars['String'] | null)[] | null);
    /** Checks for equality with the object’s `ambiguous` field. */
    ambiguous?: (Scalars['Boolean'] | null);
}
/** A connection to a list of `Equipment` values. */
export interface EquipmentConnectionGenqlSelection {
    /** A list of `Equipment` objects. */
    nodes?: EquipmentGenqlSelection;
    /** A list of edges which contains the `Equipment` and cursor to aid in pagination. */
    edges?: EquipmentEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Equipment` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Equipment` edge in the connection. */
export interface EquipmentEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Equipment` at the end of the edge. */
    node?: EquipmentGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `Equipment` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface EquipmentCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `power` field. */
    power?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `musRequirement` field. */
    musRequirement?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `mysRequirement` field. */
    mysRequirement?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `moxRequirement` field. */
    moxRequirement?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `type` field. */
    type?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `hands` field. */
    hands?: (Scalars['Int'] | null);
}
/** A connection to a list of `FamiliarModifier` values. */
export interface FamiliarModifiersConnectionGenqlSelection {
    /** A list of `FamiliarModifier` objects. */
    nodes?: FamiliarModifierGenqlSelection;
    /** A list of edges which contains the `FamiliarModifier` and cursor to aid in pagination. */
    edges?: FamiliarModifiersEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `FamiliarModifier` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `FamiliarModifier` edge in the connection. */
export interface FamiliarModifiersEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `FamiliarModifier` at the end of the edge. */
    node?: FamiliarModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `FamiliarModifier` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface FamiliarModifierCondition {
    /** Checks for equality with the object’s `familiar` field. */
    familiar?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `modifiers` field. */
    modifiers?: (Scalars['JSON'] | null);
}
/** A connection to a list of `FoldGroup` values. */
export interface FoldGroupsConnectionGenqlSelection {
    /** A list of `FoldGroup` objects. */
    nodes?: FoldGroupGenqlSelection;
    /** A list of edges which contains the `FoldGroup` and cursor to aid in pagination. */
    edges?: FoldGroupsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `FoldGroup` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `FoldGroup` edge in the connection. */
export interface FoldGroupsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `FoldGroup` at the end of the edge. */
    node?: FoldGroupGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `FoldGroup` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface FoldGroupCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `damage` field. */
    damage?: (Scalars['Int'] | null);
}
/** A connection to a list of `ItemModifier` values. */
export interface ItemModifiersConnectionGenqlSelection {
    /** A list of `ItemModifier` objects. */
    nodes?: ItemModifierGenqlSelection;
    /** A list of edges which contains the `ItemModifier` and cursor to aid in pagination. */
    edges?: ItemModifiersEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `ItemModifier` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `ItemModifier` edge in the connection. */
export interface ItemModifiersEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `ItemModifier` at the end of the edge. */
    node?: ItemModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `ItemModifier` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface ItemModifierCondition {
    /** Checks for equality with the object’s `item` field. */
    item?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `modifiers` field. */
    modifiers?: (Scalars['JSON'] | null);
}
/** A connection to a list of `Item` values. */
export interface ItemsConnectionGenqlSelection {
    /** A list of `Item` objects. */
    nodes?: ItemGenqlSelection;
    /** A list of edges which contains the `Item` and cursor to aid in pagination. */
    edges?: ItemsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Item` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Item` edge in the connection. */
export interface ItemsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Item` at the end of the edge. */
    node?: ItemGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface ItemCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `descid` field. */
    descid?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `uses` field. */
    uses?: ((ItemUse | null)[] | null);
    /** Checks for equality with the object’s `quest` field. */
    quest?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `gift` field. */
    gift?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `tradeable` field. */
    tradeable?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `discardable` field. */
    discardable?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `autosell` field. */
    autosell?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `plural` field. */
    plural?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `ambiguous` field. */
    ambiguous?: (Scalars['Boolean'] | null);
}
/** A connection to a list of `Location` values. */
export interface LocationsConnectionGenqlSelection {
    /** A list of `Location` objects. */
    nodes?: LocationGenqlSelection;
    /** A list of edges which contains the `Location` and cursor to aid in pagination. */
    edges?: LocationsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Location` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Location` edge in the connection. */
export interface LocationsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Location` at the end of the edge. */
    node?: LocationGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `Location` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface LocationCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `zone` field. */
    zone?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `url` field. */
    url?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `difficulty` field. */
    difficulty?: (LocationDifficulty | null);
    /** Checks for equality with the object’s `environment` field. */
    environment?: (LocationEnvironment | null);
    /** Checks for equality with the object’s `statRequirement` field. */
    statRequirement?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `waterLevel` field. */
    waterLevel?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `overdrunk` field. */
    overdrunk?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `nowander` field. */
    nowander?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `combatRate` field. */
    combatRate?: (Scalars['Int'] | null);
}
/** A connection to a list of `Meta` values. */
export interface MetasConnectionGenqlSelection {
    /** A list of `Meta` objects. */
    nodes?: MetaGenqlSelection;
    /** A list of edges which contains the `Meta` and cursor to aid in pagination. */
    edges?: MetasEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Meta` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface MetaGenqlSelection {
    lastUpdate?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Meta` edge in the connection. */
export interface MetasEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Meta` at the end of the edge. */
    node?: MetaGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Meta` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface MetaCondition {
    /** Checks for equality with the object’s `lastUpdate` field. */
    lastUpdate?: (Scalars['Datetime'] | null);
}
/** A connection to a list of `Monster` values. */
export interface MonstersConnectionGenqlSelection {
    /** A list of `Monster` objects. */
    nodes?: MonsterGenqlSelection;
    /** A list of edges which contains the `Monster` and cursor to aid in pagination. */
    edges?: MonstersEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Monster` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Monster` edge in the connection. */
export interface MonstersEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Monster` at the end of the edge. */
    node?: MonsterGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Monster` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface MonsterCondition {
    /** Checks for equality with the object’s `ambiguous` field. */
    ambiguous?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `article` field. */
    article?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `attack` field. */
    attack?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `boss` field. */
    boss?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `defence` field. */
    defence?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `drippy` field. */
    drippy?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `element` field. */
    element?: (MonsterElement | null);
    /** Checks for equality with the object’s `elementalAttack` field. */
    elementalAttack?: (MonsterElement | null);
    /** Checks for equality with the object’s `elementalDefence` field. */
    elementalDefence?: (MonsterElement | null);
    /** Checks for equality with the object’s `elementalResistance` field. */
    elementalResistance?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `experience` field. */
    experience?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `free` field. */
    free?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `ghost` field. */
    ghost?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `groupSize` field. */
    groupSize?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `hp` field. */
    hp?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: ((Scalars['String'] | null)[] | null);
    /** Checks for equality with the object’s `initiative` field. */
    initiative?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `itemBlockChance` field. */
    itemBlockChance?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `lucky` field. */
    lucky?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `manuel` field. */
    manuel?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `meat` field. */
    meat?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `meatExpression` field. */
    meatExpression?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `monsterLevelMultiplier` field. */
    monsterLevelMultiplier?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `nobanish` field. */
    nobanish?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `nocopy` field. */
    nocopy?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `nomanuel` field. */
    nomanuel?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `nowander` field. */
    nowander?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `nowish` field. */
    nowish?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `phylum` field. */
    phylum?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `physicalResistance` field. */
    physicalResistance?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `poison` field. */
    poison?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `scaling` field. */
    scaling?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `scalingCap` field. */
    scalingCap?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `scalingFloor` field. */
    scalingFloor?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `skillBlockChance` field. */
    skillBlockChance?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `snake` field. */
    snake?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `spellBlockChance` field. */
    spellBlockChance?: (Scalars['Float'] | null);
    /** Checks for equality with the object’s `sprinkles` field. */
    sprinkles?: ((Scalars['String'] | null)[] | null);
    /** Checks for equality with the object’s `superlikely` field. */
    superlikely?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `ultrarare` field. */
    ultrarare?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `wanderer` field. */
    wanderer?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `wiki` field. */
    wiki?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `wish` field. */
    wish?: (Scalars['Boolean'] | null);
}
/** A connection to a list of `Outfit` values. */
export interface OutfitsConnectionGenqlSelection {
    /** A list of `Outfit` objects. */
    nodes?: OutfitGenqlSelection;
    /** A list of edges which contains the `Outfit` and cursor to aid in pagination. */
    edges?: OutfitsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Outfit` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Outfit` edge in the connection. */
export interface OutfitsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Outfit` at the end of the edge. */
    node?: OutfitGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Outfit` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface OutfitCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: (Scalars['String'] | null);
}
/** A connection to a list of `Path` values. */
export interface PathsConnectionGenqlSelection {
    /** A list of `Path` objects. */
    nodes?: PathGenqlSelection;
    /** A list of edges which contains the `Path` and cursor to aid in pagination. */
    edges?: PathsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Path` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Path` edge in the connection. */
export interface PathsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Path` at the end of the edge. */
    node?: PathGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Path` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface PathCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `enumName` field. */
    enumName?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `isAvatar` field. */
    isAvatar?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `article` field. */
    article?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `pointsPreference` field. */
    pointsPreference?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `maximumPoints` field. */
    maximumPoints?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `bucket` field. */
    bucket?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `stomachCapacity` field. */
    stomachCapacity?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `liverCapacity` field. */
    liverCapacity?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `spleenCapacity` field. */
    spleenCapacity?: (Scalars['Int'] | null);
}
/** A connection to a list of `SkillModifier` values. */
export interface SkillModifiersConnectionGenqlSelection {
    /** A list of `SkillModifier` objects. */
    nodes?: SkillModifierGenqlSelection;
    /** A list of edges which contains the `SkillModifier` and cursor to aid in pagination. */
    edges?: SkillModifiersEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `SkillModifier` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface SkillModifierGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    skill?: boolean | number;
    modifiers?: boolean | number;
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill?: SkillGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
export interface SkillGenqlSelection {
    /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
    nodeId?: boolean | number;
    id?: boolean | number;
    name?: boolean | number;
    image?: boolean | number;
    tags?: boolean | number;
    mpCost?: boolean | number;
    duration?: boolean | number;
    guildLevel?: boolean | number;
    maxLevel?: boolean | number;
    permable?: boolean | number;
    ambiguous?: boolean | number;
    /** Reads a single `SkillModifier` that is related to this `Skill`. */
    skillModifierBySkill?: SkillModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `SkillModifier` edge in the connection. */
export interface SkillModifiersEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `SkillModifier` at the end of the edge. */
    node?: SkillModifierGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/**
 * A condition to be used against `SkillModifier` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface SkillModifierCondition {
    /** Checks for equality with the object’s `skill` field. */
    skill?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `modifiers` field. */
    modifiers?: (Scalars['JSON'] | null);
}
/** A connection to a list of `Skill` values. */
export interface SkillsConnectionGenqlSelection {
    /** A list of `Skill` objects. */
    nodes?: SkillGenqlSelection;
    /** A list of edges which contains the `Skill` and cursor to aid in pagination. */
    edges?: SkillsEdgeGenqlSelection;
    /** Information to aid in pagination. */
    pageInfo?: PageInfoGenqlSelection;
    /** The count of *all* `Skill` you could get from the connection. */
    totalCount?: boolean | number;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A `Skill` edge in the connection. */
export interface SkillsEdgeGenqlSelection {
    /** A cursor for use in pagination. */
    cursor?: boolean | number;
    /** The `Skill` at the end of the edge. */
    node?: SkillGenqlSelection;
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** A condition to be used against `Skill` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export interface SkillCondition {
    /** Checks for equality with the object’s `id` field. */
    id?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `name` field. */
    name?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `image` field. */
    image?: (Scalars['String'] | null);
    /** Checks for equality with the object’s `tags` field. */
    tags?: ((SkillTag | null)[] | null);
    /** Checks for equality with the object’s `mpCost` field. */
    mpCost?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `duration` field. */
    duration?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `guildLevel` field. */
    guildLevel?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `maxLevel` field. */
    maxLevel?: (Scalars['Int'] | null);
    /** Checks for equality with the object’s `permable` field. */
    permable?: (Scalars['Boolean'] | null);
    /** Checks for equality with the object’s `ambiguous` field. */
    ambiguous?: (Scalars['Boolean'] | null);
}
/** The root mutation type which contains root level fields which mutate data. */
export interface MutationGenqlSelection {
    /** Creates a single `Class`. */
    createClass?: (CreateClassPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateClassInput;
        };
    });
    /** Creates a single `Consumable`. */
    createConsumable?: (CreateConsumablePayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateConsumableInput;
        };
    });
    /** Creates a single `EffectModifier`. */
    createEffectModifier?: (CreateEffectModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateEffectModifierInput;
        };
    });
    /** Creates a single `Effect`. */
    createEffect?: (CreateEffectPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateEffectInput;
        };
    });
    /** Creates a single `Equipment`. */
    createEquipment?: (CreateEquipmentPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateEquipmentInput;
        };
    });
    /** Creates a single `FamiliarModifier`. */
    createFamiliarModifier?: (CreateFamiliarModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateFamiliarModifierInput;
        };
    });
    /** Creates a single `Familiar`. */
    createFamiliar?: (CreateFamiliarPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateFamiliarInput;
        };
    });
    /** Creates a single `FoldGroup`. */
    createFoldGroup?: (CreateFoldGroupPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateFoldGroupInput;
        };
    });
    /** Creates a single `Foldable`. */
    createFoldable?: (CreateFoldablePayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateFoldableInput;
        };
    });
    /** Creates a single `ItemModifier`. */
    createItemModifier?: (CreateItemModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateItemModifierInput;
        };
    });
    /** Creates a single `Item`. */
    createItem?: (CreateItemPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateItemInput;
        };
    });
    /** Creates a single `Location`. */
    createLocation?: (CreateLocationPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateLocationInput;
        };
    });
    /** Creates a single `Meta`. */
    createMeta?: (CreateMetaPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateMetaInput;
        };
    });
    /** Creates a single `MonsterDrop`. */
    createMonsterDrop?: (CreateMonsterDropPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateMonsterDropInput;
        };
    });
    /** Creates a single `Monster`. */
    createMonster?: (CreateMonsterPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateMonsterInput;
        };
    });
    /** Creates a single `NativeMonster`. */
    createNativeMonster?: (CreateNativeMonsterPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateNativeMonsterInput;
        };
    });
    /** Creates a single `OutfitEquipment`. */
    createOutfitEquipment?: (CreateOutfitEquipmentPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateOutfitEquipmentInput;
        };
    });
    /** Creates a single `OutfitTreat`. */
    createOutfitTreat?: (CreateOutfitTreatPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateOutfitTreatInput;
        };
    });
    /** Creates a single `Outfit`. */
    createOutfit?: (CreateOutfitPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateOutfitInput;
        };
    });
    /** Creates a single `Path`. */
    createPath?: (CreatePathPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreatePathInput;
        };
    });
    /** Creates a single `SkillModifier`. */
    createSkillModifier?: (CreateSkillModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateSkillModifierInput;
        };
    });
    /** Creates a single `Skill`. */
    createSkill?: (CreateSkillPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: CreateSkillInput;
        };
    });
    /** Updates a single `Class` using its globally unique id and a patch. */
    updateClass?: (UpdateClassPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateClassInput;
        };
    });
    /** Updates a single `Class` using a unique key and a patch. */
    updateClassById?: (UpdateClassPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateClassByIdInput;
        };
    });
    /** Updates a single `Consumable` using its globally unique id and a patch. */
    updateConsumable?: (UpdateConsumablePayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateConsumableInput;
        };
    });
    /** Updates a single `Consumable` using a unique key and a patch. */
    updateConsumableById?: (UpdateConsumablePayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateConsumableByIdInput;
        };
    });
    /** Updates a single `EffectModifier` using its globally unique id and a patch. */
    updateEffectModifier?: (UpdateEffectModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateEffectModifierInput;
        };
    });
    /** Updates a single `EffectModifier` using a unique key and a patch. */
    updateEffectModifierByEffect?: (UpdateEffectModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateEffectModifierByEffectInput;
        };
    });
    /** Updates a single `Effect` using its globally unique id and a patch. */
    updateEffect?: (UpdateEffectPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateEffectInput;
        };
    });
    /** Updates a single `Effect` using a unique key and a patch. */
    updateEffectById?: (UpdateEffectPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateEffectByIdInput;
        };
    });
    /** Updates a single `Effect` using a unique key and a patch. */
    updateEffectByDescid?: (UpdateEffectPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateEffectByDescidInput;
        };
    });
    /** Updates a single `Equipment` using its globally unique id and a patch. */
    updateEquipment?: (UpdateEquipmentPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateEquipmentInput;
        };
    });
    /** Updates a single `Equipment` using a unique key and a patch. */
    updateEquipmentById?: (UpdateEquipmentPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateEquipmentByIdInput;
        };
    });
    /** Updates a single `FamiliarModifier` using its globally unique id and a patch. */
    updateFamiliarModifier?: (UpdateFamiliarModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateFamiliarModifierInput;
        };
    });
    /** Updates a single `FamiliarModifier` using a unique key and a patch. */
    updateFamiliarModifierByFamiliar?: (UpdateFamiliarModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateFamiliarModifierByFamiliarInput;
        };
    });
    /** Updates a single `Familiar` using its globally unique id and a patch. */
    updateFamiliar?: (UpdateFamiliarPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateFamiliarInput;
        };
    });
    /** Updates a single `Familiar` using a unique key and a patch. */
    updateFamiliarById?: (UpdateFamiliarPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateFamiliarByIdInput;
        };
    });
    /** Updates a single `FoldGroup` using its globally unique id and a patch. */
    updateFoldGroup?: (UpdateFoldGroupPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateFoldGroupInput;
        };
    });
    /** Updates a single `FoldGroup` using a unique key and a patch. */
    updateFoldGroupById?: (UpdateFoldGroupPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateFoldGroupByIdInput;
        };
    });
    /** Updates a single `ItemModifier` using its globally unique id and a patch. */
    updateItemModifier?: (UpdateItemModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateItemModifierInput;
        };
    });
    /** Updates a single `ItemModifier` using a unique key and a patch. */
    updateItemModifierByItem?: (UpdateItemModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateItemModifierByItemInput;
        };
    });
    /** Updates a single `Item` using its globally unique id and a patch. */
    updateItem?: (UpdateItemPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateItemInput;
        };
    });
    /** Updates a single `Item` using a unique key and a patch. */
    updateItemById?: (UpdateItemPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateItemByIdInput;
        };
    });
    /** Updates a single `Item` using a unique key and a patch. */
    updateItemByDescid?: (UpdateItemPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateItemByDescidInput;
        };
    });
    /** Updates a single `Location` using its globally unique id and a patch. */
    updateLocation?: (UpdateLocationPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateLocationInput;
        };
    });
    /** Updates a single `Location` using a unique key and a patch. */
    updateLocationByName?: (UpdateLocationPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateLocationByNameInput;
        };
    });
    /** Updates a single `Monster` using its globally unique id and a patch. */
    updateMonster?: (UpdateMonsterPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateMonsterInput;
        };
    });
    /** Updates a single `Monster` using a unique key and a patch. */
    updateMonsterById?: (UpdateMonsterPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateMonsterByIdInput;
        };
    });
    /** Updates a single `Outfit` using its globally unique id and a patch. */
    updateOutfit?: (UpdateOutfitPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateOutfitInput;
        };
    });
    /** Updates a single `Outfit` using a unique key and a patch. */
    updateOutfitById?: (UpdateOutfitPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateOutfitByIdInput;
        };
    });
    /** Updates a single `Path` using its globally unique id and a patch. */
    updatePath?: (UpdatePathPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdatePathInput;
        };
    });
    /** Updates a single `Path` using a unique key and a patch. */
    updatePathById?: (UpdatePathPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdatePathByIdInput;
        };
    });
    /** Updates a single `Path` using a unique key and a patch. */
    updatePathByImage?: (UpdatePathPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdatePathByImageInput;
        };
    });
    /** Updates a single `SkillModifier` using its globally unique id and a patch. */
    updateSkillModifier?: (UpdateSkillModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateSkillModifierInput;
        };
    });
    /** Updates a single `SkillModifier` using a unique key and a patch. */
    updateSkillModifierBySkill?: (UpdateSkillModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateSkillModifierBySkillInput;
        };
    });
    /** Updates a single `Skill` using its globally unique id and a patch. */
    updateSkill?: (UpdateSkillPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateSkillInput;
        };
    });
    /** Updates a single `Skill` using a unique key and a patch. */
    updateSkillById?: (UpdateSkillPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: UpdateSkillByIdInput;
        };
    });
    /** Deletes a single `Class` using its globally unique id. */
    deleteClass?: (DeleteClassPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteClassInput;
        };
    });
    /** Deletes a single `Class` using a unique key. */
    deleteClassById?: (DeleteClassPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteClassByIdInput;
        };
    });
    /** Deletes a single `Consumable` using its globally unique id. */
    deleteConsumable?: (DeleteConsumablePayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteConsumableInput;
        };
    });
    /** Deletes a single `Consumable` using a unique key. */
    deleteConsumableById?: (DeleteConsumablePayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteConsumableByIdInput;
        };
    });
    /** Deletes a single `EffectModifier` using its globally unique id. */
    deleteEffectModifier?: (DeleteEffectModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteEffectModifierInput;
        };
    });
    /** Deletes a single `EffectModifier` using a unique key. */
    deleteEffectModifierByEffect?: (DeleteEffectModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteEffectModifierByEffectInput;
        };
    });
    /** Deletes a single `Effect` using its globally unique id. */
    deleteEffect?: (DeleteEffectPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteEffectInput;
        };
    });
    /** Deletes a single `Effect` using a unique key. */
    deleteEffectById?: (DeleteEffectPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteEffectByIdInput;
        };
    });
    /** Deletes a single `Effect` using a unique key. */
    deleteEffectByDescid?: (DeleteEffectPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteEffectByDescidInput;
        };
    });
    /** Deletes a single `Equipment` using its globally unique id. */
    deleteEquipment?: (DeleteEquipmentPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteEquipmentInput;
        };
    });
    /** Deletes a single `Equipment` using a unique key. */
    deleteEquipmentById?: (DeleteEquipmentPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteEquipmentByIdInput;
        };
    });
    /** Deletes a single `FamiliarModifier` using its globally unique id. */
    deleteFamiliarModifier?: (DeleteFamiliarModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteFamiliarModifierInput;
        };
    });
    /** Deletes a single `FamiliarModifier` using a unique key. */
    deleteFamiliarModifierByFamiliar?: (DeleteFamiliarModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteFamiliarModifierByFamiliarInput;
        };
    });
    /** Deletes a single `Familiar` using its globally unique id. */
    deleteFamiliar?: (DeleteFamiliarPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteFamiliarInput;
        };
    });
    /** Deletes a single `Familiar` using a unique key. */
    deleteFamiliarById?: (DeleteFamiliarPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteFamiliarByIdInput;
        };
    });
    /** Deletes a single `FoldGroup` using its globally unique id. */
    deleteFoldGroup?: (DeleteFoldGroupPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteFoldGroupInput;
        };
    });
    /** Deletes a single `FoldGroup` using a unique key. */
    deleteFoldGroupById?: (DeleteFoldGroupPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteFoldGroupByIdInput;
        };
    });
    /** Deletes a single `ItemModifier` using its globally unique id. */
    deleteItemModifier?: (DeleteItemModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteItemModifierInput;
        };
    });
    /** Deletes a single `ItemModifier` using a unique key. */
    deleteItemModifierByItem?: (DeleteItemModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteItemModifierByItemInput;
        };
    });
    /** Deletes a single `Item` using its globally unique id. */
    deleteItem?: (DeleteItemPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteItemInput;
        };
    });
    /** Deletes a single `Item` using a unique key. */
    deleteItemById?: (DeleteItemPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteItemByIdInput;
        };
    });
    /** Deletes a single `Item` using a unique key. */
    deleteItemByDescid?: (DeleteItemPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteItemByDescidInput;
        };
    });
    /** Deletes a single `Location` using its globally unique id. */
    deleteLocation?: (DeleteLocationPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteLocationInput;
        };
    });
    /** Deletes a single `Location` using a unique key. */
    deleteLocationByName?: (DeleteLocationPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteLocationByNameInput;
        };
    });
    /** Deletes a single `Monster` using its globally unique id. */
    deleteMonster?: (DeleteMonsterPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteMonsterInput;
        };
    });
    /** Deletes a single `Monster` using a unique key. */
    deleteMonsterById?: (DeleteMonsterPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteMonsterByIdInput;
        };
    });
    /** Deletes a single `Outfit` using its globally unique id. */
    deleteOutfit?: (DeleteOutfitPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteOutfitInput;
        };
    });
    /** Deletes a single `Outfit` using a unique key. */
    deleteOutfitById?: (DeleteOutfitPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteOutfitByIdInput;
        };
    });
    /** Deletes a single `Path` using its globally unique id. */
    deletePath?: (DeletePathPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeletePathInput;
        };
    });
    /** Deletes a single `Path` using a unique key. */
    deletePathById?: (DeletePathPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeletePathByIdInput;
        };
    });
    /** Deletes a single `Path` using a unique key. */
    deletePathByImage?: (DeletePathPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeletePathByImageInput;
        };
    });
    /** Deletes a single `SkillModifier` using its globally unique id. */
    deleteSkillModifier?: (DeleteSkillModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteSkillModifierInput;
        };
    });
    /** Deletes a single `SkillModifier` using a unique key. */
    deleteSkillModifierBySkill?: (DeleteSkillModifierPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteSkillModifierBySkillInput;
        };
    });
    /** Deletes a single `Skill` using its globally unique id. */
    deleteSkill?: (DeleteSkillPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteSkillInput;
        };
    });
    /** Deletes a single `Skill` using a unique key. */
    deleteSkillById?: (DeleteSkillPayloadGenqlSelection & {
        __args: {
            /** The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields. */
            input: DeleteSkillByIdInput;
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** The output of our create `Class` mutation. */
export interface CreateClassPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Class` that was created by this mutation. */
    class?: ClassGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath?: PathGenqlSelection;
    /** An edge for our `Class`. May be used by Relay 1. */
    classEdge?: (ClassesEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Class`. */
            orderBy?: (ClassesOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Class` mutation. */
export interface CreateClassInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Class` to be created by this mutation. */
    class: ClassInput;
}
/** An input for mutations affecting `Class` */
export interface ClassInput {
    id: Scalars['Int'];
    name: Scalars['String'];
    enumName: Scalars['String'];
    image?: (Scalars['String'] | null);
    primeStatIndex: Scalars['Int'];
    path?: (Scalars['Int'] | null);
    stun?: (Scalars['String'] | null);
    stomachCapacity?: (Scalars['Int'] | null);
    liverCapacity?: (Scalars['Int'] | null);
    spleenCapacity?: (Scalars['Int'] | null);
}
/** The output of our create `Consumable` mutation. */
export interface CreateConsumablePayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Consumable` that was created by this mutation. */
    consumable?: ConsumableGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById?: ItemGenqlSelection;
    /** An edge for our `Consumable`. May be used by Relay 1. */
    consumableEdge?: (ConsumablesEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Consumable`. */
            orderBy?: (ConsumablesOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Consumable` mutation. */
export interface CreateConsumableInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Consumable` to be created by this mutation. */
    consumable: ConsumableInput;
}
/** An input for mutations affecting `Consumable` */
export interface ConsumableInput {
    id: Scalars['Int'];
    stomach: Scalars['Int'];
    liver: Scalars['Int'];
    spleen: Scalars['Int'];
    levelRequirement: Scalars['Int'];
    quality?: (ConsumableQuality | null);
    adventureRange: Scalars['String'];
    adventures: Scalars['Float'];
    muscle: Scalars['Float'];
    muscleRange: Scalars['String'];
    mysticality: Scalars['Float'];
    mysticalityRange: Scalars['String'];
    moxie: Scalars['Float'];
    moxieRange: Scalars['String'];
    notes?: (Scalars['String'] | null);
}
/** The output of our create `EffectModifier` mutation. */
export interface CreateEffectModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `EffectModifier` that was created by this mutation. */
    effectModifier?: EffectModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect?: EffectGenqlSelection;
    /** An edge for our `EffectModifier`. May be used by Relay 1. */
    effectModifierEdge?: (EffectModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `EffectModifier`. */
            orderBy?: (EffectModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `EffectModifier` mutation. */
export interface CreateEffectModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `EffectModifier` to be created by this mutation. */
    effectModifier: EffectModifierInput;
}
/** An input for mutations affecting `EffectModifier` */
export interface EffectModifierInput {
    effect: Scalars['Int'];
    modifiers: Scalars['JSON'];
}
/** The output of our create `Effect` mutation. */
export interface CreateEffectPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Effect` that was created by this mutation. */
    effect?: EffectGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Effect`. May be used by Relay 1. */
    effectEdge?: (EffectsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Effect`. */
            orderBy?: (EffectsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Effect` mutation. */
export interface CreateEffectInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Effect` to be created by this mutation. */
    effect: EffectInput;
}
/** An input for mutations affecting `Effect` */
export interface EffectInput {
    id: Scalars['Int'];
    name: Scalars['String'];
    descid?: (Scalars['String'] | null);
    image: Scalars['String'];
    quality: EffectQuality;
    nohookah: Scalars['Boolean'];
    nopvp: Scalars['Boolean'];
    noremove: Scalars['Boolean'];
    song: Scalars['Boolean'];
    actions: (Scalars['String'] | null)[];
    ambiguous?: (Scalars['Boolean'] | null);
}
/** The output of our create `Equipment` mutation. */
export interface CreateEquipmentPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Equipment` that was created by this mutation. */
    equipment?: EquipmentGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById?: ItemGenqlSelection;
    /** An edge for our `Equipment`. May be used by Relay 1. */
    equipmentEdge?: (EquipmentEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Equipment`. */
            orderBy?: (EquipmentOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Equipment` mutation. */
export interface CreateEquipmentInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Equipment` to be created by this mutation. */
    equipment: EquipmentInput;
}
/** An input for mutations affecting `Equipment` */
export interface EquipmentInput {
    id: Scalars['Int'];
    power: Scalars['Int'];
    musRequirement: Scalars['Int'];
    mysRequirement: Scalars['Int'];
    moxRequirement: Scalars['Int'];
    type?: (Scalars['String'] | null);
    hands?: (Scalars['Int'] | null);
}
/** The output of our create `FamiliarModifier` mutation. */
export interface CreateFamiliarModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `FamiliarModifier` that was created by this mutation. */
    familiarModifier?: FamiliarModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar?: FamiliarGenqlSelection;
    /** An edge for our `FamiliarModifier`. May be used by Relay 1. */
    familiarModifierEdge?: (FamiliarModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `FamiliarModifier`. */
            orderBy?: (FamiliarModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `FamiliarModifier` mutation. */
export interface CreateFamiliarModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `FamiliarModifier` to be created by this mutation. */
    familiarModifier: FamiliarModifierInput;
}
/** An input for mutations affecting `FamiliarModifier` */
export interface FamiliarModifierInput {
    familiar: Scalars['Int'];
    modifiers: Scalars['JSON'];
}
/** The output of our create `Familiar` mutation. */
export interface CreateFamiliarPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Familiar` that was created by this mutation. */
    familiar?: FamiliarGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva?: ItemGenqlSelection;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment?: ItemGenqlSelection;
    /** An edge for our `Familiar`. May be used by Relay 1. */
    familiarEdge?: (FamiliarsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Familiar`. */
            orderBy?: (FamiliarsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Familiar` mutation. */
export interface CreateFamiliarInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Familiar` to be created by this mutation. */
    familiar: FamiliarInput;
}
/** An input for mutations affecting `Familiar` */
export interface FamiliarInput {
    id: Scalars['Int'];
    name: Scalars['String'];
    image: Scalars['String'];
    categories: (FamiliarCategory | null)[];
    larva?: (Scalars['Int'] | null);
    equipment?: (Scalars['Int'] | null);
    cageMatch: Scalars['Int'];
    scavengerHunt: Scalars['Int'];
    obstacleCourse: Scalars['Int'];
    hideAndSeek: Scalars['Int'];
    attributes: (Scalars['String'] | null)[];
}
/** The output of our create `FoldGroup` mutation. */
export interface CreateFoldGroupPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `FoldGroup` that was created by this mutation. */
    foldGroup?: FoldGroupGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `FoldGroup`. May be used by Relay 1. */
    foldGroupEdge?: (FoldGroupsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `FoldGroup`. */
            orderBy?: (FoldGroupsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `FoldGroup` mutation. */
export interface CreateFoldGroupInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `FoldGroup` to be created by this mutation. */
    foldGroup: FoldGroupInput;
}
/** An input for mutations affecting `FoldGroup` */
export interface FoldGroupInput {
    id: Scalars['Int'];
    damage: Scalars['Int'];
}
/** The output of our create `Foldable` mutation. */
export interface CreateFoldablePayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Foldable` that was created by this mutation. */
    foldable?: FoldableGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `FoldGroup` that is related to this `Foldable`. */
    foldGroupByFoldGroup?: FoldGroupGenqlSelection;
    /** Reads a single `Item` that is related to this `Foldable`. */
    itemByItem?: ItemGenqlSelection;
    /** An edge for our `Foldable`. May be used by Relay 1. */
    foldableEdge?: (FoldablesEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Foldable`. */
            orderBy?: (FoldablesOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Foldable` mutation. */
export interface CreateFoldableInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Foldable` to be created by this mutation. */
    foldable: FoldableInput;
}
/** An input for mutations affecting `Foldable` */
export interface FoldableInput {
    foldGroup?: (Scalars['Int'] | null);
    item?: (Scalars['Int'] | null);
}
/** The output of our create `ItemModifier` mutation. */
export interface CreateItemModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `ItemModifier` that was created by this mutation. */
    itemModifier?: ItemModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem?: ItemGenqlSelection;
    /** An edge for our `ItemModifier`. May be used by Relay 1. */
    itemModifierEdge?: (ItemModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `ItemModifier`. */
            orderBy?: (ItemModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `ItemModifier` mutation. */
export interface CreateItemModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `ItemModifier` to be created by this mutation. */
    itemModifier: ItemModifierInput;
}
/** An input for mutations affecting `ItemModifier` */
export interface ItemModifierInput {
    item: Scalars['Int'];
    modifiers: Scalars['JSON'];
}
/** The output of our create `Item` mutation. */
export interface CreateItemPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Item` that was created by this mutation. */
    item?: ItemGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Item`. May be used by Relay 1. */
    itemEdge?: (ItemsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Item`. */
            orderBy?: (ItemsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Item` mutation. */
export interface CreateItemInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Item` to be created by this mutation. */
    item: ItemInput;
}
/** An input for mutations affecting `Item` */
export interface ItemInput {
    id: Scalars['Int'];
    name: Scalars['String'];
    descid?: (Scalars['String'] | null);
    image: Scalars['String'];
    uses: (ItemUse | null)[];
    quest: Scalars['Boolean'];
    gift: Scalars['Boolean'];
    tradeable: Scalars['Boolean'];
    discardable: Scalars['Boolean'];
    autosell: Scalars['Int'];
    plural?: (Scalars['String'] | null);
    ambiguous?: (Scalars['Boolean'] | null);
}
/** The output of our create `Location` mutation. */
export interface CreateLocationPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Location` that was created by this mutation. */
    location?: LocationGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Location`. May be used by Relay 1. */
    locationEdge?: (LocationsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Location`. */
            orderBy?: (LocationsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Location` mutation. */
export interface CreateLocationInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Location` to be created by this mutation. */
    location: LocationInput;
}
/** An input for mutations affecting `Location` */
export interface LocationInput {
    id?: (Scalars['Int'] | null);
    name: Scalars['String'];
    zone: Scalars['String'];
    url: Scalars['String'];
    difficulty: LocationDifficulty;
    environment: LocationEnvironment;
    statRequirement: Scalars['Int'];
    waterLevel?: (Scalars['Int'] | null);
    overdrunk: Scalars['Boolean'];
    nowander: Scalars['Boolean'];
    combatRate: Scalars['Int'];
}
/** The output of our create `Meta` mutation. */
export interface CreateMetaPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Meta` that was created by this mutation. */
    meta?: MetaGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Meta`. May be used by Relay 1. */
    metaEdge?: (MetasEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Meta`. */
            orderBy?: (MetasOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Meta` mutation. */
export interface CreateMetaInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Meta` to be created by this mutation. */
    meta: MetaInput;
}
/** An input for mutations affecting `Meta` */
export interface MetaInput {
    lastUpdate?: (Scalars['Datetime'] | null);
}
/** The output of our create `MonsterDrop` mutation. */
export interface CreateMonsterDropPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `MonsterDrop` that was created by this mutation. */
    monsterDrop?: MonsterDropGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Monster` that is related to this `MonsterDrop`. */
    monsterByMonster?: MonsterGenqlSelection;
    /** Reads a single `Item` that is related to this `MonsterDrop`. */
    itemByItem?: ItemGenqlSelection;
    /** An edge for our `MonsterDrop`. May be used by Relay 1. */
    monsterDropEdge?: (MonsterDropsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `MonsterDrop`. */
            orderBy?: (MonsterDropsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `MonsterDrop` mutation. */
export interface CreateMonsterDropInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `MonsterDrop` to be created by this mutation. */
    monsterDrop: MonsterDropInput;
}
/** An input for mutations affecting `MonsterDrop` */
export interface MonsterDropInput {
    monster: Scalars['Int'];
    item: Scalars['Int'];
    rate: Scalars['Int'];
    category?: (MonsterDropCategory | null);
}
/** The output of our create `Monster` mutation. */
export interface CreateMonsterPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Monster` that was created by this mutation. */
    monster?: MonsterGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Monster`. May be used by Relay 1. */
    monsterEdge?: (MonstersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Monster`. */
            orderBy?: (MonstersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Monster` mutation. */
export interface CreateMonsterInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Monster` to be created by this mutation. */
    monster: MonsterInput;
}
/** An input for mutations affecting `Monster` */
export interface MonsterInput {
    ambiguous?: (Scalars['Boolean'] | null);
    article: Scalars['String'];
    attack: Scalars['String'];
    boss: Scalars['Boolean'];
    defence: Scalars['String'];
    drippy: Scalars['Boolean'];
    element: MonsterElement;
    elementalAttack: MonsterElement;
    elementalDefence: MonsterElement;
    elementalResistance: Scalars['String'];
    experience?: (Scalars['String'] | null);
    free: Scalars['Boolean'];
    ghost: Scalars['Boolean'];
    groupSize: Scalars['Int'];
    hp: Scalars['String'];
    id: Scalars['Int'];
    image: (Scalars['String'] | null)[];
    initiative: Scalars['String'];
    itemBlockChance: Scalars['Float'];
    lucky: Scalars['Boolean'];
    manuel?: (Scalars['String'] | null);
    meat?: (Scalars['Float'] | null);
    meatExpression?: (Scalars['String'] | null);
    monsterLevelMultiplier: Scalars['String'];
    name: Scalars['String'];
    nobanish: Scalars['Boolean'];
    nocopy: Scalars['Boolean'];
    nomanuel: Scalars['Boolean'];
    nowander: Scalars['Boolean'];
    nowish: Scalars['Boolean'];
    phylum: Scalars['String'];
    physicalResistance: Scalars['String'];
    poison?: (Scalars['String'] | null);
    scaling: Scalars['String'];
    scalingCap: Scalars['String'];
    scalingFloor: Scalars['String'];
    skillBlockChance: Scalars['Float'];
    snake: Scalars['Boolean'];
    spellBlockChance: Scalars['Float'];
    sprinkles: (Scalars['String'] | null)[];
    superlikely: Scalars['Boolean'];
    ultrarare: Scalars['Boolean'];
    wanderer: Scalars['Boolean'];
    wiki?: (Scalars['String'] | null);
    wish: Scalars['Boolean'];
}
/** The output of our create `NativeMonster` mutation. */
export interface CreateNativeMonsterPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `NativeMonster` that was created by this mutation. */
    nativeMonster?: NativeMonsterGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Location` that is related to this `NativeMonster`. */
    locationByLocation?: LocationGenqlSelection;
    /** Reads a single `Monster` that is related to this `NativeMonster`. */
    monsterByMonster?: MonsterGenqlSelection;
    /** An edge for our `NativeMonster`. May be used by Relay 1. */
    nativeMonsterEdge?: (NativeMonstersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `NativeMonster`. */
            orderBy?: (NativeMonstersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `NativeMonster` mutation. */
export interface CreateNativeMonsterInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `NativeMonster` to be created by this mutation. */
    nativeMonster: NativeMonsterInput;
}
/** An input for mutations affecting `NativeMonster` */
export interface NativeMonsterInput {
    location: Scalars['String'];
    monster: Scalars['Int'];
    weight: Scalars['Float'];
    rejection: Scalars['Float'];
    parity?: (Scalars['Int'] | null);
}
/** The output of our create `OutfitEquipment` mutation. */
export interface CreateOutfitEquipmentPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `OutfitEquipment` that was created by this mutation. */
    outfitEquipment?: OutfitEquipmentGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Outfit` that is related to this `OutfitEquipment`. */
    outfitByOutfit?: OutfitGenqlSelection;
    /** Reads a single `Item` that is related to this `OutfitEquipment`. */
    itemByEquipment?: ItemGenqlSelection;
    /** An edge for our `OutfitEquipment`. May be used by Relay 1. */
    outfitEquipmentEdge?: (OutfitEquipmentsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `OutfitEquipment`. */
            orderBy?: (OutfitEquipmentsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `OutfitEquipment` mutation. */
export interface CreateOutfitEquipmentInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `OutfitEquipment` to be created by this mutation. */
    outfitEquipment: OutfitEquipmentInput;
}
/** An input for mutations affecting `OutfitEquipment` */
export interface OutfitEquipmentInput {
    outfit: Scalars['Int'];
    equipment: Scalars['Int'];
}
/** The output of our create `OutfitTreat` mutation. */
export interface CreateOutfitTreatPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `OutfitTreat` that was created by this mutation. */
    outfitTreat?: OutfitTreatGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Outfit` that is related to this `OutfitTreat`. */
    outfitByOutfit?: OutfitGenqlSelection;
    /** Reads a single `Item` that is related to this `OutfitTreat`. */
    itemByItem?: ItemGenqlSelection;
    /** An edge for our `OutfitTreat`. May be used by Relay 1. */
    outfitTreatEdge?: (OutfitTreatsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `OutfitTreat`. */
            orderBy?: (OutfitTreatsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `OutfitTreat` mutation. */
export interface CreateOutfitTreatInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `OutfitTreat` to be created by this mutation. */
    outfitTreat: OutfitTreatInput;
}
/** An input for mutations affecting `OutfitTreat` */
export interface OutfitTreatInput {
    outfit?: (Scalars['Int'] | null);
    item?: (Scalars['Int'] | null);
    chance: Scalars['Float'];
}
/** The output of our create `Outfit` mutation. */
export interface CreateOutfitPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Outfit` that was created by this mutation. */
    outfit?: OutfitGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Outfit`. May be used by Relay 1. */
    outfitEdge?: (OutfitsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Outfit`. */
            orderBy?: (OutfitsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Outfit` mutation. */
export interface CreateOutfitInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Outfit` to be created by this mutation. */
    outfit: OutfitInput;
}
/** An input for mutations affecting `Outfit` */
export interface OutfitInput {
    id: Scalars['Int'];
    name: Scalars['String'];
    image: Scalars['String'];
}
/** The output of our create `Path` mutation. */
export interface CreatePathPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Path` that was created by this mutation. */
    path?: PathGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Path`. May be used by Relay 1. */
    pathEdge?: (PathsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Path`. */
            orderBy?: (PathsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Path` mutation. */
export interface CreatePathInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Path` to be created by this mutation. */
    path: PathInput;
}
/** An input for mutations affecting `Path` */
export interface PathInput {
    id: Scalars['Int'];
    name: Scalars['String'];
    enumName: Scalars['String'];
    image?: (Scalars['String'] | null);
    isAvatar: Scalars['Boolean'];
    article?: (Scalars['String'] | null);
    pointsPreference?: (Scalars['String'] | null);
    maximumPoints: Scalars['Int'];
    bucket: Scalars['Boolean'];
    stomachCapacity: Scalars['Int'];
    liverCapacity: Scalars['Int'];
    spleenCapacity: Scalars['Int'];
}
/** The output of our create `SkillModifier` mutation. */
export interface CreateSkillModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `SkillModifier` that was created by this mutation. */
    skillModifier?: SkillModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill?: SkillGenqlSelection;
    /** An edge for our `SkillModifier`. May be used by Relay 1. */
    skillModifierEdge?: (SkillModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `SkillModifier`. */
            orderBy?: (SkillModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `SkillModifier` mutation. */
export interface CreateSkillModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `SkillModifier` to be created by this mutation. */
    skillModifier: SkillModifierInput;
}
/** An input for mutations affecting `SkillModifier` */
export interface SkillModifierInput {
    skill: Scalars['Int'];
    modifiers: Scalars['JSON'];
}
/** The output of our create `Skill` mutation. */
export interface CreateSkillPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Skill` that was created by this mutation. */
    skill?: SkillGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Skill`. May be used by Relay 1. */
    skillEdge?: (SkillsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Skill`. */
            orderBy?: (SkillsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the create `Skill` mutation. */
export interface CreateSkillInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The `Skill` to be created by this mutation. */
    skill: SkillInput;
}
/** An input for mutations affecting `Skill` */
export interface SkillInput {
    id: Scalars['Int'];
    name: Scalars['String'];
    image: Scalars['String'];
    tags: (SkillTag | null)[];
    mpCost: Scalars['Int'];
    duration: Scalars['Int'];
    guildLevel?: (Scalars['Int'] | null);
    maxLevel?: (Scalars['Int'] | null);
    permable: Scalars['Boolean'];
    ambiguous?: (Scalars['Boolean'] | null);
}
/** The output of our update `Class` mutation. */
export interface UpdateClassPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Class` that was updated by this mutation. */
    class?: ClassGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath?: PathGenqlSelection;
    /** An edge for our `Class`. May be used by Relay 1. */
    classEdge?: (ClassesEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Class`. */
            orderBy?: (ClassesOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateClass` mutation. */
export interface UpdateClassInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Class` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Class` being updated. */
    classPatch: ClassPatch;
}
/** Represents an update to a `Class`. Fields that are set will be updated. */
export interface ClassPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    enumName?: (Scalars['String'] | null);
    image?: (Scalars['String'] | null);
    primeStatIndex?: (Scalars['Int'] | null);
    path?: (Scalars['Int'] | null);
    stun?: (Scalars['String'] | null);
    stomachCapacity?: (Scalars['Int'] | null);
    liverCapacity?: (Scalars['Int'] | null);
    spleenCapacity?: (Scalars['Int'] | null);
}
/** All input for the `updateClassById` mutation. */
export interface UpdateClassByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Class` being updated. */
    classPatch: ClassPatch;
    id: Scalars['Int'];
}
/** The output of our update `Consumable` mutation. */
export interface UpdateConsumablePayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Consumable` that was updated by this mutation. */
    consumable?: ConsumableGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById?: ItemGenqlSelection;
    /** An edge for our `Consumable`. May be used by Relay 1. */
    consumableEdge?: (ConsumablesEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Consumable`. */
            orderBy?: (ConsumablesOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateConsumable` mutation. */
export interface UpdateConsumableInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Consumable` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Consumable` being updated. */
    consumablePatch: ConsumablePatch;
}
/** Represents an update to a `Consumable`. Fields that are set will be updated. */
export interface ConsumablePatch {
    id?: (Scalars['Int'] | null);
    stomach?: (Scalars['Int'] | null);
    liver?: (Scalars['Int'] | null);
    spleen?: (Scalars['Int'] | null);
    levelRequirement?: (Scalars['Int'] | null);
    quality?: (ConsumableQuality | null);
    adventureRange?: (Scalars['String'] | null);
    adventures?: (Scalars['Float'] | null);
    muscle?: (Scalars['Float'] | null);
    muscleRange?: (Scalars['String'] | null);
    mysticality?: (Scalars['Float'] | null);
    mysticalityRange?: (Scalars['String'] | null);
    moxie?: (Scalars['Float'] | null);
    moxieRange?: (Scalars['String'] | null);
    notes?: (Scalars['String'] | null);
}
/** All input for the `updateConsumableById` mutation. */
export interface UpdateConsumableByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Consumable` being updated. */
    consumablePatch: ConsumablePatch;
    id: Scalars['Int'];
}
/** The output of our update `EffectModifier` mutation. */
export interface UpdateEffectModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `EffectModifier` that was updated by this mutation. */
    effectModifier?: EffectModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect?: EffectGenqlSelection;
    /** An edge for our `EffectModifier`. May be used by Relay 1. */
    effectModifierEdge?: (EffectModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `EffectModifier`. */
            orderBy?: (EffectModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateEffectModifier` mutation. */
export interface UpdateEffectModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `EffectModifier` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `EffectModifier` being updated. */
    effectModifierPatch: EffectModifierPatch;
}
/** Represents an update to a `EffectModifier`. Fields that are set will be updated. */
export interface EffectModifierPatch {
    effect?: (Scalars['Int'] | null);
    modifiers?: (Scalars['JSON'] | null);
}
/** All input for the `updateEffectModifierByEffect` mutation. */
export interface UpdateEffectModifierByEffectInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `EffectModifier` being updated. */
    effectModifierPatch: EffectModifierPatch;
    effect: Scalars['Int'];
}
/** The output of our update `Effect` mutation. */
export interface UpdateEffectPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Effect` that was updated by this mutation. */
    effect?: EffectGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Effect`. May be used by Relay 1. */
    effectEdge?: (EffectsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Effect`. */
            orderBy?: (EffectsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateEffect` mutation. */
export interface UpdateEffectInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Effect` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Effect` being updated. */
    effectPatch: EffectPatch;
}
/** Represents an update to a `Effect`. Fields that are set will be updated. */
export interface EffectPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    descid?: (Scalars['String'] | null);
    image?: (Scalars['String'] | null);
    quality?: (EffectQuality | null);
    nohookah?: (Scalars['Boolean'] | null);
    nopvp?: (Scalars['Boolean'] | null);
    noremove?: (Scalars['Boolean'] | null);
    song?: (Scalars['Boolean'] | null);
    actions?: ((Scalars['String'] | null)[] | null);
    ambiguous?: (Scalars['Boolean'] | null);
}
/** All input for the `updateEffectById` mutation. */
export interface UpdateEffectByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Effect` being updated. */
    effectPatch: EffectPatch;
    id: Scalars['Int'];
}
/** All input for the `updateEffectByDescid` mutation. */
export interface UpdateEffectByDescidInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Effect` being updated. */
    effectPatch: EffectPatch;
    descid: Scalars['String'];
}
/** The output of our update `Equipment` mutation. */
export interface UpdateEquipmentPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Equipment` that was updated by this mutation. */
    equipment?: EquipmentGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById?: ItemGenqlSelection;
    /** An edge for our `Equipment`. May be used by Relay 1. */
    equipmentEdge?: (EquipmentEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Equipment`. */
            orderBy?: (EquipmentOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateEquipment` mutation. */
export interface UpdateEquipmentInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Equipment` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Equipment` being updated. */
    equipmentPatch: EquipmentPatch;
}
/** Represents an update to a `Equipment`. Fields that are set will be updated. */
export interface EquipmentPatch {
    id?: (Scalars['Int'] | null);
    power?: (Scalars['Int'] | null);
    musRequirement?: (Scalars['Int'] | null);
    mysRequirement?: (Scalars['Int'] | null);
    moxRequirement?: (Scalars['Int'] | null);
    type?: (Scalars['String'] | null);
    hands?: (Scalars['Int'] | null);
}
/** All input for the `updateEquipmentById` mutation. */
export interface UpdateEquipmentByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Equipment` being updated. */
    equipmentPatch: EquipmentPatch;
    id: Scalars['Int'];
}
/** The output of our update `FamiliarModifier` mutation. */
export interface UpdateFamiliarModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `FamiliarModifier` that was updated by this mutation. */
    familiarModifier?: FamiliarModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar?: FamiliarGenqlSelection;
    /** An edge for our `FamiliarModifier`. May be used by Relay 1. */
    familiarModifierEdge?: (FamiliarModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `FamiliarModifier`. */
            orderBy?: (FamiliarModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateFamiliarModifier` mutation. */
export interface UpdateFamiliarModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `FamiliarModifier` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `FamiliarModifier` being updated. */
    familiarModifierPatch: FamiliarModifierPatch;
}
/** Represents an update to a `FamiliarModifier`. Fields that are set will be updated. */
export interface FamiliarModifierPatch {
    familiar?: (Scalars['Int'] | null);
    modifiers?: (Scalars['JSON'] | null);
}
/** All input for the `updateFamiliarModifierByFamiliar` mutation. */
export interface UpdateFamiliarModifierByFamiliarInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `FamiliarModifier` being updated. */
    familiarModifierPatch: FamiliarModifierPatch;
    familiar: Scalars['Int'];
}
/** The output of our update `Familiar` mutation. */
export interface UpdateFamiliarPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Familiar` that was updated by this mutation. */
    familiar?: FamiliarGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva?: ItemGenqlSelection;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment?: ItemGenqlSelection;
    /** An edge for our `Familiar`. May be used by Relay 1. */
    familiarEdge?: (FamiliarsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Familiar`. */
            orderBy?: (FamiliarsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateFamiliar` mutation. */
export interface UpdateFamiliarInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Familiar` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Familiar` being updated. */
    familiarPatch: FamiliarPatch;
}
/** Represents an update to a `Familiar`. Fields that are set will be updated. */
export interface FamiliarPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    image?: (Scalars['String'] | null);
    categories?: ((FamiliarCategory | null)[] | null);
    larva?: (Scalars['Int'] | null);
    equipment?: (Scalars['Int'] | null);
    cageMatch?: (Scalars['Int'] | null);
    scavengerHunt?: (Scalars['Int'] | null);
    obstacleCourse?: (Scalars['Int'] | null);
    hideAndSeek?: (Scalars['Int'] | null);
    attributes?: ((Scalars['String'] | null)[] | null);
}
/** All input for the `updateFamiliarById` mutation. */
export interface UpdateFamiliarByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Familiar` being updated. */
    familiarPatch: FamiliarPatch;
    id: Scalars['Int'];
}
/** The output of our update `FoldGroup` mutation. */
export interface UpdateFoldGroupPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `FoldGroup` that was updated by this mutation. */
    foldGroup?: FoldGroupGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `FoldGroup`. May be used by Relay 1. */
    foldGroupEdge?: (FoldGroupsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `FoldGroup`. */
            orderBy?: (FoldGroupsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateFoldGroup` mutation. */
export interface UpdateFoldGroupInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `FoldGroup` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `FoldGroup` being updated. */
    foldGroupPatch: FoldGroupPatch;
}
/** Represents an update to a `FoldGroup`. Fields that are set will be updated. */
export interface FoldGroupPatch {
    id?: (Scalars['Int'] | null);
    damage?: (Scalars['Int'] | null);
}
/** All input for the `updateFoldGroupById` mutation. */
export interface UpdateFoldGroupByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `FoldGroup` being updated. */
    foldGroupPatch: FoldGroupPatch;
    id: Scalars['Int'];
}
/** The output of our update `ItemModifier` mutation. */
export interface UpdateItemModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `ItemModifier` that was updated by this mutation. */
    itemModifier?: ItemModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem?: ItemGenqlSelection;
    /** An edge for our `ItemModifier`. May be used by Relay 1. */
    itemModifierEdge?: (ItemModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `ItemModifier`. */
            orderBy?: (ItemModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateItemModifier` mutation. */
export interface UpdateItemModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `ItemModifier` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `ItemModifier` being updated. */
    itemModifierPatch: ItemModifierPatch;
}
/** Represents an update to a `ItemModifier`. Fields that are set will be updated. */
export interface ItemModifierPatch {
    item?: (Scalars['Int'] | null);
    modifiers?: (Scalars['JSON'] | null);
}
/** All input for the `updateItemModifierByItem` mutation. */
export interface UpdateItemModifierByItemInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `ItemModifier` being updated. */
    itemModifierPatch: ItemModifierPatch;
    item: Scalars['Int'];
}
/** The output of our update `Item` mutation. */
export interface UpdateItemPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Item` that was updated by this mutation. */
    item?: ItemGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Item`. May be used by Relay 1. */
    itemEdge?: (ItemsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Item`. */
            orderBy?: (ItemsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateItem` mutation. */
export interface UpdateItemInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Item` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Item` being updated. */
    itemPatch: ItemPatch;
}
/** Represents an update to a `Item`. Fields that are set will be updated. */
export interface ItemPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    descid?: (Scalars['String'] | null);
    image?: (Scalars['String'] | null);
    uses?: ((ItemUse | null)[] | null);
    quest?: (Scalars['Boolean'] | null);
    gift?: (Scalars['Boolean'] | null);
    tradeable?: (Scalars['Boolean'] | null);
    discardable?: (Scalars['Boolean'] | null);
    autosell?: (Scalars['Int'] | null);
    plural?: (Scalars['String'] | null);
    ambiguous?: (Scalars['Boolean'] | null);
}
/** All input for the `updateItemById` mutation. */
export interface UpdateItemByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Item` being updated. */
    itemPatch: ItemPatch;
    id: Scalars['Int'];
}
/** All input for the `updateItemByDescid` mutation. */
export interface UpdateItemByDescidInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Item` being updated. */
    itemPatch: ItemPatch;
    descid: Scalars['String'];
}
/** The output of our update `Location` mutation. */
export interface UpdateLocationPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Location` that was updated by this mutation. */
    location?: LocationGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Location`. May be used by Relay 1. */
    locationEdge?: (LocationsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Location`. */
            orderBy?: (LocationsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateLocation` mutation. */
export interface UpdateLocationInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Location` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Location` being updated. */
    locationPatch: LocationPatch;
}
/** Represents an update to a `Location`. Fields that are set will be updated. */
export interface LocationPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    zone?: (Scalars['String'] | null);
    url?: (Scalars['String'] | null);
    difficulty?: (LocationDifficulty | null);
    environment?: (LocationEnvironment | null);
    statRequirement?: (Scalars['Int'] | null);
    waterLevel?: (Scalars['Int'] | null);
    overdrunk?: (Scalars['Boolean'] | null);
    nowander?: (Scalars['Boolean'] | null);
    combatRate?: (Scalars['Int'] | null);
}
/** All input for the `updateLocationByName` mutation. */
export interface UpdateLocationByNameInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Location` being updated. */
    locationPatch: LocationPatch;
    name: Scalars['String'];
}
/** The output of our update `Monster` mutation. */
export interface UpdateMonsterPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Monster` that was updated by this mutation. */
    monster?: MonsterGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Monster`. May be used by Relay 1. */
    monsterEdge?: (MonstersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Monster`. */
            orderBy?: (MonstersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateMonster` mutation. */
export interface UpdateMonsterInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Monster` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Monster` being updated. */
    monsterPatch: MonsterPatch;
}
/** Represents an update to a `Monster`. Fields that are set will be updated. */
export interface MonsterPatch {
    ambiguous?: (Scalars['Boolean'] | null);
    article?: (Scalars['String'] | null);
    attack?: (Scalars['String'] | null);
    boss?: (Scalars['Boolean'] | null);
    defence?: (Scalars['String'] | null);
    drippy?: (Scalars['Boolean'] | null);
    element?: (MonsterElement | null);
    elementalAttack?: (MonsterElement | null);
    elementalDefence?: (MonsterElement | null);
    elementalResistance?: (Scalars['String'] | null);
    experience?: (Scalars['String'] | null);
    free?: (Scalars['Boolean'] | null);
    ghost?: (Scalars['Boolean'] | null);
    groupSize?: (Scalars['Int'] | null);
    hp?: (Scalars['String'] | null);
    id?: (Scalars['Int'] | null);
    image?: ((Scalars['String'] | null)[] | null);
    initiative?: (Scalars['String'] | null);
    itemBlockChance?: (Scalars['Float'] | null);
    lucky?: (Scalars['Boolean'] | null);
    manuel?: (Scalars['String'] | null);
    meat?: (Scalars['Float'] | null);
    meatExpression?: (Scalars['String'] | null);
    monsterLevelMultiplier?: (Scalars['String'] | null);
    name?: (Scalars['String'] | null);
    nobanish?: (Scalars['Boolean'] | null);
    nocopy?: (Scalars['Boolean'] | null);
    nomanuel?: (Scalars['Boolean'] | null);
    nowander?: (Scalars['Boolean'] | null);
    nowish?: (Scalars['Boolean'] | null);
    phylum?: (Scalars['String'] | null);
    physicalResistance?: (Scalars['String'] | null);
    poison?: (Scalars['String'] | null);
    scaling?: (Scalars['String'] | null);
    scalingCap?: (Scalars['String'] | null);
    scalingFloor?: (Scalars['String'] | null);
    skillBlockChance?: (Scalars['Float'] | null);
    snake?: (Scalars['Boolean'] | null);
    spellBlockChance?: (Scalars['Float'] | null);
    sprinkles?: ((Scalars['String'] | null)[] | null);
    superlikely?: (Scalars['Boolean'] | null);
    ultrarare?: (Scalars['Boolean'] | null);
    wanderer?: (Scalars['Boolean'] | null);
    wiki?: (Scalars['String'] | null);
    wish?: (Scalars['Boolean'] | null);
}
/** All input for the `updateMonsterById` mutation. */
export interface UpdateMonsterByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Monster` being updated. */
    monsterPatch: MonsterPatch;
    id: Scalars['Int'];
}
/** The output of our update `Outfit` mutation. */
export interface UpdateOutfitPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Outfit` that was updated by this mutation. */
    outfit?: OutfitGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Outfit`. May be used by Relay 1. */
    outfitEdge?: (OutfitsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Outfit`. */
            orderBy?: (OutfitsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateOutfit` mutation. */
export interface UpdateOutfitInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Outfit` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Outfit` being updated. */
    outfitPatch: OutfitPatch;
}
/** Represents an update to a `Outfit`. Fields that are set will be updated. */
export interface OutfitPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    image?: (Scalars['String'] | null);
}
/** All input for the `updateOutfitById` mutation. */
export interface UpdateOutfitByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Outfit` being updated. */
    outfitPatch: OutfitPatch;
    id: Scalars['Int'];
}
/** The output of our update `Path` mutation. */
export interface UpdatePathPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Path` that was updated by this mutation. */
    path?: PathGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Path`. May be used by Relay 1. */
    pathEdge?: (PathsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Path`. */
            orderBy?: (PathsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updatePath` mutation. */
export interface UpdatePathInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Path` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Path` being updated. */
    pathPatch: PathPatch;
}
/** Represents an update to a `Path`. Fields that are set will be updated. */
export interface PathPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    enumName?: (Scalars['String'] | null);
    image?: (Scalars['String'] | null);
    isAvatar?: (Scalars['Boolean'] | null);
    article?: (Scalars['String'] | null);
    pointsPreference?: (Scalars['String'] | null);
    maximumPoints?: (Scalars['Int'] | null);
    bucket?: (Scalars['Boolean'] | null);
    stomachCapacity?: (Scalars['Int'] | null);
    liverCapacity?: (Scalars['Int'] | null);
    spleenCapacity?: (Scalars['Int'] | null);
}
/** All input for the `updatePathById` mutation. */
export interface UpdatePathByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Path` being updated. */
    pathPatch: PathPatch;
    id: Scalars['Int'];
}
/** All input for the `updatePathByImage` mutation. */
export interface UpdatePathByImageInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Path` being updated. */
    pathPatch: PathPatch;
    image: Scalars['String'];
}
/** The output of our update `SkillModifier` mutation. */
export interface UpdateSkillModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `SkillModifier` that was updated by this mutation. */
    skillModifier?: SkillModifierGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill?: SkillGenqlSelection;
    /** An edge for our `SkillModifier`. May be used by Relay 1. */
    skillModifierEdge?: (SkillModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `SkillModifier`. */
            orderBy?: (SkillModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateSkillModifier` mutation. */
export interface UpdateSkillModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `SkillModifier` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `SkillModifier` being updated. */
    skillModifierPatch: SkillModifierPatch;
}
/** Represents an update to a `SkillModifier`. Fields that are set will be updated. */
export interface SkillModifierPatch {
    skill?: (Scalars['Int'] | null);
    modifiers?: (Scalars['JSON'] | null);
}
/** All input for the `updateSkillModifierBySkill` mutation. */
export interface UpdateSkillModifierBySkillInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `SkillModifier` being updated. */
    skillModifierPatch: SkillModifierPatch;
    skill: Scalars['Int'];
}
/** The output of our update `Skill` mutation. */
export interface UpdateSkillPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Skill` that was updated by this mutation. */
    skill?: SkillGenqlSelection;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Skill`. May be used by Relay 1. */
    skillEdge?: (SkillsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Skill`. */
            orderBy?: (SkillsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `updateSkill` mutation. */
export interface UpdateSkillInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Skill` to be updated. */
    nodeId: Scalars['ID'];
    /** An object where the defined keys will be set on the `Skill` being updated. */
    skillPatch: SkillPatch;
}
/** Represents an update to a `Skill`. Fields that are set will be updated. */
export interface SkillPatch {
    id?: (Scalars['Int'] | null);
    name?: (Scalars['String'] | null);
    image?: (Scalars['String'] | null);
    tags?: ((SkillTag | null)[] | null);
    mpCost?: (Scalars['Int'] | null);
    duration?: (Scalars['Int'] | null);
    guildLevel?: (Scalars['Int'] | null);
    maxLevel?: (Scalars['Int'] | null);
    permable?: (Scalars['Boolean'] | null);
    ambiguous?: (Scalars['Boolean'] | null);
}
/** All input for the `updateSkillById` mutation. */
export interface UpdateSkillByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** An object where the defined keys will be set on the `Skill` being updated. */
    skillPatch: SkillPatch;
    id: Scalars['Int'];
}
/** The output of our delete `Class` mutation. */
export interface DeleteClassPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Class` that was deleted by this mutation. */
    class?: ClassGenqlSelection;
    deletedClassId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Path` that is related to this `Class`. */
    pathByPath?: PathGenqlSelection;
    /** An edge for our `Class`. May be used by Relay 1. */
    classEdge?: (ClassesEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Class`. */
            orderBy?: (ClassesOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteClass` mutation. */
export interface DeleteClassInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Class` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteClassById` mutation. */
export interface DeleteClassByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** The output of our delete `Consumable` mutation. */
export interface DeleteConsumablePayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Consumable` that was deleted by this mutation. */
    consumable?: ConsumableGenqlSelection;
    deletedConsumableId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Consumable`. */
    itemById?: ItemGenqlSelection;
    /** An edge for our `Consumable`. May be used by Relay 1. */
    consumableEdge?: (ConsumablesEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Consumable`. */
            orderBy?: (ConsumablesOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteConsumable` mutation. */
export interface DeleteConsumableInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Consumable` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteConsumableById` mutation. */
export interface DeleteConsumableByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** The output of our delete `EffectModifier` mutation. */
export interface DeleteEffectModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `EffectModifier` that was deleted by this mutation. */
    effectModifier?: EffectModifierGenqlSelection;
    deletedEffectModifierId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Effect` that is related to this `EffectModifier`. */
    effectByEffect?: EffectGenqlSelection;
    /** An edge for our `EffectModifier`. May be used by Relay 1. */
    effectModifierEdge?: (EffectModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `EffectModifier`. */
            orderBy?: (EffectModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteEffectModifier` mutation. */
export interface DeleteEffectModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `EffectModifier` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteEffectModifierByEffect` mutation. */
export interface DeleteEffectModifierByEffectInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    effect: Scalars['Int'];
}
/** The output of our delete `Effect` mutation. */
export interface DeleteEffectPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Effect` that was deleted by this mutation. */
    effect?: EffectGenqlSelection;
    deletedEffectId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Effect`. May be used by Relay 1. */
    effectEdge?: (EffectsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Effect`. */
            orderBy?: (EffectsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteEffect` mutation. */
export interface DeleteEffectInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Effect` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteEffectById` mutation. */
export interface DeleteEffectByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** All input for the `deleteEffectByDescid` mutation. */
export interface DeleteEffectByDescidInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    descid: Scalars['String'];
}
/** The output of our delete `Equipment` mutation. */
export interface DeleteEquipmentPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Equipment` that was deleted by this mutation. */
    equipment?: EquipmentGenqlSelection;
    deletedEquipmentId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Equipment`. */
    itemById?: ItemGenqlSelection;
    /** An edge for our `Equipment`. May be used by Relay 1. */
    equipmentEdge?: (EquipmentEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Equipment`. */
            orderBy?: (EquipmentOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteEquipment` mutation. */
export interface DeleteEquipmentInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Equipment` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteEquipmentById` mutation. */
export interface DeleteEquipmentByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** The output of our delete `FamiliarModifier` mutation. */
export interface DeleteFamiliarModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `FamiliarModifier` that was deleted by this mutation. */
    familiarModifier?: FamiliarModifierGenqlSelection;
    deletedFamiliarModifierId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Familiar` that is related to this `FamiliarModifier`. */
    familiarByFamiliar?: FamiliarGenqlSelection;
    /** An edge for our `FamiliarModifier`. May be used by Relay 1. */
    familiarModifierEdge?: (FamiliarModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `FamiliarModifier`. */
            orderBy?: (FamiliarModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteFamiliarModifier` mutation. */
export interface DeleteFamiliarModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `FamiliarModifier` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteFamiliarModifierByFamiliar` mutation. */
export interface DeleteFamiliarModifierByFamiliarInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    familiar: Scalars['Int'];
}
/** The output of our delete `Familiar` mutation. */
export interface DeleteFamiliarPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Familiar` that was deleted by this mutation. */
    familiar?: FamiliarGenqlSelection;
    deletedFamiliarId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByLarva?: ItemGenqlSelection;
    /** Reads a single `Item` that is related to this `Familiar`. */
    itemByEquipment?: ItemGenqlSelection;
    /** An edge for our `Familiar`. May be used by Relay 1. */
    familiarEdge?: (FamiliarsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Familiar`. */
            orderBy?: (FamiliarsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteFamiliar` mutation. */
export interface DeleteFamiliarInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Familiar` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteFamiliarById` mutation. */
export interface DeleteFamiliarByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** The output of our delete `FoldGroup` mutation. */
export interface DeleteFoldGroupPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `FoldGroup` that was deleted by this mutation. */
    foldGroup?: FoldGroupGenqlSelection;
    deletedFoldGroupId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `FoldGroup`. May be used by Relay 1. */
    foldGroupEdge?: (FoldGroupsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `FoldGroup`. */
            orderBy?: (FoldGroupsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteFoldGroup` mutation. */
export interface DeleteFoldGroupInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `FoldGroup` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteFoldGroupById` mutation. */
export interface DeleteFoldGroupByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** The output of our delete `ItemModifier` mutation. */
export interface DeleteItemModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `ItemModifier` that was deleted by this mutation. */
    itemModifier?: ItemModifierGenqlSelection;
    deletedItemModifierId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Item` that is related to this `ItemModifier`. */
    itemByItem?: ItemGenqlSelection;
    /** An edge for our `ItemModifier`. May be used by Relay 1. */
    itemModifierEdge?: (ItemModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `ItemModifier`. */
            orderBy?: (ItemModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteItemModifier` mutation. */
export interface DeleteItemModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `ItemModifier` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteItemModifierByItem` mutation. */
export interface DeleteItemModifierByItemInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    item: Scalars['Int'];
}
/** The output of our delete `Item` mutation. */
export interface DeleteItemPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Item` that was deleted by this mutation. */
    item?: ItemGenqlSelection;
    deletedItemId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Item`. May be used by Relay 1. */
    itemEdge?: (ItemsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Item`. */
            orderBy?: (ItemsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteItem` mutation. */
export interface DeleteItemInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Item` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteItemById` mutation. */
export interface DeleteItemByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** All input for the `deleteItemByDescid` mutation. */
export interface DeleteItemByDescidInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    descid: Scalars['String'];
}
/** The output of our delete `Location` mutation. */
export interface DeleteLocationPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Location` that was deleted by this mutation. */
    location?: LocationGenqlSelection;
    deletedLocationId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Location`. May be used by Relay 1. */
    locationEdge?: (LocationsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Location`. */
            orderBy?: (LocationsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteLocation` mutation. */
export interface DeleteLocationInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Location` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteLocationByName` mutation. */
export interface DeleteLocationByNameInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    name: Scalars['String'];
}
/** The output of our delete `Monster` mutation. */
export interface DeleteMonsterPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Monster` that was deleted by this mutation. */
    monster?: MonsterGenqlSelection;
    deletedMonsterId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Monster`. May be used by Relay 1. */
    monsterEdge?: (MonstersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Monster`. */
            orderBy?: (MonstersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteMonster` mutation. */
export interface DeleteMonsterInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Monster` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteMonsterById` mutation. */
export interface DeleteMonsterByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** The output of our delete `Outfit` mutation. */
export interface DeleteOutfitPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Outfit` that was deleted by this mutation. */
    outfit?: OutfitGenqlSelection;
    deletedOutfitId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Outfit`. May be used by Relay 1. */
    outfitEdge?: (OutfitsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Outfit`. */
            orderBy?: (OutfitsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteOutfit` mutation. */
export interface DeleteOutfitInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Outfit` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteOutfitById` mutation. */
export interface DeleteOutfitByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** The output of our delete `Path` mutation. */
export interface DeletePathPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Path` that was deleted by this mutation. */
    path?: PathGenqlSelection;
    deletedPathId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Path`. May be used by Relay 1. */
    pathEdge?: (PathsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Path`. */
            orderBy?: (PathsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deletePath` mutation. */
export interface DeletePathInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Path` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deletePathById` mutation. */
export interface DeletePathByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
/** All input for the `deletePathByImage` mutation. */
export interface DeletePathByImageInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    image: Scalars['String'];
}
/** The output of our delete `SkillModifier` mutation. */
export interface DeleteSkillModifierPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `SkillModifier` that was deleted by this mutation. */
    skillModifier?: SkillModifierGenqlSelection;
    deletedSkillModifierId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** Reads a single `Skill` that is related to this `SkillModifier`. */
    skillBySkill?: SkillGenqlSelection;
    /** An edge for our `SkillModifier`. May be used by Relay 1. */
    skillModifierEdge?: (SkillModifiersEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `SkillModifier`. */
            orderBy?: (SkillModifiersOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteSkillModifier` mutation. */
export interface DeleteSkillModifierInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `SkillModifier` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteSkillModifierBySkill` mutation. */
export interface DeleteSkillModifierBySkillInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    skill: Scalars['Int'];
}
/** The output of our delete `Skill` mutation. */
export interface DeleteSkillPayloadGenqlSelection {
    /**
     * The exact same `clientMutationId` that was provided in the mutation input,
     * unchanged and unused. May be used by a client to track mutations.
     */
    clientMutationId?: boolean | number;
    /** The `Skill` that was deleted by this mutation. */
    skill?: SkillGenqlSelection;
    deletedSkillId?: boolean | number;
    /** Our root query field type. Allows us to run any query from our mutation payload. */
    query?: QueryGenqlSelection;
    /** An edge for our `Skill`. May be used by Relay 1. */
    skillEdge?: (SkillsEdgeGenqlSelection & {
        __args?: {
            /** The method to use when ordering `Skill`. */
            orderBy?: (SkillsOrderBy[] | null);
        };
    });
    __typename?: boolean | number;
    __scalar?: boolean | number;
}
/** All input for the `deleteSkill` mutation. */
export interface DeleteSkillInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    /** The globally unique `ID` which will identify a single `Skill` to be deleted. */
    nodeId: Scalars['ID'];
}
/** All input for the `deleteSkillById` mutation. */
export interface DeleteSkillByIdInput {
    /**
     * An arbitrary string value with no semantic meaning. Will be included in the
     * payload verbatim. May be used to track mutations by the client.
     */
    clientMutationId?: (Scalars['String'] | null);
    id: Scalars['Int'];
}
export declare const isQuery: (obj?: {
    __typename?: any;
} | null) => obj is Query;
export declare const isNode: (obj?: {
    __typename?: any;
} | null) => obj is Node;
export declare const isClassesConnection: (obj?: {
    __typename?: any;
} | null) => obj is ClassesConnection;
export declare const isClass: (obj?: {
    __typename?: any;
} | null) => obj is Class;
export declare const isPath: (obj?: {
    __typename?: any;
} | null) => obj is Path;
export declare const isClassesEdge: (obj?: {
    __typename?: any;
} | null) => obj is ClassesEdge;
export declare const isPageInfo: (obj?: {
    __typename?: any;
} | null) => obj is PageInfo;
export declare const isConsumablesConnection: (obj?: {
    __typename?: any;
} | null) => obj is ConsumablesConnection;
export declare const isConsumable: (obj?: {
    __typename?: any;
} | null) => obj is Consumable;
export declare const isItem: (obj?: {
    __typename?: any;
} | null) => obj is Item;
export declare const isEquipment: (obj?: {
    __typename?: any;
} | null) => obj is Equipment;
export declare const isFamiliarsConnection: (obj?: {
    __typename?: any;
} | null) => obj is FamiliarsConnection;
export declare const isFamiliar: (obj?: {
    __typename?: any;
} | null) => obj is Familiar;
export declare const isFamiliarModifier: (obj?: {
    __typename?: any;
} | null) => obj is FamiliarModifier;
export declare const isFamiliarsEdge: (obj?: {
    __typename?: any;
} | null) => obj is FamiliarsEdge;
export declare const isMonsterDropsConnection: (obj?: {
    __typename?: any;
} | null) => obj is MonsterDropsConnection;
export declare const isMonsterDrop: (obj?: {
    __typename?: any;
} | null) => obj is MonsterDrop;
export declare const isMonster: (obj?: {
    __typename?: any;
} | null) => obj is Monster;
export declare const isNativeMonstersConnection: (obj?: {
    __typename?: any;
} | null) => obj is NativeMonstersConnection;
export declare const isNativeMonster: (obj?: {
    __typename?: any;
} | null) => obj is NativeMonster;
export declare const isLocation: (obj?: {
    __typename?: any;
} | null) => obj is Location;
export declare const isNativeMonstersEdge: (obj?: {
    __typename?: any;
} | null) => obj is NativeMonstersEdge;
export declare const isMonsterDropsEdge: (obj?: {
    __typename?: any;
} | null) => obj is MonsterDropsEdge;
export declare const isOutfitEquipmentsConnection: (obj?: {
    __typename?: any;
} | null) => obj is OutfitEquipmentsConnection;
export declare const isOutfitEquipment: (obj?: {
    __typename?: any;
} | null) => obj is OutfitEquipment;
export declare const isOutfit: (obj?: {
    __typename?: any;
} | null) => obj is Outfit;
export declare const isOutfitTreatsConnection: (obj?: {
    __typename?: any;
} | null) => obj is OutfitTreatsConnection;
export declare const isOutfitTreat: (obj?: {
    __typename?: any;
} | null) => obj is OutfitTreat;
export declare const isOutfitTreatsEdge: (obj?: {
    __typename?: any;
} | null) => obj is OutfitTreatsEdge;
export declare const isOutfitEquipmentsEdge: (obj?: {
    __typename?: any;
} | null) => obj is OutfitEquipmentsEdge;
export declare const isFoldablesConnection: (obj?: {
    __typename?: any;
} | null) => obj is FoldablesConnection;
export declare const isFoldable: (obj?: {
    __typename?: any;
} | null) => obj is Foldable;
export declare const isFoldGroup: (obj?: {
    __typename?: any;
} | null) => obj is FoldGroup;
export declare const isFoldablesEdge: (obj?: {
    __typename?: any;
} | null) => obj is FoldablesEdge;
export declare const isItemModifier: (obj?: {
    __typename?: any;
} | null) => obj is ItemModifier;
export declare const isConsumablesEdge: (obj?: {
    __typename?: any;
} | null) => obj is ConsumablesEdge;
export declare const isEffectModifiersConnection: (obj?: {
    __typename?: any;
} | null) => obj is EffectModifiersConnection;
export declare const isEffectModifier: (obj?: {
    __typename?: any;
} | null) => obj is EffectModifier;
export declare const isEffect: (obj?: {
    __typename?: any;
} | null) => obj is Effect;
export declare const isEffectModifiersEdge: (obj?: {
    __typename?: any;
} | null) => obj is EffectModifiersEdge;
export declare const isEffectsConnection: (obj?: {
    __typename?: any;
} | null) => obj is EffectsConnection;
export declare const isEffectsEdge: (obj?: {
    __typename?: any;
} | null) => obj is EffectsEdge;
export declare const isEquipmentConnection: (obj?: {
    __typename?: any;
} | null) => obj is EquipmentConnection;
export declare const isEquipmentEdge: (obj?: {
    __typename?: any;
} | null) => obj is EquipmentEdge;
export declare const isFamiliarModifiersConnection: (obj?: {
    __typename?: any;
} | null) => obj is FamiliarModifiersConnection;
export declare const isFamiliarModifiersEdge: (obj?: {
    __typename?: any;
} | null) => obj is FamiliarModifiersEdge;
export declare const isFoldGroupsConnection: (obj?: {
    __typename?: any;
} | null) => obj is FoldGroupsConnection;
export declare const isFoldGroupsEdge: (obj?: {
    __typename?: any;
} | null) => obj is FoldGroupsEdge;
export declare const isItemModifiersConnection: (obj?: {
    __typename?: any;
} | null) => obj is ItemModifiersConnection;
export declare const isItemModifiersEdge: (obj?: {
    __typename?: any;
} | null) => obj is ItemModifiersEdge;
export declare const isItemsConnection: (obj?: {
    __typename?: any;
} | null) => obj is ItemsConnection;
export declare const isItemsEdge: (obj?: {
    __typename?: any;
} | null) => obj is ItemsEdge;
export declare const isLocationsConnection: (obj?: {
    __typename?: any;
} | null) => obj is LocationsConnection;
export declare const isLocationsEdge: (obj?: {
    __typename?: any;
} | null) => obj is LocationsEdge;
export declare const isMetasConnection: (obj?: {
    __typename?: any;
} | null) => obj is MetasConnection;
export declare const isMeta: (obj?: {
    __typename?: any;
} | null) => obj is Meta;
export declare const isMetasEdge: (obj?: {
    __typename?: any;
} | null) => obj is MetasEdge;
export declare const isMonstersConnection: (obj?: {
    __typename?: any;
} | null) => obj is MonstersConnection;
export declare const isMonstersEdge: (obj?: {
    __typename?: any;
} | null) => obj is MonstersEdge;
export declare const isOutfitsConnection: (obj?: {
    __typename?: any;
} | null) => obj is OutfitsConnection;
export declare const isOutfitsEdge: (obj?: {
    __typename?: any;
} | null) => obj is OutfitsEdge;
export declare const isPathsConnection: (obj?: {
    __typename?: any;
} | null) => obj is PathsConnection;
export declare const isPathsEdge: (obj?: {
    __typename?: any;
} | null) => obj is PathsEdge;
export declare const isSkillModifiersConnection: (obj?: {
    __typename?: any;
} | null) => obj is SkillModifiersConnection;
export declare const isSkillModifier: (obj?: {
    __typename?: any;
} | null) => obj is SkillModifier;
export declare const isSkill: (obj?: {
    __typename?: any;
} | null) => obj is Skill;
export declare const isSkillModifiersEdge: (obj?: {
    __typename?: any;
} | null) => obj is SkillModifiersEdge;
export declare const isSkillsConnection: (obj?: {
    __typename?: any;
} | null) => obj is SkillsConnection;
export declare const isSkillsEdge: (obj?: {
    __typename?: any;
} | null) => obj is SkillsEdge;
export declare const isMutation: (obj?: {
    __typename?: any;
} | null) => obj is Mutation;
export declare const isCreateClassPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateClassPayload;
export declare const isCreateConsumablePayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateConsumablePayload;
export declare const isCreateEffectModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateEffectModifierPayload;
export declare const isCreateEffectPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateEffectPayload;
export declare const isCreateEquipmentPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateEquipmentPayload;
export declare const isCreateFamiliarModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateFamiliarModifierPayload;
export declare const isCreateFamiliarPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateFamiliarPayload;
export declare const isCreateFoldGroupPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateFoldGroupPayload;
export declare const isCreateFoldablePayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateFoldablePayload;
export declare const isCreateItemModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateItemModifierPayload;
export declare const isCreateItemPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateItemPayload;
export declare const isCreateLocationPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateLocationPayload;
export declare const isCreateMetaPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateMetaPayload;
export declare const isCreateMonsterDropPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateMonsterDropPayload;
export declare const isCreateMonsterPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateMonsterPayload;
export declare const isCreateNativeMonsterPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateNativeMonsterPayload;
export declare const isCreateOutfitEquipmentPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateOutfitEquipmentPayload;
export declare const isCreateOutfitTreatPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateOutfitTreatPayload;
export declare const isCreateOutfitPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateOutfitPayload;
export declare const isCreatePathPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreatePathPayload;
export declare const isCreateSkillModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateSkillModifierPayload;
export declare const isCreateSkillPayload: (obj?: {
    __typename?: any;
} | null) => obj is CreateSkillPayload;
export declare const isUpdateClassPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateClassPayload;
export declare const isUpdateConsumablePayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateConsumablePayload;
export declare const isUpdateEffectModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateEffectModifierPayload;
export declare const isUpdateEffectPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateEffectPayload;
export declare const isUpdateEquipmentPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateEquipmentPayload;
export declare const isUpdateFamiliarModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateFamiliarModifierPayload;
export declare const isUpdateFamiliarPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateFamiliarPayload;
export declare const isUpdateFoldGroupPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateFoldGroupPayload;
export declare const isUpdateItemModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateItemModifierPayload;
export declare const isUpdateItemPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateItemPayload;
export declare const isUpdateLocationPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateLocationPayload;
export declare const isUpdateMonsterPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateMonsterPayload;
export declare const isUpdateOutfitPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateOutfitPayload;
export declare const isUpdatePathPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdatePathPayload;
export declare const isUpdateSkillModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateSkillModifierPayload;
export declare const isUpdateSkillPayload: (obj?: {
    __typename?: any;
} | null) => obj is UpdateSkillPayload;
export declare const isDeleteClassPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteClassPayload;
export declare const isDeleteConsumablePayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteConsumablePayload;
export declare const isDeleteEffectModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteEffectModifierPayload;
export declare const isDeleteEffectPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteEffectPayload;
export declare const isDeleteEquipmentPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteEquipmentPayload;
export declare const isDeleteFamiliarModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteFamiliarModifierPayload;
export declare const isDeleteFamiliarPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteFamiliarPayload;
export declare const isDeleteFoldGroupPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteFoldGroupPayload;
export declare const isDeleteItemModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteItemModifierPayload;
export declare const isDeleteItemPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteItemPayload;
export declare const isDeleteLocationPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteLocationPayload;
export declare const isDeleteMonsterPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteMonsterPayload;
export declare const isDeleteOutfitPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteOutfitPayload;
export declare const isDeletePathPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeletePathPayload;
export declare const isDeleteSkillModifierPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteSkillModifierPayload;
export declare const isDeleteSkillPayload: (obj?: {
    __typename?: any;
} | null) => obj is DeleteSkillPayload;
export declare const enumClassesOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    ENUM_NAME_ASC: "ENUM_NAME_ASC";
    ENUM_NAME_DESC: "ENUM_NAME_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    PRIME_STAT_INDEX_ASC: "PRIME_STAT_INDEX_ASC";
    PRIME_STAT_INDEX_DESC: "PRIME_STAT_INDEX_DESC";
    PATH_ASC: "PATH_ASC";
    PATH_DESC: "PATH_DESC";
    STUN_ASC: "STUN_ASC";
    STUN_DESC: "STUN_DESC";
    STOMACH_CAPACITY_ASC: "STOMACH_CAPACITY_ASC";
    STOMACH_CAPACITY_DESC: "STOMACH_CAPACITY_DESC";
    LIVER_CAPACITY_ASC: "LIVER_CAPACITY_ASC";
    LIVER_CAPACITY_DESC: "LIVER_CAPACITY_DESC";
    SPLEEN_CAPACITY_ASC: "SPLEEN_CAPACITY_ASC";
    SPLEEN_CAPACITY_DESC: "SPLEEN_CAPACITY_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumConsumableQuality: {
    EPIC: "EPIC";
    AWESOME: "AWESOME";
    CHANGING: "CHANGING";
    CRAPPY: "CRAPPY";
    DECENT: "DECENT";
    DRIPPY: "DRIPPY";
    GOOD: "GOOD";
    NONE: "NONE";
    QUEST: "QUEST";
    SUPER_EPIC: "SUPER_EPIC";
    SUPER_ULTRA_EPIC: "SUPER_ULTRA_EPIC";
    SUPER_ULTRA_MEGA_EPIC: "SUPER_ULTRA_MEGA_EPIC";
    SUPER_ULTRA_MEGA_TURBO_EPIC: "SUPER_ULTRA_MEGA_TURBO_EPIC";
};
export declare const enumItemUse: {
    ACCESSORY: "ACCESSORY";
    AVATAR: "AVATAR";
    BOOTSKIN: "BOOTSKIN";
    BOOTSPUR: "BOOTSPUR";
    BOUNTY: "BOUNTY";
    CANDY: "CANDY";
    CANDY1: "CANDY1";
    CANDY2: "CANDY2";
    CARD: "CARD";
    CHOCOLATE: "CHOCOLATE";
    COMBAT: "COMBAT";
    COMBAT_REUSABLE: "COMBAT_REUSABLE";
    CONTAINER: "CONTAINER";
    COOK: "COOK";
    CURSE: "CURSE";
    DRINK: "DRINK";
    DRINK_HELPER: "DRINK_HELPER";
    FAMILIAR: "FAMILIAR";
    FANCY: "FANCY";
    FOLDER: "FOLDER";
    FOOD: "FOOD";
    FOOD_HELPER: "FOOD_HELPER";
    GROW: "GROW";
    GUARDIAN: "GUARDIAN";
    HAT: "HAT";
    MATCHABLE: "MATCHABLE";
    MESSAGE: "MESSAGE";
    MIX: "MIX";
    MULTIPLE: "MULTIPLE";
    OFFHAND: "OFFHAND";
    PACKAGE: "PACKAGE";
    PANTS: "PANTS";
    PASTE: "PASTE";
    POKEPILL: "POKEPILL";
    POTION: "POTION";
    REUSABLE: "REUSABLE";
    SHIRT: "SHIRT";
    SINGLE: "SINGLE";
    SIXGUN: "SIXGUN";
    SMITH: "SMITH";
    SOLO: "SOLO";
    SPHERE: "SPHERE";
    SPLEEN: "SPLEEN";
    STICKER: "STICKER";
    USABLE: "USABLE";
    WEAPON: "WEAPON";
    ZAP: "ZAP";
};
export declare const enumFamiliarCategory: {
    BLOCK: "BLOCK";
    COMBAT0: "COMBAT0";
    COMBAT1: "COMBAT1";
    DELEVEL0: "DELEVEL0";
    DELEVEL1: "DELEVEL1";
    DROP: "DROP";
    HP0: "HP0";
    HP1: "HP1";
    ITEM0: "ITEM0";
    ITEM1: "ITEM1";
    ITEM2: "ITEM2";
    ITEM3: "ITEM3";
    MEAT0: "MEAT0";
    MEAT1: "MEAT1";
    MP0: "MP0";
    MP1: "MP1";
    OTHER0: "OTHER0";
    OTHER1: "OTHER1";
    PASSIVE: "PASSIVE";
    POKEFAM: "POKEFAM";
    STAT0: "STAT0";
    STAT1: "STAT1";
    STAT2: "STAT2";
    STAT3: "STAT3";
    UNDERWATER: "UNDERWATER";
    VARIABLE: "VARIABLE";
};
export declare const enumFamiliarsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    CATEGORIES_ASC: "CATEGORIES_ASC";
    CATEGORIES_DESC: "CATEGORIES_DESC";
    LARVA_ASC: "LARVA_ASC";
    LARVA_DESC: "LARVA_DESC";
    EQUIPMENT_ASC: "EQUIPMENT_ASC";
    EQUIPMENT_DESC: "EQUIPMENT_DESC";
    CAGE_MATCH_ASC: "CAGE_MATCH_ASC";
    CAGE_MATCH_DESC: "CAGE_MATCH_DESC";
    SCAVENGER_HUNT_ASC: "SCAVENGER_HUNT_ASC";
    SCAVENGER_HUNT_DESC: "SCAVENGER_HUNT_DESC";
    OBSTACLE_COURSE_ASC: "OBSTACLE_COURSE_ASC";
    OBSTACLE_COURSE_DESC: "OBSTACLE_COURSE_DESC";
    HIDE_AND_SEEK_ASC: "HIDE_AND_SEEK_ASC";
    HIDE_AND_SEEK_DESC: "HIDE_AND_SEEK_DESC";
    ATTRIBUTES_ASC: "ATTRIBUTES_ASC";
    ATTRIBUTES_DESC: "ATTRIBUTES_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumMonsterDropCategory: {
    A: "A";
    C: "C";
    F: "F";
    M: "M";
    N: "N";
    P: "P";
};
export declare const enumMonsterElement: {
    BAD_SPELLING: "BAD_SPELLING";
    COLD: "COLD";
    CUTE: "CUTE";
    HOT: "HOT";
    SHADOW: "SHADOW";
    SLEAZE: "SLEAZE";
    SLIME: "SLIME";
    SPOOKY: "SPOOKY";
    STENCH: "STENCH";
    SUPERCOLD: "SUPERCOLD";
};
export declare const enumMonsterDropsOrderBy: {
    NATURAL: "NATURAL";
    MONSTER_ASC: "MONSTER_ASC";
    MONSTER_DESC: "MONSTER_DESC";
    ITEM_ASC: "ITEM_ASC";
    ITEM_DESC: "ITEM_DESC";
    RATE_ASC: "RATE_ASC";
    RATE_DESC: "RATE_DESC";
    CATEGORY_ASC: "CATEGORY_ASC";
    CATEGORY_DESC: "CATEGORY_DESC";
};
export declare const enumLocationDifficulty: {
    HIGH: "HIGH";
    LOW: "LOW";
    MEDIUM: "MEDIUM";
    NONE: "NONE";
    UNKNOWN: "UNKNOWN";
};
export declare const enumLocationEnvironment: {
    INDOOR: "INDOOR";
    NONE: "NONE";
    OUTDOOR: "OUTDOOR";
    UNDERGROUND: "UNDERGROUND";
    UNDERWATER: "UNDERWATER";
};
export declare const enumNativeMonstersOrderBy: {
    NATURAL: "NATURAL";
    LOCATION_ASC: "LOCATION_ASC";
    LOCATION_DESC: "LOCATION_DESC";
    MONSTER_ASC: "MONSTER_ASC";
    MONSTER_DESC: "MONSTER_DESC";
    WEIGHT_ASC: "WEIGHT_ASC";
    WEIGHT_DESC: "WEIGHT_DESC";
    REJECTION_ASC: "REJECTION_ASC";
    REJECTION_DESC: "REJECTION_DESC";
    PARITY_ASC: "PARITY_ASC";
    PARITY_DESC: "PARITY_DESC";
};
export declare const enumOutfitEquipmentsOrderBy: {
    NATURAL: "NATURAL";
    OUTFIT_ASC: "OUTFIT_ASC";
    OUTFIT_DESC: "OUTFIT_DESC";
    EQUIPMENT_ASC: "EQUIPMENT_ASC";
    EQUIPMENT_DESC: "EQUIPMENT_DESC";
};
export declare const enumOutfitTreatsOrderBy: {
    NATURAL: "NATURAL";
    OUTFIT_ASC: "OUTFIT_ASC";
    OUTFIT_DESC: "OUTFIT_DESC";
    ITEM_ASC: "ITEM_ASC";
    ITEM_DESC: "ITEM_DESC";
    CHANCE_ASC: "CHANCE_ASC";
    CHANCE_DESC: "CHANCE_DESC";
};
export declare const enumFoldablesOrderBy: {
    NATURAL: "NATURAL";
    FOLD_GROUP_ASC: "FOLD_GROUP_ASC";
    FOLD_GROUP_DESC: "FOLD_GROUP_DESC";
    ITEM_ASC: "ITEM_ASC";
    ITEM_DESC: "ITEM_DESC";
};
export declare const enumConsumablesOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    STOMACH_ASC: "STOMACH_ASC";
    STOMACH_DESC: "STOMACH_DESC";
    LIVER_ASC: "LIVER_ASC";
    LIVER_DESC: "LIVER_DESC";
    SPLEEN_ASC: "SPLEEN_ASC";
    SPLEEN_DESC: "SPLEEN_DESC";
    LEVEL_REQUIREMENT_ASC: "LEVEL_REQUIREMENT_ASC";
    LEVEL_REQUIREMENT_DESC: "LEVEL_REQUIREMENT_DESC";
    QUALITY_ASC: "QUALITY_ASC";
    QUALITY_DESC: "QUALITY_DESC";
    ADVENTURE_RANGE_ASC: "ADVENTURE_RANGE_ASC";
    ADVENTURE_RANGE_DESC: "ADVENTURE_RANGE_DESC";
    ADVENTURES_ASC: "ADVENTURES_ASC";
    ADVENTURES_DESC: "ADVENTURES_DESC";
    MUSCLE_ASC: "MUSCLE_ASC";
    MUSCLE_DESC: "MUSCLE_DESC";
    MUSCLE_RANGE_ASC: "MUSCLE_RANGE_ASC";
    MUSCLE_RANGE_DESC: "MUSCLE_RANGE_DESC";
    MYSTICALITY_ASC: "MYSTICALITY_ASC";
    MYSTICALITY_DESC: "MYSTICALITY_DESC";
    MYSTICALITY_RANGE_ASC: "MYSTICALITY_RANGE_ASC";
    MYSTICALITY_RANGE_DESC: "MYSTICALITY_RANGE_DESC";
    MOXIE_ASC: "MOXIE_ASC";
    MOXIE_DESC: "MOXIE_DESC";
    MOXIE_RANGE_ASC: "MOXIE_RANGE_ASC";
    MOXIE_RANGE_DESC: "MOXIE_RANGE_DESC";
    NOTES_ASC: "NOTES_ASC";
    NOTES_DESC: "NOTES_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumEffectQuality: {
    BAD: "BAD";
    GOOD: "GOOD";
    NEUTRAL: "NEUTRAL";
};
export declare const enumEffectModifiersOrderBy: {
    NATURAL: "NATURAL";
    EFFECT_ASC: "EFFECT_ASC";
    EFFECT_DESC: "EFFECT_DESC";
    MODIFIERS_ASC: "MODIFIERS_ASC";
    MODIFIERS_DESC: "MODIFIERS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumEffectsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    DESCID_ASC: "DESCID_ASC";
    DESCID_DESC: "DESCID_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    QUALITY_ASC: "QUALITY_ASC";
    QUALITY_DESC: "QUALITY_DESC";
    NOHOOKAH_ASC: "NOHOOKAH_ASC";
    NOHOOKAH_DESC: "NOHOOKAH_DESC";
    NOPVP_ASC: "NOPVP_ASC";
    NOPVP_DESC: "NOPVP_DESC";
    NOREMOVE_ASC: "NOREMOVE_ASC";
    NOREMOVE_DESC: "NOREMOVE_DESC";
    SONG_ASC: "SONG_ASC";
    SONG_DESC: "SONG_DESC";
    ACTIONS_ASC: "ACTIONS_ASC";
    ACTIONS_DESC: "ACTIONS_DESC";
    AMBIGUOUS_ASC: "AMBIGUOUS_ASC";
    AMBIGUOUS_DESC: "AMBIGUOUS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumEquipmentOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    POWER_ASC: "POWER_ASC";
    POWER_DESC: "POWER_DESC";
    MUS_REQUIREMENT_ASC: "MUS_REQUIREMENT_ASC";
    MUS_REQUIREMENT_DESC: "MUS_REQUIREMENT_DESC";
    MYS_REQUIREMENT_ASC: "MYS_REQUIREMENT_ASC";
    MYS_REQUIREMENT_DESC: "MYS_REQUIREMENT_DESC";
    MOX_REQUIREMENT_ASC: "MOX_REQUIREMENT_ASC";
    MOX_REQUIREMENT_DESC: "MOX_REQUIREMENT_DESC";
    TYPE_ASC: "TYPE_ASC";
    TYPE_DESC: "TYPE_DESC";
    HANDS_ASC: "HANDS_ASC";
    HANDS_DESC: "HANDS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumFamiliarModifiersOrderBy: {
    NATURAL: "NATURAL";
    FAMILIAR_ASC: "FAMILIAR_ASC";
    FAMILIAR_DESC: "FAMILIAR_DESC";
    MODIFIERS_ASC: "MODIFIERS_ASC";
    MODIFIERS_DESC: "MODIFIERS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumFoldGroupsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    DAMAGE_ASC: "DAMAGE_ASC";
    DAMAGE_DESC: "DAMAGE_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumItemModifiersOrderBy: {
    NATURAL: "NATURAL";
    ITEM_ASC: "ITEM_ASC";
    ITEM_DESC: "ITEM_DESC";
    MODIFIERS_ASC: "MODIFIERS_ASC";
    MODIFIERS_DESC: "MODIFIERS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumItemsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    DESCID_ASC: "DESCID_ASC";
    DESCID_DESC: "DESCID_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    USES_ASC: "USES_ASC";
    USES_DESC: "USES_DESC";
    QUEST_ASC: "QUEST_ASC";
    QUEST_DESC: "QUEST_DESC";
    GIFT_ASC: "GIFT_ASC";
    GIFT_DESC: "GIFT_DESC";
    TRADEABLE_ASC: "TRADEABLE_ASC";
    TRADEABLE_DESC: "TRADEABLE_DESC";
    DISCARDABLE_ASC: "DISCARDABLE_ASC";
    DISCARDABLE_DESC: "DISCARDABLE_DESC";
    AUTOSELL_ASC: "AUTOSELL_ASC";
    AUTOSELL_DESC: "AUTOSELL_DESC";
    PLURAL_ASC: "PLURAL_ASC";
    PLURAL_DESC: "PLURAL_DESC";
    AMBIGUOUS_ASC: "AMBIGUOUS_ASC";
    AMBIGUOUS_DESC: "AMBIGUOUS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumLocationsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    ZONE_ASC: "ZONE_ASC";
    ZONE_DESC: "ZONE_DESC";
    URL_ASC: "URL_ASC";
    URL_DESC: "URL_DESC";
    DIFFICULTY_ASC: "DIFFICULTY_ASC";
    DIFFICULTY_DESC: "DIFFICULTY_DESC";
    ENVIRONMENT_ASC: "ENVIRONMENT_ASC";
    ENVIRONMENT_DESC: "ENVIRONMENT_DESC";
    STAT_REQUIREMENT_ASC: "STAT_REQUIREMENT_ASC";
    STAT_REQUIREMENT_DESC: "STAT_REQUIREMENT_DESC";
    WATER_LEVEL_ASC: "WATER_LEVEL_ASC";
    WATER_LEVEL_DESC: "WATER_LEVEL_DESC";
    OVERDRUNK_ASC: "OVERDRUNK_ASC";
    OVERDRUNK_DESC: "OVERDRUNK_DESC";
    NOWANDER_ASC: "NOWANDER_ASC";
    NOWANDER_DESC: "NOWANDER_DESC";
    COMBAT_RATE_ASC: "COMBAT_RATE_ASC";
    COMBAT_RATE_DESC: "COMBAT_RATE_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumMetasOrderBy: {
    NATURAL: "NATURAL";
    LAST_UPDATE_ASC: "LAST_UPDATE_ASC";
    LAST_UPDATE_DESC: "LAST_UPDATE_DESC";
};
export declare const enumMonstersOrderBy: {
    NATURAL: "NATURAL";
    AMBIGUOUS_ASC: "AMBIGUOUS_ASC";
    AMBIGUOUS_DESC: "AMBIGUOUS_DESC";
    ARTICLE_ASC: "ARTICLE_ASC";
    ARTICLE_DESC: "ARTICLE_DESC";
    ATTACK_ASC: "ATTACK_ASC";
    ATTACK_DESC: "ATTACK_DESC";
    BOSS_ASC: "BOSS_ASC";
    BOSS_DESC: "BOSS_DESC";
    DEFENCE_ASC: "DEFENCE_ASC";
    DEFENCE_DESC: "DEFENCE_DESC";
    DRIPPY_ASC: "DRIPPY_ASC";
    DRIPPY_DESC: "DRIPPY_DESC";
    ELEMENT_ASC: "ELEMENT_ASC";
    ELEMENT_DESC: "ELEMENT_DESC";
    ELEMENTAL_ATTACK_ASC: "ELEMENTAL_ATTACK_ASC";
    ELEMENTAL_ATTACK_DESC: "ELEMENTAL_ATTACK_DESC";
    ELEMENTAL_DEFENCE_ASC: "ELEMENTAL_DEFENCE_ASC";
    ELEMENTAL_DEFENCE_DESC: "ELEMENTAL_DEFENCE_DESC";
    ELEMENTAL_RESISTANCE_ASC: "ELEMENTAL_RESISTANCE_ASC";
    ELEMENTAL_RESISTANCE_DESC: "ELEMENTAL_RESISTANCE_DESC";
    EXPERIENCE_ASC: "EXPERIENCE_ASC";
    EXPERIENCE_DESC: "EXPERIENCE_DESC";
    FREE_ASC: "FREE_ASC";
    FREE_DESC: "FREE_DESC";
    GHOST_ASC: "GHOST_ASC";
    GHOST_DESC: "GHOST_DESC";
    GROUP_SIZE_ASC: "GROUP_SIZE_ASC";
    GROUP_SIZE_DESC: "GROUP_SIZE_DESC";
    HP_ASC: "HP_ASC";
    HP_DESC: "HP_DESC";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    INITIATIVE_ASC: "INITIATIVE_ASC";
    INITIATIVE_DESC: "INITIATIVE_DESC";
    ITEM_BLOCK_CHANCE_ASC: "ITEM_BLOCK_CHANCE_ASC";
    ITEM_BLOCK_CHANCE_DESC: "ITEM_BLOCK_CHANCE_DESC";
    LUCKY_ASC: "LUCKY_ASC";
    LUCKY_DESC: "LUCKY_DESC";
    MANUEL_ASC: "MANUEL_ASC";
    MANUEL_DESC: "MANUEL_DESC";
    MEAT_ASC: "MEAT_ASC";
    MEAT_DESC: "MEAT_DESC";
    MEAT_EXPRESSION_ASC: "MEAT_EXPRESSION_ASC";
    MEAT_EXPRESSION_DESC: "MEAT_EXPRESSION_DESC";
    MONSTER_LEVEL_MULTIPLIER_ASC: "MONSTER_LEVEL_MULTIPLIER_ASC";
    MONSTER_LEVEL_MULTIPLIER_DESC: "MONSTER_LEVEL_MULTIPLIER_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    NOBANISH_ASC: "NOBANISH_ASC";
    NOBANISH_DESC: "NOBANISH_DESC";
    NOCOPY_ASC: "NOCOPY_ASC";
    NOCOPY_DESC: "NOCOPY_DESC";
    NOMANUEL_ASC: "NOMANUEL_ASC";
    NOMANUEL_DESC: "NOMANUEL_DESC";
    NOWANDER_ASC: "NOWANDER_ASC";
    NOWANDER_DESC: "NOWANDER_DESC";
    NOWISH_ASC: "NOWISH_ASC";
    NOWISH_DESC: "NOWISH_DESC";
    PHYLUM_ASC: "PHYLUM_ASC";
    PHYLUM_DESC: "PHYLUM_DESC";
    PHYSICAL_RESISTANCE_ASC: "PHYSICAL_RESISTANCE_ASC";
    PHYSICAL_RESISTANCE_DESC: "PHYSICAL_RESISTANCE_DESC";
    POISON_ASC: "POISON_ASC";
    POISON_DESC: "POISON_DESC";
    SCALING_ASC: "SCALING_ASC";
    SCALING_DESC: "SCALING_DESC";
    SCALING_CAP_ASC: "SCALING_CAP_ASC";
    SCALING_CAP_DESC: "SCALING_CAP_DESC";
    SCALING_FLOOR_ASC: "SCALING_FLOOR_ASC";
    SCALING_FLOOR_DESC: "SCALING_FLOOR_DESC";
    SKILL_BLOCK_CHANCE_ASC: "SKILL_BLOCK_CHANCE_ASC";
    SKILL_BLOCK_CHANCE_DESC: "SKILL_BLOCK_CHANCE_DESC";
    SNAKE_ASC: "SNAKE_ASC";
    SNAKE_DESC: "SNAKE_DESC";
    SPELL_BLOCK_CHANCE_ASC: "SPELL_BLOCK_CHANCE_ASC";
    SPELL_BLOCK_CHANCE_DESC: "SPELL_BLOCK_CHANCE_DESC";
    SPRINKLES_ASC: "SPRINKLES_ASC";
    SPRINKLES_DESC: "SPRINKLES_DESC";
    SUPERLIKELY_ASC: "SUPERLIKELY_ASC";
    SUPERLIKELY_DESC: "SUPERLIKELY_DESC";
    ULTRARARE_ASC: "ULTRARARE_ASC";
    ULTRARARE_DESC: "ULTRARARE_DESC";
    WANDERER_ASC: "WANDERER_ASC";
    WANDERER_DESC: "WANDERER_DESC";
    WIKI_ASC: "WIKI_ASC";
    WIKI_DESC: "WIKI_DESC";
    WISH_ASC: "WISH_ASC";
    WISH_DESC: "WISH_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumOutfitsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumPathsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    ENUM_NAME_ASC: "ENUM_NAME_ASC";
    ENUM_NAME_DESC: "ENUM_NAME_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    IS_AVATAR_ASC: "IS_AVATAR_ASC";
    IS_AVATAR_DESC: "IS_AVATAR_DESC";
    ARTICLE_ASC: "ARTICLE_ASC";
    ARTICLE_DESC: "ARTICLE_DESC";
    POINTS_PREFERENCE_ASC: "POINTS_PREFERENCE_ASC";
    POINTS_PREFERENCE_DESC: "POINTS_PREFERENCE_DESC";
    MAXIMUM_POINTS_ASC: "MAXIMUM_POINTS_ASC";
    MAXIMUM_POINTS_DESC: "MAXIMUM_POINTS_DESC";
    BUCKET_ASC: "BUCKET_ASC";
    BUCKET_DESC: "BUCKET_DESC";
    STOMACH_CAPACITY_ASC: "STOMACH_CAPACITY_ASC";
    STOMACH_CAPACITY_DESC: "STOMACH_CAPACITY_DESC";
    LIVER_CAPACITY_ASC: "LIVER_CAPACITY_ASC";
    LIVER_CAPACITY_DESC: "LIVER_CAPACITY_DESC";
    SPLEEN_CAPACITY_ASC: "SPLEEN_CAPACITY_ASC";
    SPLEEN_CAPACITY_DESC: "SPLEEN_CAPACITY_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumSkillTag: {
    COMBAT: "COMBAT";
    EFFECT: "EFFECT";
    EXPRESSION: "EXPRESSION";
    HEAL: "HEAL";
    ITEM: "ITEM";
    NC: "NC";
    OTHER: "OTHER";
    PASSIVE: "PASSIVE";
    SELF: "SELF";
    SONG: "SONG";
    WALK: "WALK";
};
export declare const enumSkillModifiersOrderBy: {
    NATURAL: "NATURAL";
    SKILL_ASC: "SKILL_ASC";
    SKILL_DESC: "SKILL_DESC";
    MODIFIERS_ASC: "MODIFIERS_ASC";
    MODIFIERS_DESC: "MODIFIERS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
export declare const enumSkillsOrderBy: {
    NATURAL: "NATURAL";
    ID_ASC: "ID_ASC";
    ID_DESC: "ID_DESC";
    NAME_ASC: "NAME_ASC";
    NAME_DESC: "NAME_DESC";
    IMAGE_ASC: "IMAGE_ASC";
    IMAGE_DESC: "IMAGE_DESC";
    TAGS_ASC: "TAGS_ASC";
    TAGS_DESC: "TAGS_DESC";
    MP_COST_ASC: "MP_COST_ASC";
    MP_COST_DESC: "MP_COST_DESC";
    DURATION_ASC: "DURATION_ASC";
    DURATION_DESC: "DURATION_DESC";
    GUILD_LEVEL_ASC: "GUILD_LEVEL_ASC";
    GUILD_LEVEL_DESC: "GUILD_LEVEL_DESC";
    MAX_LEVEL_ASC: "MAX_LEVEL_ASC";
    MAX_LEVEL_DESC: "MAX_LEVEL_DESC";
    PERMABLE_ASC: "PERMABLE_ASC";
    PERMABLE_DESC: "PERMABLE_DESC";
    AMBIGUOUS_ASC: "AMBIGUOUS_ASC";
    AMBIGUOUS_DESC: "AMBIGUOUS_DESC";
    PRIMARY_KEY_ASC: "PRIMARY_KEY_ASC";
    PRIMARY_KEY_DESC: "PRIMARY_KEY_DESC";
};
