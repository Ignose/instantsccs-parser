declare const _default: {
    scalars: number[];
    types: {
        Query: {
            query: number[];
            nodeId: number[];
            node: (number | {
                nodeId: (string | number)[];
            })[];
            allClasses: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allConsumables: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allEffectModifiers: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allEffects: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allEquipment: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allFamiliarModifiers: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allFamiliars: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allFoldGroups: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allFoldables: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allItemModifiers: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allItems: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allLocations: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allMetas: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allMonsterDrops: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allMonsters: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allNativeMonsters: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allOutfitEquipments: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allOutfitTreats: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allOutfits: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allPaths: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allSkillModifiers: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            allSkills: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            classById: (number | {
                id: (string | number)[];
            })[];
            consumableById: (number | {
                id: (string | number)[];
            })[];
            effectModifierByEffect: (number | {
                effect: (string | number)[];
            })[];
            effectById: (number | {
                id: (string | number)[];
            })[];
            effectByDescid: (number | {
                descid: (string | number)[];
            })[];
            equipmentById: (number | {
                id: (string | number)[];
            })[];
            familiarModifierByFamiliar: (number | {
                familiar: (string | number)[];
            })[];
            familiarById: (number | {
                id: (string | number)[];
            })[];
            foldGroupById: (number | {
                id: (string | number)[];
            })[];
            itemModifierByItem: (number | {
                item: (string | number)[];
            })[];
            itemById: (number | {
                id: (string | number)[];
            })[];
            itemByDescid: (number | {
                descid: (string | number)[];
            })[];
            locationByName: (number | {
                name: (string | number)[];
            })[];
            monsterById: (number | {
                id: (string | number)[];
            })[];
            outfitById: (number | {
                id: (string | number)[];
            })[];
            pathById: (number | {
                id: (string | number)[];
            })[];
            pathByImage: (number | {
                image: (string | number)[];
            })[];
            skillModifierBySkill: (number | {
                skill: (string | number)[];
            })[];
            skillById: (number | {
                id: (string | number)[];
            })[];
            class: (number | {
                nodeId: (string | number)[];
            })[];
            consumable: (number | {
                nodeId: (string | number)[];
            })[];
            effectModifier: (number | {
                nodeId: (string | number)[];
            })[];
            effect: (number | {
                nodeId: (string | number)[];
            })[];
            equipment: (number | {
                nodeId: (string | number)[];
            })[];
            familiarModifier: (number | {
                nodeId: (string | number)[];
            })[];
            familiar: (number | {
                nodeId: (string | number)[];
            })[];
            foldGroup: (number | {
                nodeId: (string | number)[];
            })[];
            itemModifier: (number | {
                nodeId: (string | number)[];
            })[];
            item: (number | {
                nodeId: (string | number)[];
            })[];
            location: (number | {
                nodeId: (string | number)[];
            })[];
            monster: (number | {
                nodeId: (string | number)[];
            })[];
            outfit: (number | {
                nodeId: (string | number)[];
            })[];
            path: (number | {
                nodeId: (string | number)[];
            })[];
            skillModifier: (number | {
                nodeId: (string | number)[];
            })[];
            skill: (number | {
                nodeId: (string | number)[];
            })[];
            __typename: number[];
        };
        Node: {
            nodeId: number[];
            on_Query: number[];
            on_Class: number[];
            on_Path: number[];
            on_Consumable: number[];
            on_Item: number[];
            on_Equipment: number[];
            on_Familiar: number[];
            on_FamiliarModifier: number[];
            on_Monster: number[];
            on_Location: number[];
            on_Outfit: number[];
            on_FoldGroup: number[];
            on_ItemModifier: number[];
            on_EffectModifier: number[];
            on_Effect: number[];
            on_SkillModifier: number[];
            on_Skill: number[];
            __typename: number[];
        };
        ID: {};
        ClassesConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        Class: {
            nodeId: number[];
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            primeStatIndex: number[];
            path: number[];
            stun: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            pathByPath: number[];
            __typename: number[];
        };
        Int: {};
        String: {};
        Path: {
            nodeId: number[];
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            isAvatar: number[];
            article: number[];
            pointsPreference: number[];
            maximumPoints: number[];
            bucket: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            classesByPath: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            __typename: number[];
        };
        Boolean: {};
        Cursor: {};
        ClassesOrderBy: {};
        ClassCondition: {
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            primeStatIndex: number[];
            path: number[];
            stun: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            __typename: number[];
        };
        ClassesEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        PageInfo: {
            hasNextPage: number[];
            hasPreviousPage: number[];
            startCursor: number[];
            endCursor: number[];
            __typename: number[];
        };
        ConsumablesConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        Consumable: {
            nodeId: number[];
            id: number[];
            stomach: number[];
            liver: number[];
            spleen: number[];
            levelRequirement: number[];
            quality: number[];
            adventureRange: number[];
            adventures: number[];
            muscle: number[];
            muscleRange: number[];
            mysticality: number[];
            mysticalityRange: number[];
            moxie: number[];
            moxieRange: number[];
            notes: number[];
            itemById: number[];
            __typename: number[];
        };
        ConsumableQuality: {};
        Float: {};
        Item: {
            nodeId: number[];
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            uses: number[];
            quest: number[];
            gift: number[];
            tradeable: number[];
            discardable: number[];
            autosell: number[];
            plural: number[];
            ambiguous: number[];
            equipmentById: number[];
            consumableById: number[];
            familiarsByLarva: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            familiarsByEquipment: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            monsterDropsByItem: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            outfitEquipmentsByEquipment: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            outfitTreatsByItem: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            foldablesByItem: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            itemModifierByItem: number[];
            __typename: number[];
        };
        ItemUse: {};
        Equipment: {
            nodeId: number[];
            id: number[];
            power: number[];
            musRequirement: number[];
            mysRequirement: number[];
            moxRequirement: number[];
            type: number[];
            hands: number[];
            itemById: number[];
            __typename: number[];
        };
        FamiliarsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        Familiar: {
            nodeId: number[];
            id: number[];
            name: number[];
            image: number[];
            categories: number[];
            larva: number[];
            equipment: number[];
            cageMatch: number[];
            scavengerHunt: number[];
            obstacleCourse: number[];
            hideAndSeek: number[];
            attributes: number[];
            itemByLarva: number[];
            itemByEquipment: number[];
            familiarModifierByFamiliar: number[];
            __typename: number[];
        };
        FamiliarCategory: {};
        FamiliarModifier: {
            nodeId: number[];
            familiar: number[];
            modifiers: number[];
            familiarByFamiliar: number[];
            __typename: number[];
        };
        JSON: {};
        FamiliarsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        FamiliarsOrderBy: {};
        FamiliarCondition: {
            id: number[];
            name: number[];
            image: number[];
            categories: number[];
            larva: number[];
            equipment: number[];
            cageMatch: number[];
            scavengerHunt: number[];
            obstacleCourse: number[];
            hideAndSeek: number[];
            attributes: number[];
            __typename: number[];
        };
        MonsterDropsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        MonsterDrop: {
            monster: number[];
            item: number[];
            rate: number[];
            category: number[];
            monsterByMonster: number[];
            itemByItem: number[];
            __typename: number[];
        };
        MonsterDropCategory: {};
        Monster: {
            nodeId: number[];
            ambiguous: number[];
            article: number[];
            attack: number[];
            boss: number[];
            defence: number[];
            drippy: number[];
            element: number[];
            elementalAttack: number[];
            elementalDefence: number[];
            elementalResistance: number[];
            experience: number[];
            free: number[];
            ghost: number[];
            groupSize: number[];
            hp: number[];
            id: number[];
            image: number[];
            initiative: number[];
            itemBlockChance: number[];
            lucky: number[];
            manuel: number[];
            meat: number[];
            meatExpression: number[];
            monsterLevelMultiplier: number[];
            name: number[];
            nobanish: number[];
            nocopy: number[];
            nomanuel: number[];
            nowander: number[];
            nowish: number[];
            phylum: number[];
            physicalResistance: number[];
            poison: number[];
            scaling: number[];
            scalingCap: number[];
            scalingFloor: number[];
            skillBlockChance: number[];
            snake: number[];
            spellBlockChance: number[];
            sprinkles: number[];
            superlikely: number[];
            ultrarare: number[];
            wanderer: number[];
            wiki: number[];
            wish: number[];
            monsterDropsByMonster: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            nativeMonstersByMonster: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            __typename: number[];
        };
        MonsterElement: {};
        MonsterDropsOrderBy: {};
        MonsterDropCondition: {
            monster: number[];
            item: number[];
            rate: number[];
            category: number[];
            __typename: number[];
        };
        NativeMonstersConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        NativeMonster: {
            location: number[];
            monster: number[];
            weight: number[];
            rejection: number[];
            parity: number[];
            locationByLocation: number[];
            monsterByMonster: number[];
            __typename: number[];
        };
        Location: {
            nodeId: number[];
            id: number[];
            name: number[];
            zone: number[];
            url: number[];
            difficulty: number[];
            environment: number[];
            statRequirement: number[];
            waterLevel: number[];
            overdrunk: number[];
            nowander: number[];
            combatRate: number[];
            nativeMonstersByLocation: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            __typename: number[];
        };
        LocationDifficulty: {};
        LocationEnvironment: {};
        NativeMonstersOrderBy: {};
        NativeMonsterCondition: {
            location: number[];
            monster: number[];
            weight: number[];
            rejection: number[];
            parity: number[];
            __typename: number[];
        };
        NativeMonstersEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        MonsterDropsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        OutfitEquipmentsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        OutfitEquipment: {
            outfit: number[];
            equipment: number[];
            outfitByOutfit: number[];
            itemByEquipment: number[];
            __typename: number[];
        };
        Outfit: {
            nodeId: number[];
            id: number[];
            name: number[];
            image: number[];
            outfitEquipmentsByOutfit: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            outfitTreatsByOutfit: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            __typename: number[];
        };
        OutfitEquipmentsOrderBy: {};
        OutfitEquipmentCondition: {
            outfit: number[];
            equipment: number[];
            __typename: number[];
        };
        OutfitTreatsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        OutfitTreat: {
            outfit: number[];
            item: number[];
            chance: number[];
            outfitByOutfit: number[];
            itemByItem: number[];
            __typename: number[];
        };
        OutfitTreatsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        OutfitTreatsOrderBy: {};
        OutfitTreatCondition: {
            outfit: number[];
            item: number[];
            chance: number[];
            __typename: number[];
        };
        OutfitEquipmentsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        FoldablesConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        Foldable: {
            foldGroup: number[];
            item: number[];
            foldGroupByFoldGroup: number[];
            itemByItem: number[];
            __typename: number[];
        };
        FoldGroup: {
            nodeId: number[];
            id: number[];
            damage: number[];
            foldablesByFoldGroup: (number | {
                first: number[];
                last: number[];
                offset: number[];
                before: number[];
                after: number[];
                orderBy: (string | number)[];
                condition: number[];
            })[];
            __typename: number[];
        };
        FoldablesOrderBy: {};
        FoldableCondition: {
            foldGroup: number[];
            item: number[];
            __typename: number[];
        };
        FoldablesEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        ItemModifier: {
            nodeId: number[];
            item: number[];
            modifiers: number[];
            itemByItem: number[];
            __typename: number[];
        };
        ConsumablesEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        ConsumablesOrderBy: {};
        ConsumableCondition: {
            id: number[];
            stomach: number[];
            liver: number[];
            spleen: number[];
            levelRequirement: number[];
            quality: number[];
            adventureRange: number[];
            adventures: number[];
            muscle: number[];
            muscleRange: number[];
            mysticality: number[];
            mysticalityRange: number[];
            moxie: number[];
            moxieRange: number[];
            notes: number[];
            __typename: number[];
        };
        EffectModifiersConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        EffectModifier: {
            nodeId: number[];
            effect: number[];
            modifiers: number[];
            effectByEffect: number[];
            __typename: number[];
        };
        Effect: {
            nodeId: number[];
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            quality: number[];
            nohookah: number[];
            nopvp: number[];
            noremove: number[];
            song: number[];
            actions: number[];
            ambiguous: number[];
            effectModifierByEffect: number[];
            __typename: number[];
        };
        EffectQuality: {};
        EffectModifiersEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        EffectModifiersOrderBy: {};
        EffectModifierCondition: {
            effect: number[];
            modifiers: number[];
            __typename: number[];
        };
        EffectsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        EffectsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        EffectsOrderBy: {};
        EffectCondition: {
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            quality: number[];
            nohookah: number[];
            nopvp: number[];
            noremove: number[];
            song: number[];
            actions: number[];
            ambiguous: number[];
            __typename: number[];
        };
        EquipmentConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        EquipmentEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        EquipmentOrderBy: {};
        EquipmentCondition: {
            id: number[];
            power: number[];
            musRequirement: number[];
            mysRequirement: number[];
            moxRequirement: number[];
            type: number[];
            hands: number[];
            __typename: number[];
        };
        FamiliarModifiersConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        FamiliarModifiersEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        FamiliarModifiersOrderBy: {};
        FamiliarModifierCondition: {
            familiar: number[];
            modifiers: number[];
            __typename: number[];
        };
        FoldGroupsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        FoldGroupsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        FoldGroupsOrderBy: {};
        FoldGroupCondition: {
            id: number[];
            damage: number[];
            __typename: number[];
        };
        ItemModifiersConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        ItemModifiersEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        ItemModifiersOrderBy: {};
        ItemModifierCondition: {
            item: number[];
            modifiers: number[];
            __typename: number[];
        };
        ItemsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        ItemsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        ItemsOrderBy: {};
        ItemCondition: {
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            uses: number[];
            quest: number[];
            gift: number[];
            tradeable: number[];
            discardable: number[];
            autosell: number[];
            plural: number[];
            ambiguous: number[];
            __typename: number[];
        };
        LocationsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        LocationsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        LocationsOrderBy: {};
        LocationCondition: {
            id: number[];
            name: number[];
            zone: number[];
            url: number[];
            difficulty: number[];
            environment: number[];
            statRequirement: number[];
            waterLevel: number[];
            overdrunk: number[];
            nowander: number[];
            combatRate: number[];
            __typename: number[];
        };
        MetasConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        Meta: {
            lastUpdate: number[];
            __typename: number[];
        };
        Datetime: {};
        MetasEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        MetasOrderBy: {};
        MetaCondition: {
            lastUpdate: number[];
            __typename: number[];
        };
        MonstersConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        MonstersEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        MonstersOrderBy: {};
        MonsterCondition: {
            ambiguous: number[];
            article: number[];
            attack: number[];
            boss: number[];
            defence: number[];
            drippy: number[];
            element: number[];
            elementalAttack: number[];
            elementalDefence: number[];
            elementalResistance: number[];
            experience: number[];
            free: number[];
            ghost: number[];
            groupSize: number[];
            hp: number[];
            id: number[];
            image: number[];
            initiative: number[];
            itemBlockChance: number[];
            lucky: number[];
            manuel: number[];
            meat: number[];
            meatExpression: number[];
            monsterLevelMultiplier: number[];
            name: number[];
            nobanish: number[];
            nocopy: number[];
            nomanuel: number[];
            nowander: number[];
            nowish: number[];
            phylum: number[];
            physicalResistance: number[];
            poison: number[];
            scaling: number[];
            scalingCap: number[];
            scalingFloor: number[];
            skillBlockChance: number[];
            snake: number[];
            spellBlockChance: number[];
            sprinkles: number[];
            superlikely: number[];
            ultrarare: number[];
            wanderer: number[];
            wiki: number[];
            wish: number[];
            __typename: number[];
        };
        OutfitsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        OutfitsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        OutfitsOrderBy: {};
        OutfitCondition: {
            id: number[];
            name: number[];
            image: number[];
            __typename: number[];
        };
        PathsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        PathsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        PathsOrderBy: {};
        PathCondition: {
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            isAvatar: number[];
            article: number[];
            pointsPreference: number[];
            maximumPoints: number[];
            bucket: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            __typename: number[];
        };
        SkillModifiersConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        SkillModifier: {
            nodeId: number[];
            skill: number[];
            modifiers: number[];
            skillBySkill: number[];
            __typename: number[];
        };
        Skill: {
            nodeId: number[];
            id: number[];
            name: number[];
            image: number[];
            tags: number[];
            mpCost: number[];
            duration: number[];
            guildLevel: number[];
            maxLevel: number[];
            permable: number[];
            ambiguous: number[];
            skillModifierBySkill: number[];
            __typename: number[];
        };
        SkillTag: {};
        SkillModifiersEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        SkillModifiersOrderBy: {};
        SkillModifierCondition: {
            skill: number[];
            modifiers: number[];
            __typename: number[];
        };
        SkillsConnection: {
            nodes: number[];
            edges: number[];
            pageInfo: number[];
            totalCount: number[];
            __typename: number[];
        };
        SkillsEdge: {
            cursor: number[];
            node: number[];
            __typename: number[];
        };
        SkillsOrderBy: {};
        SkillCondition: {
            id: number[];
            name: number[];
            image: number[];
            tags: number[];
            mpCost: number[];
            duration: number[];
            guildLevel: number[];
            maxLevel: number[];
            permable: number[];
            ambiguous: number[];
            __typename: number[];
        };
        Mutation: {
            createClass: (number | {
                input: (string | number)[];
            })[];
            createConsumable: (number | {
                input: (string | number)[];
            })[];
            createEffectModifier: (number | {
                input: (string | number)[];
            })[];
            createEffect: (number | {
                input: (string | number)[];
            })[];
            createEquipment: (number | {
                input: (string | number)[];
            })[];
            createFamiliarModifier: (number | {
                input: (string | number)[];
            })[];
            createFamiliar: (number | {
                input: (string | number)[];
            })[];
            createFoldGroup: (number | {
                input: (string | number)[];
            })[];
            createFoldable: (number | {
                input: (string | number)[];
            })[];
            createItemModifier: (number | {
                input: (string | number)[];
            })[];
            createItem: (number | {
                input: (string | number)[];
            })[];
            createLocation: (number | {
                input: (string | number)[];
            })[];
            createMeta: (number | {
                input: (string | number)[];
            })[];
            createMonsterDrop: (number | {
                input: (string | number)[];
            })[];
            createMonster: (number | {
                input: (string | number)[];
            })[];
            createNativeMonster: (number | {
                input: (string | number)[];
            })[];
            createOutfitEquipment: (number | {
                input: (string | number)[];
            })[];
            createOutfitTreat: (number | {
                input: (string | number)[];
            })[];
            createOutfit: (number | {
                input: (string | number)[];
            })[];
            createPath: (number | {
                input: (string | number)[];
            })[];
            createSkillModifier: (number | {
                input: (string | number)[];
            })[];
            createSkill: (number | {
                input: (string | number)[];
            })[];
            updateClass: (number | {
                input: (string | number)[];
            })[];
            updateClassById: (number | {
                input: (string | number)[];
            })[];
            updateConsumable: (number | {
                input: (string | number)[];
            })[];
            updateConsumableById: (number | {
                input: (string | number)[];
            })[];
            updateEffectModifier: (number | {
                input: (string | number)[];
            })[];
            updateEffectModifierByEffect: (number | {
                input: (string | number)[];
            })[];
            updateEffect: (number | {
                input: (string | number)[];
            })[];
            updateEffectById: (number | {
                input: (string | number)[];
            })[];
            updateEffectByDescid: (number | {
                input: (string | number)[];
            })[];
            updateEquipment: (number | {
                input: (string | number)[];
            })[];
            updateEquipmentById: (number | {
                input: (string | number)[];
            })[];
            updateFamiliarModifier: (number | {
                input: (string | number)[];
            })[];
            updateFamiliarModifierByFamiliar: (number | {
                input: (string | number)[];
            })[];
            updateFamiliar: (number | {
                input: (string | number)[];
            })[];
            updateFamiliarById: (number | {
                input: (string | number)[];
            })[];
            updateFoldGroup: (number | {
                input: (string | number)[];
            })[];
            updateFoldGroupById: (number | {
                input: (string | number)[];
            })[];
            updateItemModifier: (number | {
                input: (string | number)[];
            })[];
            updateItemModifierByItem: (number | {
                input: (string | number)[];
            })[];
            updateItem: (number | {
                input: (string | number)[];
            })[];
            updateItemById: (number | {
                input: (string | number)[];
            })[];
            updateItemByDescid: (number | {
                input: (string | number)[];
            })[];
            updateLocation: (number | {
                input: (string | number)[];
            })[];
            updateLocationByName: (number | {
                input: (string | number)[];
            })[];
            updateMonster: (number | {
                input: (string | number)[];
            })[];
            updateMonsterById: (number | {
                input: (string | number)[];
            })[];
            updateOutfit: (number | {
                input: (string | number)[];
            })[];
            updateOutfitById: (number | {
                input: (string | number)[];
            })[];
            updatePath: (number | {
                input: (string | number)[];
            })[];
            updatePathById: (number | {
                input: (string | number)[];
            })[];
            updatePathByImage: (number | {
                input: (string | number)[];
            })[];
            updateSkillModifier: (number | {
                input: (string | number)[];
            })[];
            updateSkillModifierBySkill: (number | {
                input: (string | number)[];
            })[];
            updateSkill: (number | {
                input: (string | number)[];
            })[];
            updateSkillById: (number | {
                input: (string | number)[];
            })[];
            deleteClass: (number | {
                input: (string | number)[];
            })[];
            deleteClassById: (number | {
                input: (string | number)[];
            })[];
            deleteConsumable: (number | {
                input: (string | number)[];
            })[];
            deleteConsumableById: (number | {
                input: (string | number)[];
            })[];
            deleteEffectModifier: (number | {
                input: (string | number)[];
            })[];
            deleteEffectModifierByEffect: (number | {
                input: (string | number)[];
            })[];
            deleteEffect: (number | {
                input: (string | number)[];
            })[];
            deleteEffectById: (number | {
                input: (string | number)[];
            })[];
            deleteEffectByDescid: (number | {
                input: (string | number)[];
            })[];
            deleteEquipment: (number | {
                input: (string | number)[];
            })[];
            deleteEquipmentById: (number | {
                input: (string | number)[];
            })[];
            deleteFamiliarModifier: (number | {
                input: (string | number)[];
            })[];
            deleteFamiliarModifierByFamiliar: (number | {
                input: (string | number)[];
            })[];
            deleteFamiliar: (number | {
                input: (string | number)[];
            })[];
            deleteFamiliarById: (number | {
                input: (string | number)[];
            })[];
            deleteFoldGroup: (number | {
                input: (string | number)[];
            })[];
            deleteFoldGroupById: (number | {
                input: (string | number)[];
            })[];
            deleteItemModifier: (number | {
                input: (string | number)[];
            })[];
            deleteItemModifierByItem: (number | {
                input: (string | number)[];
            })[];
            deleteItem: (number | {
                input: (string | number)[];
            })[];
            deleteItemById: (number | {
                input: (string | number)[];
            })[];
            deleteItemByDescid: (number | {
                input: (string | number)[];
            })[];
            deleteLocation: (number | {
                input: (string | number)[];
            })[];
            deleteLocationByName: (number | {
                input: (string | number)[];
            })[];
            deleteMonster: (number | {
                input: (string | number)[];
            })[];
            deleteMonsterById: (number | {
                input: (string | number)[];
            })[];
            deleteOutfit: (number | {
                input: (string | number)[];
            })[];
            deleteOutfitById: (number | {
                input: (string | number)[];
            })[];
            deletePath: (number | {
                input: (string | number)[];
            })[];
            deletePathById: (number | {
                input: (string | number)[];
            })[];
            deletePathByImage: (number | {
                input: (string | number)[];
            })[];
            deleteSkillModifier: (number | {
                input: (string | number)[];
            })[];
            deleteSkillModifierBySkill: (number | {
                input: (string | number)[];
            })[];
            deleteSkill: (number | {
                input: (string | number)[];
            })[];
            deleteSkillById: (number | {
                input: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateClassPayload: {
            clientMutationId: number[];
            class: number[];
            query: number[];
            pathByPath: number[];
            classEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateClassInput: {
            clientMutationId: number[];
            class: number[];
            __typename: number[];
        };
        ClassInput: {
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            primeStatIndex: number[];
            path: number[];
            stun: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            __typename: number[];
        };
        CreateConsumablePayload: {
            clientMutationId: number[];
            consumable: number[];
            query: number[];
            itemById: number[];
            consumableEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateConsumableInput: {
            clientMutationId: number[];
            consumable: number[];
            __typename: number[];
        };
        ConsumableInput: {
            id: number[];
            stomach: number[];
            liver: number[];
            spleen: number[];
            levelRequirement: number[];
            quality: number[];
            adventureRange: number[];
            adventures: number[];
            muscle: number[];
            muscleRange: number[];
            mysticality: number[];
            mysticalityRange: number[];
            moxie: number[];
            moxieRange: number[];
            notes: number[];
            __typename: number[];
        };
        CreateEffectModifierPayload: {
            clientMutationId: number[];
            effectModifier: number[];
            query: number[];
            effectByEffect: number[];
            effectModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateEffectModifierInput: {
            clientMutationId: number[];
            effectModifier: number[];
            __typename: number[];
        };
        EffectModifierInput: {
            effect: number[];
            modifiers: number[];
            __typename: number[];
        };
        CreateEffectPayload: {
            clientMutationId: number[];
            effect: number[];
            query: number[];
            effectEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateEffectInput: {
            clientMutationId: number[];
            effect: number[];
            __typename: number[];
        };
        EffectInput: {
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            quality: number[];
            nohookah: number[];
            nopvp: number[];
            noremove: number[];
            song: number[];
            actions: number[];
            ambiguous: number[];
            __typename: number[];
        };
        CreateEquipmentPayload: {
            clientMutationId: number[];
            equipment: number[];
            query: number[];
            itemById: number[];
            equipmentEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateEquipmentInput: {
            clientMutationId: number[];
            equipment: number[];
            __typename: number[];
        };
        EquipmentInput: {
            id: number[];
            power: number[];
            musRequirement: number[];
            mysRequirement: number[];
            moxRequirement: number[];
            type: number[];
            hands: number[];
            __typename: number[];
        };
        CreateFamiliarModifierPayload: {
            clientMutationId: number[];
            familiarModifier: number[];
            query: number[];
            familiarByFamiliar: number[];
            familiarModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateFamiliarModifierInput: {
            clientMutationId: number[];
            familiarModifier: number[];
            __typename: number[];
        };
        FamiliarModifierInput: {
            familiar: number[];
            modifiers: number[];
            __typename: number[];
        };
        CreateFamiliarPayload: {
            clientMutationId: number[];
            familiar: number[];
            query: number[];
            itemByLarva: number[];
            itemByEquipment: number[];
            familiarEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateFamiliarInput: {
            clientMutationId: number[];
            familiar: number[];
            __typename: number[];
        };
        FamiliarInput: {
            id: number[];
            name: number[];
            image: number[];
            categories: number[];
            larva: number[];
            equipment: number[];
            cageMatch: number[];
            scavengerHunt: number[];
            obstacleCourse: number[];
            hideAndSeek: number[];
            attributes: number[];
            __typename: number[];
        };
        CreateFoldGroupPayload: {
            clientMutationId: number[];
            foldGroup: number[];
            query: number[];
            foldGroupEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateFoldGroupInput: {
            clientMutationId: number[];
            foldGroup: number[];
            __typename: number[];
        };
        FoldGroupInput: {
            id: number[];
            damage: number[];
            __typename: number[];
        };
        CreateFoldablePayload: {
            clientMutationId: number[];
            foldable: number[];
            query: number[];
            foldGroupByFoldGroup: number[];
            itemByItem: number[];
            foldableEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateFoldableInput: {
            clientMutationId: number[];
            foldable: number[];
            __typename: number[];
        };
        FoldableInput: {
            foldGroup: number[];
            item: number[];
            __typename: number[];
        };
        CreateItemModifierPayload: {
            clientMutationId: number[];
            itemModifier: number[];
            query: number[];
            itemByItem: number[];
            itemModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateItemModifierInput: {
            clientMutationId: number[];
            itemModifier: number[];
            __typename: number[];
        };
        ItemModifierInput: {
            item: number[];
            modifiers: number[];
            __typename: number[];
        };
        CreateItemPayload: {
            clientMutationId: number[];
            item: number[];
            query: number[];
            itemEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateItemInput: {
            clientMutationId: number[];
            item: number[];
            __typename: number[];
        };
        ItemInput: {
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            uses: number[];
            quest: number[];
            gift: number[];
            tradeable: number[];
            discardable: number[];
            autosell: number[];
            plural: number[];
            ambiguous: number[];
            __typename: number[];
        };
        CreateLocationPayload: {
            clientMutationId: number[];
            location: number[];
            query: number[];
            locationEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateLocationInput: {
            clientMutationId: number[];
            location: number[];
            __typename: number[];
        };
        LocationInput: {
            id: number[];
            name: number[];
            zone: number[];
            url: number[];
            difficulty: number[];
            environment: number[];
            statRequirement: number[];
            waterLevel: number[];
            overdrunk: number[];
            nowander: number[];
            combatRate: number[];
            __typename: number[];
        };
        CreateMetaPayload: {
            clientMutationId: number[];
            meta: number[];
            query: number[];
            metaEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateMetaInput: {
            clientMutationId: number[];
            meta: number[];
            __typename: number[];
        };
        MetaInput: {
            lastUpdate: number[];
            __typename: number[];
        };
        CreateMonsterDropPayload: {
            clientMutationId: number[];
            monsterDrop: number[];
            query: number[];
            monsterByMonster: number[];
            itemByItem: number[];
            monsterDropEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateMonsterDropInput: {
            clientMutationId: number[];
            monsterDrop: number[];
            __typename: number[];
        };
        MonsterDropInput: {
            monster: number[];
            item: number[];
            rate: number[];
            category: number[];
            __typename: number[];
        };
        CreateMonsterPayload: {
            clientMutationId: number[];
            monster: number[];
            query: number[];
            monsterEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateMonsterInput: {
            clientMutationId: number[];
            monster: number[];
            __typename: number[];
        };
        MonsterInput: {
            ambiguous: number[];
            article: number[];
            attack: number[];
            boss: number[];
            defence: number[];
            drippy: number[];
            element: number[];
            elementalAttack: number[];
            elementalDefence: number[];
            elementalResistance: number[];
            experience: number[];
            free: number[];
            ghost: number[];
            groupSize: number[];
            hp: number[];
            id: number[];
            image: number[];
            initiative: number[];
            itemBlockChance: number[];
            lucky: number[];
            manuel: number[];
            meat: number[];
            meatExpression: number[];
            monsterLevelMultiplier: number[];
            name: number[];
            nobanish: number[];
            nocopy: number[];
            nomanuel: number[];
            nowander: number[];
            nowish: number[];
            phylum: number[];
            physicalResistance: number[];
            poison: number[];
            scaling: number[];
            scalingCap: number[];
            scalingFloor: number[];
            skillBlockChance: number[];
            snake: number[];
            spellBlockChance: number[];
            sprinkles: number[];
            superlikely: number[];
            ultrarare: number[];
            wanderer: number[];
            wiki: number[];
            wish: number[];
            __typename: number[];
        };
        CreateNativeMonsterPayload: {
            clientMutationId: number[];
            nativeMonster: number[];
            query: number[];
            locationByLocation: number[];
            monsterByMonster: number[];
            nativeMonsterEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateNativeMonsterInput: {
            clientMutationId: number[];
            nativeMonster: number[];
            __typename: number[];
        };
        NativeMonsterInput: {
            location: number[];
            monster: number[];
            weight: number[];
            rejection: number[];
            parity: number[];
            __typename: number[];
        };
        CreateOutfitEquipmentPayload: {
            clientMutationId: number[];
            outfitEquipment: number[];
            query: number[];
            outfitByOutfit: number[];
            itemByEquipment: number[];
            outfitEquipmentEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateOutfitEquipmentInput: {
            clientMutationId: number[];
            outfitEquipment: number[];
            __typename: number[];
        };
        OutfitEquipmentInput: {
            outfit: number[];
            equipment: number[];
            __typename: number[];
        };
        CreateOutfitTreatPayload: {
            clientMutationId: number[];
            outfitTreat: number[];
            query: number[];
            outfitByOutfit: number[];
            itemByItem: number[];
            outfitTreatEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateOutfitTreatInput: {
            clientMutationId: number[];
            outfitTreat: number[];
            __typename: number[];
        };
        OutfitTreatInput: {
            outfit: number[];
            item: number[];
            chance: number[];
            __typename: number[];
        };
        CreateOutfitPayload: {
            clientMutationId: number[];
            outfit: number[];
            query: number[];
            outfitEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateOutfitInput: {
            clientMutationId: number[];
            outfit: number[];
            __typename: number[];
        };
        OutfitInput: {
            id: number[];
            name: number[];
            image: number[];
            __typename: number[];
        };
        CreatePathPayload: {
            clientMutationId: number[];
            path: number[];
            query: number[];
            pathEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreatePathInput: {
            clientMutationId: number[];
            path: number[];
            __typename: number[];
        };
        PathInput: {
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            isAvatar: number[];
            article: number[];
            pointsPreference: number[];
            maximumPoints: number[];
            bucket: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            __typename: number[];
        };
        CreateSkillModifierPayload: {
            clientMutationId: number[];
            skillModifier: number[];
            query: number[];
            skillBySkill: number[];
            skillModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateSkillModifierInput: {
            clientMutationId: number[];
            skillModifier: number[];
            __typename: number[];
        };
        SkillModifierInput: {
            skill: number[];
            modifiers: number[];
            __typename: number[];
        };
        CreateSkillPayload: {
            clientMutationId: number[];
            skill: number[];
            query: number[];
            skillEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        CreateSkillInput: {
            clientMutationId: number[];
            skill: number[];
            __typename: number[];
        };
        SkillInput: {
            id: number[];
            name: number[];
            image: number[];
            tags: number[];
            mpCost: number[];
            duration: number[];
            guildLevel: number[];
            maxLevel: number[];
            permable: number[];
            ambiguous: number[];
            __typename: number[];
        };
        UpdateClassPayload: {
            clientMutationId: number[];
            class: number[];
            query: number[];
            pathByPath: number[];
            classEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateClassInput: {
            clientMutationId: number[];
            nodeId: number[];
            classPatch: number[];
            __typename: number[];
        };
        ClassPatch: {
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            primeStatIndex: number[];
            path: number[];
            stun: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            __typename: number[];
        };
        UpdateClassByIdInput: {
            clientMutationId: number[];
            classPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateConsumablePayload: {
            clientMutationId: number[];
            consumable: number[];
            query: number[];
            itemById: number[];
            consumableEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateConsumableInput: {
            clientMutationId: number[];
            nodeId: number[];
            consumablePatch: number[];
            __typename: number[];
        };
        ConsumablePatch: {
            id: number[];
            stomach: number[];
            liver: number[];
            spleen: number[];
            levelRequirement: number[];
            quality: number[];
            adventureRange: number[];
            adventures: number[];
            muscle: number[];
            muscleRange: number[];
            mysticality: number[];
            mysticalityRange: number[];
            moxie: number[];
            moxieRange: number[];
            notes: number[];
            __typename: number[];
        };
        UpdateConsumableByIdInput: {
            clientMutationId: number[];
            consumablePatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateEffectModifierPayload: {
            clientMutationId: number[];
            effectModifier: number[];
            query: number[];
            effectByEffect: number[];
            effectModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateEffectModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            effectModifierPatch: number[];
            __typename: number[];
        };
        EffectModifierPatch: {
            effect: number[];
            modifiers: number[];
            __typename: number[];
        };
        UpdateEffectModifierByEffectInput: {
            clientMutationId: number[];
            effectModifierPatch: number[];
            effect: number[];
            __typename: number[];
        };
        UpdateEffectPayload: {
            clientMutationId: number[];
            effect: number[];
            query: number[];
            effectEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateEffectInput: {
            clientMutationId: number[];
            nodeId: number[];
            effectPatch: number[];
            __typename: number[];
        };
        EffectPatch: {
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            quality: number[];
            nohookah: number[];
            nopvp: number[];
            noremove: number[];
            song: number[];
            actions: number[];
            ambiguous: number[];
            __typename: number[];
        };
        UpdateEffectByIdInput: {
            clientMutationId: number[];
            effectPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateEffectByDescidInput: {
            clientMutationId: number[];
            effectPatch: number[];
            descid: number[];
            __typename: number[];
        };
        UpdateEquipmentPayload: {
            clientMutationId: number[];
            equipment: number[];
            query: number[];
            itemById: number[];
            equipmentEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateEquipmentInput: {
            clientMutationId: number[];
            nodeId: number[];
            equipmentPatch: number[];
            __typename: number[];
        };
        EquipmentPatch: {
            id: number[];
            power: number[];
            musRequirement: number[];
            mysRequirement: number[];
            moxRequirement: number[];
            type: number[];
            hands: number[];
            __typename: number[];
        };
        UpdateEquipmentByIdInput: {
            clientMutationId: number[];
            equipmentPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateFamiliarModifierPayload: {
            clientMutationId: number[];
            familiarModifier: number[];
            query: number[];
            familiarByFamiliar: number[];
            familiarModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateFamiliarModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            familiarModifierPatch: number[];
            __typename: number[];
        };
        FamiliarModifierPatch: {
            familiar: number[];
            modifiers: number[];
            __typename: number[];
        };
        UpdateFamiliarModifierByFamiliarInput: {
            clientMutationId: number[];
            familiarModifierPatch: number[];
            familiar: number[];
            __typename: number[];
        };
        UpdateFamiliarPayload: {
            clientMutationId: number[];
            familiar: number[];
            query: number[];
            itemByLarva: number[];
            itemByEquipment: number[];
            familiarEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateFamiliarInput: {
            clientMutationId: number[];
            nodeId: number[];
            familiarPatch: number[];
            __typename: number[];
        };
        FamiliarPatch: {
            id: number[];
            name: number[];
            image: number[];
            categories: number[];
            larva: number[];
            equipment: number[];
            cageMatch: number[];
            scavengerHunt: number[];
            obstacleCourse: number[];
            hideAndSeek: number[];
            attributes: number[];
            __typename: number[];
        };
        UpdateFamiliarByIdInput: {
            clientMutationId: number[];
            familiarPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateFoldGroupPayload: {
            clientMutationId: number[];
            foldGroup: number[];
            query: number[];
            foldGroupEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateFoldGroupInput: {
            clientMutationId: number[];
            nodeId: number[];
            foldGroupPatch: number[];
            __typename: number[];
        };
        FoldGroupPatch: {
            id: number[];
            damage: number[];
            __typename: number[];
        };
        UpdateFoldGroupByIdInput: {
            clientMutationId: number[];
            foldGroupPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateItemModifierPayload: {
            clientMutationId: number[];
            itemModifier: number[];
            query: number[];
            itemByItem: number[];
            itemModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateItemModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            itemModifierPatch: number[];
            __typename: number[];
        };
        ItemModifierPatch: {
            item: number[];
            modifiers: number[];
            __typename: number[];
        };
        UpdateItemModifierByItemInput: {
            clientMutationId: number[];
            itemModifierPatch: number[];
            item: number[];
            __typename: number[];
        };
        UpdateItemPayload: {
            clientMutationId: number[];
            item: number[];
            query: number[];
            itemEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateItemInput: {
            clientMutationId: number[];
            nodeId: number[];
            itemPatch: number[];
            __typename: number[];
        };
        ItemPatch: {
            id: number[];
            name: number[];
            descid: number[];
            image: number[];
            uses: number[];
            quest: number[];
            gift: number[];
            tradeable: number[];
            discardable: number[];
            autosell: number[];
            plural: number[];
            ambiguous: number[];
            __typename: number[];
        };
        UpdateItemByIdInput: {
            clientMutationId: number[];
            itemPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateItemByDescidInput: {
            clientMutationId: number[];
            itemPatch: number[];
            descid: number[];
            __typename: number[];
        };
        UpdateLocationPayload: {
            clientMutationId: number[];
            location: number[];
            query: number[];
            locationEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateLocationInput: {
            clientMutationId: number[];
            nodeId: number[];
            locationPatch: number[];
            __typename: number[];
        };
        LocationPatch: {
            id: number[];
            name: number[];
            zone: number[];
            url: number[];
            difficulty: number[];
            environment: number[];
            statRequirement: number[];
            waterLevel: number[];
            overdrunk: number[];
            nowander: number[];
            combatRate: number[];
            __typename: number[];
        };
        UpdateLocationByNameInput: {
            clientMutationId: number[];
            locationPatch: number[];
            name: number[];
            __typename: number[];
        };
        UpdateMonsterPayload: {
            clientMutationId: number[];
            monster: number[];
            query: number[];
            monsterEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateMonsterInput: {
            clientMutationId: number[];
            nodeId: number[];
            monsterPatch: number[];
            __typename: number[];
        };
        MonsterPatch: {
            ambiguous: number[];
            article: number[];
            attack: number[];
            boss: number[];
            defence: number[];
            drippy: number[];
            element: number[];
            elementalAttack: number[];
            elementalDefence: number[];
            elementalResistance: number[];
            experience: number[];
            free: number[];
            ghost: number[];
            groupSize: number[];
            hp: number[];
            id: number[];
            image: number[];
            initiative: number[];
            itemBlockChance: number[];
            lucky: number[];
            manuel: number[];
            meat: number[];
            meatExpression: number[];
            monsterLevelMultiplier: number[];
            name: number[];
            nobanish: number[];
            nocopy: number[];
            nomanuel: number[];
            nowander: number[];
            nowish: number[];
            phylum: number[];
            physicalResistance: number[];
            poison: number[];
            scaling: number[];
            scalingCap: number[];
            scalingFloor: number[];
            skillBlockChance: number[];
            snake: number[];
            spellBlockChance: number[];
            sprinkles: number[];
            superlikely: number[];
            ultrarare: number[];
            wanderer: number[];
            wiki: number[];
            wish: number[];
            __typename: number[];
        };
        UpdateMonsterByIdInput: {
            clientMutationId: number[];
            monsterPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdateOutfitPayload: {
            clientMutationId: number[];
            outfit: number[];
            query: number[];
            outfitEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateOutfitInput: {
            clientMutationId: number[];
            nodeId: number[];
            outfitPatch: number[];
            __typename: number[];
        };
        OutfitPatch: {
            id: number[];
            name: number[];
            image: number[];
            __typename: number[];
        };
        UpdateOutfitByIdInput: {
            clientMutationId: number[];
            outfitPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdatePathPayload: {
            clientMutationId: number[];
            path: number[];
            query: number[];
            pathEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdatePathInput: {
            clientMutationId: number[];
            nodeId: number[];
            pathPatch: number[];
            __typename: number[];
        };
        PathPatch: {
            id: number[];
            name: number[];
            enumName: number[];
            image: number[];
            isAvatar: number[];
            article: number[];
            pointsPreference: number[];
            maximumPoints: number[];
            bucket: number[];
            stomachCapacity: number[];
            liverCapacity: number[];
            spleenCapacity: number[];
            __typename: number[];
        };
        UpdatePathByIdInput: {
            clientMutationId: number[];
            pathPatch: number[];
            id: number[];
            __typename: number[];
        };
        UpdatePathByImageInput: {
            clientMutationId: number[];
            pathPatch: number[];
            image: number[];
            __typename: number[];
        };
        UpdateSkillModifierPayload: {
            clientMutationId: number[];
            skillModifier: number[];
            query: number[];
            skillBySkill: number[];
            skillModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateSkillModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            skillModifierPatch: number[];
            __typename: number[];
        };
        SkillModifierPatch: {
            skill: number[];
            modifiers: number[];
            __typename: number[];
        };
        UpdateSkillModifierBySkillInput: {
            clientMutationId: number[];
            skillModifierPatch: number[];
            skill: number[];
            __typename: number[];
        };
        UpdateSkillPayload: {
            clientMutationId: number[];
            skill: number[];
            query: number[];
            skillEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        UpdateSkillInput: {
            clientMutationId: number[];
            nodeId: number[];
            skillPatch: number[];
            __typename: number[];
        };
        SkillPatch: {
            id: number[];
            name: number[];
            image: number[];
            tags: number[];
            mpCost: number[];
            duration: number[];
            guildLevel: number[];
            maxLevel: number[];
            permable: number[];
            ambiguous: number[];
            __typename: number[];
        };
        UpdateSkillByIdInput: {
            clientMutationId: number[];
            skillPatch: number[];
            id: number[];
            __typename: number[];
        };
        DeleteClassPayload: {
            clientMutationId: number[];
            class: number[];
            deletedClassId: number[];
            query: number[];
            pathByPath: number[];
            classEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteClassInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteClassByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteConsumablePayload: {
            clientMutationId: number[];
            consumable: number[];
            deletedConsumableId: number[];
            query: number[];
            itemById: number[];
            consumableEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteConsumableInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteConsumableByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteEffectModifierPayload: {
            clientMutationId: number[];
            effectModifier: number[];
            deletedEffectModifierId: number[];
            query: number[];
            effectByEffect: number[];
            effectModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteEffectModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteEffectModifierByEffectInput: {
            clientMutationId: number[];
            effect: number[];
            __typename: number[];
        };
        DeleteEffectPayload: {
            clientMutationId: number[];
            effect: number[];
            deletedEffectId: number[];
            query: number[];
            effectEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteEffectInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteEffectByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteEffectByDescidInput: {
            clientMutationId: number[];
            descid: number[];
            __typename: number[];
        };
        DeleteEquipmentPayload: {
            clientMutationId: number[];
            equipment: number[];
            deletedEquipmentId: number[];
            query: number[];
            itemById: number[];
            equipmentEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteEquipmentInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteEquipmentByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteFamiliarModifierPayload: {
            clientMutationId: number[];
            familiarModifier: number[];
            deletedFamiliarModifierId: number[];
            query: number[];
            familiarByFamiliar: number[];
            familiarModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteFamiliarModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteFamiliarModifierByFamiliarInput: {
            clientMutationId: number[];
            familiar: number[];
            __typename: number[];
        };
        DeleteFamiliarPayload: {
            clientMutationId: number[];
            familiar: number[];
            deletedFamiliarId: number[];
            query: number[];
            itemByLarva: number[];
            itemByEquipment: number[];
            familiarEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteFamiliarInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteFamiliarByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteFoldGroupPayload: {
            clientMutationId: number[];
            foldGroup: number[];
            deletedFoldGroupId: number[];
            query: number[];
            foldGroupEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteFoldGroupInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteFoldGroupByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteItemModifierPayload: {
            clientMutationId: number[];
            itemModifier: number[];
            deletedItemModifierId: number[];
            query: number[];
            itemByItem: number[];
            itemModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteItemModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteItemModifierByItemInput: {
            clientMutationId: number[];
            item: number[];
            __typename: number[];
        };
        DeleteItemPayload: {
            clientMutationId: number[];
            item: number[];
            deletedItemId: number[];
            query: number[];
            itemEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteItemInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteItemByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteItemByDescidInput: {
            clientMutationId: number[];
            descid: number[];
            __typename: number[];
        };
        DeleteLocationPayload: {
            clientMutationId: number[];
            location: number[];
            deletedLocationId: number[];
            query: number[];
            locationEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteLocationInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteLocationByNameInput: {
            clientMutationId: number[];
            name: number[];
            __typename: number[];
        };
        DeleteMonsterPayload: {
            clientMutationId: number[];
            monster: number[];
            deletedMonsterId: number[];
            query: number[];
            monsterEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteMonsterInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteMonsterByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeleteOutfitPayload: {
            clientMutationId: number[];
            outfit: number[];
            deletedOutfitId: number[];
            query: number[];
            outfitEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteOutfitInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteOutfitByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeletePathPayload: {
            clientMutationId: number[];
            path: number[];
            deletedPathId: number[];
            query: number[];
            pathEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeletePathInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeletePathByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
        DeletePathByImageInput: {
            clientMutationId: number[];
            image: number[];
            __typename: number[];
        };
        DeleteSkillModifierPayload: {
            clientMutationId: number[];
            skillModifier: number[];
            deletedSkillModifierId: number[];
            query: number[];
            skillBySkill: number[];
            skillModifierEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteSkillModifierInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteSkillModifierBySkillInput: {
            clientMutationId: number[];
            skill: number[];
            __typename: number[];
        };
        DeleteSkillPayload: {
            clientMutationId: number[];
            skill: number[];
            deletedSkillId: number[];
            query: number[];
            skillEdge: (number | {
                orderBy: (string | number)[];
            })[];
            __typename: number[];
        };
        DeleteSkillInput: {
            clientMutationId: number[];
            nodeId: number[];
            __typename: number[];
        };
        DeleteSkillByIdInput: {
            clientMutationId: number[];
            id: number[];
            __typename: number[];
        };
    };
};
export default _default;
